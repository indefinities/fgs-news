import {
  __commonJS,
  __toESM
} from "./chunk-TR7DSYBJ.js";

// node_modules/jquery/dist/jquery.js
var require_jquery = __commonJS({
  "node_modules/jquery/dist/jquery.js"(exports, module) {
    (function(global, factory) {
      "use strict";
      if (typeof module === "object" && typeof module.exports === "object") {
        module.exports = global.document ? factory(global, true) : function(w) {
          if (!w.document) {
            throw new Error("jQuery requires a window with a document");
          }
          return factory(w);
        };
      } else {
        factory(global);
      }
    })(typeof window !== "undefined" ? window : exports, function(window2, noGlobal) {
      "use strict";
      var arr = [];
      var getProto = Object.getPrototypeOf;
      var slice = arr.slice;
      var flat = arr.flat ? function(array) {
        return arr.flat.call(array);
      } : function(array) {
        return arr.concat.apply([], array);
      };
      var push = arr.push;
      var indexOf = arr.indexOf;
      var class2type = {};
      var toString = class2type.toString;
      var hasOwn = class2type.hasOwnProperty;
      var fnToString = hasOwn.toString;
      var ObjectFunctionString = fnToString.call(Object);
      var support = {};
      var isFunction = function isFunction2(obj) {
        return typeof obj === "function" && typeof obj.nodeType !== "number" && typeof obj.item !== "function";
      };
      var isWindow = function isWindow2(obj) {
        return obj != null && obj === obj.window;
      };
      var document2 = window2.document;
      var preservedScriptAttributes = {
        type: true,
        src: true,
        nonce: true,
        noModule: true
      };
      function DOMEval(code, node, doc) {
        doc = doc || document2;
        var i, val, script2 = doc.createElement("script");
        script2.text = code;
        if (node) {
          for (i in preservedScriptAttributes) {
            val = node[i] || node.getAttribute && node.getAttribute(i);
            if (val) {
              script2.setAttribute(i, val);
            }
          }
        }
        doc.head.appendChild(script2).parentNode.removeChild(script2);
      }
      function toType2(obj) {
        if (obj == null) {
          return obj + "";
        }
        return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
      }
      var version = "3.7.0", rhtmlSuffix = /HTML$/i, jQuery = function(selector, context) {
        return new jQuery.fn.init(selector, context);
      };
      jQuery.fn = jQuery.prototype = {
        jquery: version,
        constructor: jQuery,
        length: 0,
        toArray: function() {
          return slice.call(this);
        },
        get: function(num) {
          if (num == null) {
            return slice.call(this);
          }
          return num < 0 ? this[num + this.length] : this[num];
        },
        pushStack: function(elems) {
          var ret = jQuery.merge(this.constructor(), elems);
          ret.prevObject = this;
          return ret;
        },
        each: function(callback) {
          return jQuery.each(this, callback);
        },
        map: function(callback) {
          return this.pushStack(jQuery.map(this, function(elem, i) {
            return callback.call(elem, i, elem);
          }));
        },
        slice: function() {
          return this.pushStack(slice.apply(this, arguments));
        },
        first: function() {
          return this.eq(0);
        },
        last: function() {
          return this.eq(-1);
        },
        even: function() {
          return this.pushStack(jQuery.grep(this, function(_elem, i) {
            return (i + 1) % 2;
          }));
        },
        odd: function() {
          return this.pushStack(jQuery.grep(this, function(_elem, i) {
            return i % 2;
          }));
        },
        eq: function(i) {
          var len = this.length, j = +i + (i < 0 ? len : 0);
          return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        end: function() {
          return this.prevObject || this.constructor();
        },
        push,
        sort: arr.sort,
        splice: arr.splice
      };
      jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === "boolean") {
          deep = target;
          target = arguments[i] || {};
          i++;
        }
        if (typeof target !== "object" && !isFunction(target)) {
          target = {};
        }
        if (i === length) {
          target = this;
          i--;
        }
        for (; i < length; i++) {
          if ((options = arguments[i]) != null) {
            for (name in options) {
              copy = options[name];
              if (name === "__proto__" || target === copy) {
                continue;
              }
              if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                src = target[name];
                if (copyIsArray && !Array.isArray(src)) {
                  clone = [];
                } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
                  clone = {};
                } else {
                  clone = src;
                }
                copyIsArray = false;
                target[name] = jQuery.extend(deep, clone, copy);
              } else if (copy !== void 0) {
                target[name] = copy;
              }
            }
          }
        }
        return target;
      };
      jQuery.extend({
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
        isReady: true,
        error: function(msg) {
          throw new Error(msg);
        },
        noop: function() {
        },
        isPlainObject: function(obj) {
          var proto, Ctor;
          if (!obj || toString.call(obj) !== "[object Object]") {
            return false;
          }
          proto = getProto(obj);
          if (!proto) {
            return true;
          }
          Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
          return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
        },
        isEmptyObject: function(obj) {
          var name;
          for (name in obj) {
            return false;
          }
          return true;
        },
        globalEval: function(code, options, doc) {
          DOMEval(code, { nonce: options && options.nonce }, doc);
        },
        each: function(obj, callback) {
          var length, i = 0;
          if (isArrayLike(obj)) {
            length = obj.length;
            for (; i < length; i++) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break;
              }
            }
          } else {
            for (i in obj) {
              if (callback.call(obj[i], i, obj[i]) === false) {
                break;
              }
            }
          }
          return obj;
        },
        text: function(elem) {
          var node, ret = "", i = 0, nodeType = elem.nodeType;
          if (!nodeType) {
            while (node = elem[i++]) {
              ret += jQuery.text(node);
            }
          } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
            return elem.textContent;
          } else if (nodeType === 3 || nodeType === 4) {
            return elem.nodeValue;
          }
          return ret;
        },
        makeArray: function(arr2, results) {
          var ret = results || [];
          if (arr2 != null) {
            if (isArrayLike(Object(arr2))) {
              jQuery.merge(
                ret,
                typeof arr2 === "string" ? [arr2] : arr2
              );
            } else {
              push.call(ret, arr2);
            }
          }
          return ret;
        },
        inArray: function(elem, arr2, i) {
          return arr2 == null ? -1 : indexOf.call(arr2, elem, i);
        },
        isXMLDoc: function(elem) {
          var namespace = elem && elem.namespaceURI, docElem = elem && (elem.ownerDocument || elem).documentElement;
          return !rhtmlSuffix.test(namespace || docElem && docElem.nodeName || "HTML");
        },
        merge: function(first, second) {
          var len = +second.length, j = 0, i = first.length;
          for (; j < len; j++) {
            first[i++] = second[j];
          }
          first.length = i;
          return first;
        },
        grep: function(elems, callback, invert) {
          var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
          for (; i < length; i++) {
            callbackInverse = !callback(elems[i], i);
            if (callbackInverse !== callbackExpect) {
              matches.push(elems[i]);
            }
          }
          return matches;
        },
        map: function(elems, callback, arg) {
          var length, value, i = 0, ret = [];
          if (isArrayLike(elems)) {
            length = elems.length;
            for (; i < length; i++) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value);
              }
            }
          } else {
            for (i in elems) {
              value = callback(elems[i], i, arg);
              if (value != null) {
                ret.push(value);
              }
            }
          }
          return flat(ret);
        },
        guid: 1,
        support
      });
      if (typeof Symbol === "function") {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
      }
      jQuery.each(
        "Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),
        function(_i, name) {
          class2type["[object " + name + "]"] = name.toLowerCase();
        }
      );
      function isArrayLike(obj) {
        var length = !!obj && "length" in obj && obj.length, type = toType2(obj);
        if (isFunction(obj) || isWindow(obj)) {
          return false;
        }
        return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
      }
      function nodeName(elem, name) {
        return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
      }
      var pop = arr.pop;
      var sort = arr.sort;
      var splice = arr.splice;
      var whitespace = "[\\x20\\t\\r\\n\\f]";
      var rtrimCSS = new RegExp(
        "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
        "g"
      );
      jQuery.contains = function(a, b) {
        var bup = b && b.parentNode;
        return a === bup || !!(bup && bup.nodeType === 1 && (a.contains ? a.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
      };
      var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;
      function fcssescape(ch, asCodePoint) {
        if (asCodePoint) {
          if (ch === "\0") {
            return "\uFFFD";
          }
          return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
        }
        return "\\" + ch;
      }
      jQuery.escapeSelector = function(sel) {
        return (sel + "").replace(rcssescape, fcssescape);
      };
      var preferredDoc = document2, pushNative = push;
      (function() {
        var i, Expr, outermostContext, sortInput, hasDuplicate, push2 = pushNative, document3, documentElement2, documentIsHTML, rbuggyQSA, matches, expando = jQuery.expando, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), nonnativeSelectorCache = createCache(), sortOrder = function(a, b) {
          if (a === b) {
            hasDuplicate = true;
          }
          return 0;
        }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + `*(?:'((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)"|(` + identifier + "))|)" + whitespace + "*\\]", pseudos = ":(" + identifier + `)(?:\\((('((?:\\\\.|[^\\\\'])*)'|"((?:\\\\.|[^\\\\"])*)")|((?:\\\\.|[^\\\\()[\\]]|` + attributes + ")*)|.*)\\)|)", rwhitespace = new RegExp(whitespace + "+", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rleadingCombinator = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rdescend = new RegExp(whitespace + "|>"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
          ID: new RegExp("^#(" + identifier + ")"),
          CLASS: new RegExp("^\\.(" + identifier + ")"),
          TAG: new RegExp("^(" + identifier + "|[*])"),
          ATTR: new RegExp("^" + attributes),
          PSEUDO: new RegExp("^" + pseudos),
          CHILD: new RegExp(
            "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)",
            "i"
          ),
          bool: new RegExp("^(?:" + booleans + ")$", "i"),
          needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rquickExpr2 = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, runescape = new RegExp("\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g"), funescape = function(escape, nonHex) {
          var high = "0x" + escape.slice(1) - 65536;
          if (nonHex) {
            return nonHex;
          }
          return high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
        }, unloadHandler = function() {
          setDocument();
        }, inDisabledFieldset = addCombinator(
          function(elem) {
            return elem.disabled === true && nodeName(elem, "fieldset");
          },
          { dir: "parentNode", next: "legend" }
        );
        function safeActiveElement() {
          try {
            return document3.activeElement;
          } catch (err) {
          }
        }
        try {
          push2.apply(
            arr = slice.call(preferredDoc.childNodes),
            preferredDoc.childNodes
          );
          arr[preferredDoc.childNodes.length].nodeType;
        } catch (e) {
          push2 = {
            apply: function(target, els) {
              pushNative.apply(target, slice.call(els));
            },
            call: function(target) {
              pushNative.apply(target, slice.call(arguments, 1));
            }
          };
        }
        function find(selector, context, results, seed) {
          var m, i2, elem, nid, match, groups, newSelector, newContext = context && context.ownerDocument, nodeType = context ? context.nodeType : 9;
          results = results || [];
          if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
            return results;
          }
          if (!seed) {
            setDocument(context);
            context = context || document3;
            if (documentIsHTML) {
              if (nodeType !== 11 && (match = rquickExpr2.exec(selector))) {
                if (m = match[1]) {
                  if (nodeType === 9) {
                    if (elem = context.getElementById(m)) {
                      if (elem.id === m) {
                        push2.call(results, elem);
                        return results;
                      }
                    } else {
                      return results;
                    }
                  } else {
                    if (newContext && (elem = newContext.getElementById(m)) && find.contains(context, elem) && elem.id === m) {
                      push2.call(results, elem);
                      return results;
                    }
                  }
                } else if (match[2]) {
                  push2.apply(results, context.getElementsByTagName(selector));
                  return results;
                } else if ((m = match[3]) && context.getElementsByClassName) {
                  push2.apply(results, context.getElementsByClassName(m));
                  return results;
                }
              }
              if (!nonnativeSelectorCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                newSelector = selector;
                newContext = context;
                if (nodeType === 1 && (rdescend.test(selector) || rleadingCombinator.test(selector))) {
                  newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                  if (newContext != context || !support.scope) {
                    if (nid = context.getAttribute("id")) {
                      nid = jQuery.escapeSelector(nid);
                    } else {
                      context.setAttribute("id", nid = expando);
                    }
                  }
                  groups = tokenize(selector);
                  i2 = groups.length;
                  while (i2--) {
                    groups[i2] = (nid ? "#" + nid : ":scope") + " " + toSelector(groups[i2]);
                  }
                  newSelector = groups.join(",");
                }
                try {
                  push2.apply(
                    results,
                    newContext.querySelectorAll(newSelector)
                  );
                  return results;
                } catch (qsaError) {
                  nonnativeSelectorCache(selector, true);
                } finally {
                  if (nid === expando) {
                    context.removeAttribute("id");
                  }
                }
              }
            }
          }
          return select(selector.replace(rtrimCSS, "$1"), context, results, seed);
        }
        function createCache() {
          var keys2 = [];
          function cache(key, value) {
            if (keys2.push(key + " ") > Expr.cacheLength) {
              delete cache[keys2.shift()];
            }
            return cache[key + " "] = value;
          }
          return cache;
        }
        function markFunction(fn) {
          fn[expando] = true;
          return fn;
        }
        function assert(fn) {
          var el = document3.createElement("fieldset");
          try {
            return !!fn(el);
          } catch (e) {
            return false;
          } finally {
            if (el.parentNode) {
              el.parentNode.removeChild(el);
            }
            el = null;
          }
        }
        function createInputPseudo(type) {
          return function(elem) {
            return nodeName(elem, "input") && elem.type === type;
          };
        }
        function createButtonPseudo(type) {
          return function(elem) {
            return (nodeName(elem, "input") || nodeName(elem, "button")) && elem.type === type;
          };
        }
        function createDisabledPseudo(disabled) {
          return function(elem) {
            if ("form" in elem) {
              if (elem.parentNode && elem.disabled === false) {
                if ("label" in elem) {
                  if ("label" in elem.parentNode) {
                    return elem.parentNode.disabled === disabled;
                  } else {
                    return elem.disabled === disabled;
                  }
                }
                return elem.isDisabled === disabled || elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;
              }
              return elem.disabled === disabled;
            } else if ("label" in elem) {
              return elem.disabled === disabled;
            }
            return false;
          };
        }
        function createPositionalPseudo(fn) {
          return markFunction(function(argument) {
            argument = +argument;
            return markFunction(function(seed, matches2) {
              var j, matchIndexes = fn([], seed.length, argument), i2 = matchIndexes.length;
              while (i2--) {
                if (seed[j = matchIndexes[i2]]) {
                  seed[j] = !(matches2[j] = seed[j]);
                }
              }
            });
          });
        }
        function testContext(context) {
          return context && typeof context.getElementsByTagName !== "undefined" && context;
        }
        function setDocument(node) {
          var subWindow, doc = node ? node.ownerDocument || node : preferredDoc;
          if (doc == document3 || doc.nodeType !== 9 || !doc.documentElement) {
            return document3;
          }
          document3 = doc;
          documentElement2 = document3.documentElement;
          documentIsHTML = !jQuery.isXMLDoc(document3);
          matches = documentElement2.matches || documentElement2.webkitMatchesSelector || documentElement2.msMatchesSelector;
          if (preferredDoc != document3 && (subWindow = document3.defaultView) && subWindow.top !== subWindow) {
            subWindow.addEventListener("unload", unloadHandler);
          }
          support.getById = assert(function(el) {
            documentElement2.appendChild(el).id = jQuery.expando;
            return !document3.getElementsByName || !document3.getElementsByName(jQuery.expando).length;
          });
          support.disconnectedMatch = assert(function(el) {
            return matches.call(el, "*");
          });
          support.scope = assert(function() {
            return document3.querySelectorAll(":scope");
          });
          support.cssHas = assert(function() {
            try {
              document3.querySelector(":has(*,:jqfake)");
              return false;
            } catch (e) {
              return true;
            }
          });
          if (support.getById) {
            Expr.filter.ID = function(id) {
              var attrId = id.replace(runescape, funescape);
              return function(elem) {
                return elem.getAttribute("id") === attrId;
              };
            };
            Expr.find.ID = function(id, context) {
              if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                var elem = context.getElementById(id);
                return elem ? [elem] : [];
              }
            };
          } else {
            Expr.filter.ID = function(id) {
              var attrId = id.replace(runescape, funescape);
              return function(elem) {
                var node2 = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                return node2 && node2.value === attrId;
              };
            };
            Expr.find.ID = function(id, context) {
              if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                var node2, i2, elems, elem = context.getElementById(id);
                if (elem) {
                  node2 = elem.getAttributeNode("id");
                  if (node2 && node2.value === id) {
                    return [elem];
                  }
                  elems = context.getElementsByName(id);
                  i2 = 0;
                  while (elem = elems[i2++]) {
                    node2 = elem.getAttributeNode("id");
                    if (node2 && node2.value === id) {
                      return [elem];
                    }
                  }
                }
                return [];
              }
            };
          }
          Expr.find.TAG = function(tag, context) {
            if (typeof context.getElementsByTagName !== "undefined") {
              return context.getElementsByTagName(tag);
            } else {
              return context.querySelectorAll(tag);
            }
          };
          Expr.find.CLASS = function(className, context) {
            if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
              return context.getElementsByClassName(className);
            }
          };
          rbuggyQSA = [];
          assert(function(el) {
            var input;
            documentElement2.appendChild(el).innerHTML = "<a id='" + expando + "' href='' disabled='disabled'></a><select id='" + expando + "-\r\\' disabled='disabled'><option selected=''></option></select>";
            if (!el.querySelectorAll("[selected]").length) {
              rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
            }
            if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
              rbuggyQSA.push("~=");
            }
            if (!el.querySelectorAll("a#" + expando + "+*").length) {
              rbuggyQSA.push(".#.+[+~]");
            }
            if (!el.querySelectorAll(":checked").length) {
              rbuggyQSA.push(":checked");
            }
            input = document3.createElement("input");
            input.setAttribute("type", "hidden");
            el.appendChild(input).setAttribute("name", "D");
            documentElement2.appendChild(el).disabled = true;
            if (el.querySelectorAll(":disabled").length !== 2) {
              rbuggyQSA.push(":enabled", ":disabled");
            }
            input = document3.createElement("input");
            input.setAttribute("name", "");
            el.appendChild(input);
            if (!el.querySelectorAll("[name='']").length) {
              rbuggyQSA.push("\\[" + whitespace + "*name" + whitespace + "*=" + whitespace + `*(?:''|"")`);
            }
          });
          if (!support.cssHas) {
            rbuggyQSA.push(":has");
          }
          rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
          sortOrder = function(a, b) {
            if (a === b) {
              hasDuplicate = true;
              return 0;
            }
            var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
            if (compare) {
              return compare;
            }
            compare = (a.ownerDocument || a) == (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
            if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
              if (a === document3 || a.ownerDocument == preferredDoc && find.contains(preferredDoc, a)) {
                return -1;
              }
              if (b === document3 || b.ownerDocument == preferredDoc && find.contains(preferredDoc, b)) {
                return 1;
              }
              return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
            }
            return compare & 4 ? -1 : 1;
          };
          return document3;
        }
        find.matches = function(expr, elements) {
          return find(expr, null, null, elements);
        };
        find.matchesSelector = function(elem, expr) {
          setDocument(elem);
          if (documentIsHTML && !nonnativeSelectorCache[expr + " "] && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
            try {
              var ret = matches.call(elem, expr);
              if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                return ret;
              }
            } catch (e) {
              nonnativeSelectorCache(expr, true);
            }
          }
          return find(expr, document3, null, [elem]).length > 0;
        };
        find.contains = function(context, elem) {
          if ((context.ownerDocument || context) != document3) {
            setDocument(context);
          }
          return jQuery.contains(context, elem);
        };
        find.attr = function(elem, name) {
          if ((elem.ownerDocument || elem) != document3) {
            setDocument(elem);
          }
          var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : void 0;
          if (val !== void 0) {
            return val;
          }
          return elem.getAttribute(name);
        };
        find.error = function(msg) {
          throw new Error("Syntax error, unrecognized expression: " + msg);
        };
        jQuery.uniqueSort = function(results) {
          var elem, duplicates = [], j = 0, i2 = 0;
          hasDuplicate = !support.sortStable;
          sortInput = !support.sortStable && slice.call(results, 0);
          sort.call(results, sortOrder);
          if (hasDuplicate) {
            while (elem = results[i2++]) {
              if (elem === results[i2]) {
                j = duplicates.push(i2);
              }
            }
            while (j--) {
              splice.call(results, duplicates[j], 1);
            }
          }
          sortInput = null;
          return results;
        };
        jQuery.fn.uniqueSort = function() {
          return this.pushStack(jQuery.uniqueSort(slice.apply(this)));
        };
        Expr = jQuery.expr = {
          cacheLength: 50,
          createPseudo: markFunction,
          match: matchExpr,
          attrHandle: {},
          find: {},
          relative: {
            ">": { dir: "parentNode", first: true },
            " ": { dir: "parentNode" },
            "+": { dir: "previousSibling", first: true },
            "~": { dir: "previousSibling" }
          },
          preFilter: {
            ATTR: function(match) {
              match[1] = match[1].replace(runescape, funescape);
              match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
              if (match[2] === "~=") {
                match[3] = " " + match[3] + " ";
              }
              return match.slice(0, 4);
            },
            CHILD: function(match) {
              match[1] = match[1].toLowerCase();
              if (match[1].slice(0, 3) === "nth") {
                if (!match[3]) {
                  find.error(match[0]);
                }
                match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                match[5] = +(match[7] + match[8] || match[3] === "odd");
              } else if (match[3]) {
                find.error(match[0]);
              }
              return match;
            },
            PSEUDO: function(match) {
              var excess, unquoted = !match[6] && match[2];
              if (matchExpr.CHILD.test(match[0])) {
                return null;
              }
              if (match[3]) {
                match[2] = match[4] || match[5] || "";
              } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                match[0] = match[0].slice(0, excess);
                match[2] = unquoted.slice(0, excess);
              }
              return match.slice(0, 3);
            }
          },
          filter: {
            TAG: function(nodeNameSelector) {
              var expectedNodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
              return nodeNameSelector === "*" ? function() {
                return true;
              } : function(elem) {
                return nodeName(elem, expectedNodeName);
              };
            },
            CLASS: function(className) {
              var pattern = classCache[className + " "];
              return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                return pattern.test(
                  typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || ""
                );
              });
            },
            ATTR: function(name, operator, check) {
              return function(elem) {
                var result = find.attr(elem, name);
                if (result == null) {
                  return operator === "!=";
                }
                if (!operator) {
                  return true;
                }
                result += "";
                if (operator === "=") {
                  return result === check;
                }
                if (operator === "!=") {
                  return result !== check;
                }
                if (operator === "^=") {
                  return check && result.indexOf(check) === 0;
                }
                if (operator === "*=") {
                  return check && result.indexOf(check) > -1;
                }
                if (operator === "$=") {
                  return check && result.slice(-check.length) === check;
                }
                if (operator === "~=") {
                  return (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1;
                }
                if (operator === "|=") {
                  return result === check || result.slice(0, check.length + 1) === check + "-";
                }
                return false;
              };
            },
            CHILD: function(type, what, _argument, first, last) {
              var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
              return first === 1 && last === 0 ? function(elem) {
                return !!elem.parentNode;
              } : function(elem, _context, xml) {
                var cache, outerCache, node, nodeIndex, start, dir2 = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType, diff = false;
                if (parent) {
                  if (simple) {
                    while (dir2) {
                      node = elem;
                      while (node = node[dir2]) {
                        if (ofType ? nodeName(node, name) : node.nodeType === 1) {
                          return false;
                        }
                      }
                      start = dir2 = type === "only" && !start && "nextSibling";
                    }
                    return true;
                  }
                  start = [forward ? parent.firstChild : parent.lastChild];
                  if (forward && useCache) {
                    outerCache = parent[expando] || (parent[expando] = {});
                    cache = outerCache[type] || [];
                    nodeIndex = cache[0] === dirruns && cache[1];
                    diff = nodeIndex && cache[2];
                    node = nodeIndex && parent.childNodes[nodeIndex];
                    while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start.pop()) {
                      if (node.nodeType === 1 && ++diff && node === elem) {
                        outerCache[type] = [dirruns, nodeIndex, diff];
                        break;
                      }
                    }
                  } else {
                    if (useCache) {
                      outerCache = elem[expando] || (elem[expando] = {});
                      cache = outerCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex;
                    }
                    if (diff === false) {
                      while (node = ++nodeIndex && node && node[dir2] || (diff = nodeIndex = 0) || start.pop()) {
                        if ((ofType ? nodeName(node, name) : node.nodeType === 1) && ++diff) {
                          if (useCache) {
                            outerCache = node[expando] || (node[expando] = {});
                            outerCache[type] = [dirruns, diff];
                          }
                          if (node === elem) {
                            break;
                          }
                        }
                      }
                    }
                  }
                  diff -= last;
                  return diff === first || diff % first === 0 && diff / first >= 0;
                }
              };
            },
            PSEUDO: function(pseudo, argument) {
              var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || find.error("unsupported pseudo: " + pseudo);
              if (fn[expando]) {
                return fn(argument);
              }
              if (fn.length > 1) {
                args = [pseudo, pseudo, "", argument];
                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches2) {
                  var idx, matched = fn(seed, argument), i2 = matched.length;
                  while (i2--) {
                    idx = indexOf.call(seed, matched[i2]);
                    seed[idx] = !(matches2[idx] = matched[i2]);
                  }
                }) : function(elem) {
                  return fn(elem, 0, args);
                };
              }
              return fn;
            }
          },
          pseudos: {
            not: markFunction(function(selector) {
              var input = [], results = [], matcher = compile(selector.replace(rtrimCSS, "$1"));
              return matcher[expando] ? markFunction(function(seed, matches2, _context, xml) {
                var elem, unmatched = matcher(seed, null, xml, []), i2 = seed.length;
                while (i2--) {
                  if (elem = unmatched[i2]) {
                    seed[i2] = !(matches2[i2] = elem);
                  }
                }
              }) : function(elem, _context, xml) {
                input[0] = elem;
                matcher(input, null, xml, results);
                input[0] = null;
                return !results.pop();
              };
            }),
            has: markFunction(function(selector) {
              return function(elem) {
                return find(selector, elem).length > 0;
              };
            }),
            contains: markFunction(function(text) {
              text = text.replace(runescape, funescape);
              return function(elem) {
                return (elem.textContent || jQuery.text(elem)).indexOf(text) > -1;
              };
            }),
            lang: markFunction(function(lang) {
              if (!ridentifier.test(lang || "")) {
                find.error("unsupported lang: " + lang);
              }
              lang = lang.replace(runescape, funescape).toLowerCase();
              return function(elem) {
                var elemLang;
                do {
                  if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                    elemLang = elemLang.toLowerCase();
                    return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                  }
                } while ((elem = elem.parentNode) && elem.nodeType === 1);
                return false;
              };
            }),
            target: function(elem) {
              var hash = window2.location && window2.location.hash;
              return hash && hash.slice(1) === elem.id;
            },
            root: function(elem) {
              return elem === documentElement2;
            },
            focus: function(elem) {
              return elem === safeActiveElement() && document3.hasFocus() && !!(elem.type || elem.href || ~elem.tabIndex);
            },
            enabled: createDisabledPseudo(false),
            disabled: createDisabledPseudo(true),
            checked: function(elem) {
              return nodeName(elem, "input") && !!elem.checked || nodeName(elem, "option") && !!elem.selected;
            },
            selected: function(elem) {
              if (elem.parentNode) {
                elem.parentNode.selectedIndex;
              }
              return elem.selected === true;
            },
            empty: function(elem) {
              for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                if (elem.nodeType < 6) {
                  return false;
                }
              }
              return true;
            },
            parent: function(elem) {
              return !Expr.pseudos.empty(elem);
            },
            header: function(elem) {
              return rheader.test(elem.nodeName);
            },
            input: function(elem) {
              return rinputs.test(elem.nodeName);
            },
            button: function(elem) {
              return nodeName(elem, "input") && elem.type === "button" || nodeName(elem, "button");
            },
            text: function(elem) {
              var attr;
              return nodeName(elem, "input") && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
            },
            first: createPositionalPseudo(function() {
              return [0];
            }),
            last: createPositionalPseudo(function(_matchIndexes, length) {
              return [length - 1];
            }),
            eq: createPositionalPseudo(function(_matchIndexes, length, argument) {
              return [argument < 0 ? argument + length : argument];
            }),
            even: createPositionalPseudo(function(matchIndexes, length) {
              var i2 = 0;
              for (; i2 < length; i2 += 2) {
                matchIndexes.push(i2);
              }
              return matchIndexes;
            }),
            odd: createPositionalPseudo(function(matchIndexes, length) {
              var i2 = 1;
              for (; i2 < length; i2 += 2) {
                matchIndexes.push(i2);
              }
              return matchIndexes;
            }),
            lt: createPositionalPseudo(function(matchIndexes, length, argument) {
              var i2;
              if (argument < 0) {
                i2 = argument + length;
              } else if (argument > length) {
                i2 = length;
              } else {
                i2 = argument;
              }
              for (; --i2 >= 0; ) {
                matchIndexes.push(i2);
              }
              return matchIndexes;
            }),
            gt: createPositionalPseudo(function(matchIndexes, length, argument) {
              var i2 = argument < 0 ? argument + length : argument;
              for (; ++i2 < length; ) {
                matchIndexes.push(i2);
              }
              return matchIndexes;
            })
          }
        };
        Expr.pseudos.nth = Expr.pseudos.eq;
        for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
          Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in { submit: true, reset: true }) {
          Expr.pseudos[i] = createButtonPseudo(i);
        }
        function setFilters() {
        }
        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        function tokenize(selector, parseOnly) {
          var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
          if (cached) {
            return parseOnly ? 0 : cached.slice(0);
          }
          soFar = selector;
          groups = [];
          preFilters = Expr.preFilter;
          while (soFar) {
            if (!matched || (match = rcomma.exec(soFar))) {
              if (match) {
                soFar = soFar.slice(match[0].length) || soFar;
              }
              groups.push(tokens = []);
            }
            matched = false;
            if (match = rleadingCombinator.exec(soFar)) {
              matched = match.shift();
              tokens.push({
                value: matched,
                type: match[0].replace(rtrimCSS, " ")
              });
              soFar = soFar.slice(matched.length);
            }
            for (type in Expr.filter) {
              if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                matched = match.shift();
                tokens.push({
                  value: matched,
                  type,
                  matches: match
                });
                soFar = soFar.slice(matched.length);
              }
            }
            if (!matched) {
              break;
            }
          }
          if (parseOnly) {
            return soFar.length;
          }
          return soFar ? find.error(selector) : tokenCache(selector, groups).slice(0);
        }
        function toSelector(tokens) {
          var i2 = 0, len = tokens.length, selector = "";
          for (; i2 < len; i2++) {
            selector += tokens[i2].value;
          }
          return selector;
        }
        function addCombinator(matcher, combinator, base) {
          var dir2 = combinator.dir, skip = combinator.next, key = skip || dir2, checkNonElements = base && key === "parentNode", doneName = done++;
          return combinator.first ? function(elem, context, xml) {
            while (elem = elem[dir2]) {
              if (elem.nodeType === 1 || checkNonElements) {
                return matcher(elem, context, xml);
              }
            }
            return false;
          } : function(elem, context, xml) {
            var oldCache, outerCache, newCache = [dirruns, doneName];
            if (xml) {
              while (elem = elem[dir2]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  if (matcher(elem, context, xml)) {
                    return true;
                  }
                }
              }
            } else {
              while (elem = elem[dir2]) {
                if (elem.nodeType === 1 || checkNonElements) {
                  outerCache = elem[expando] || (elem[expando] = {});
                  if (skip && nodeName(elem, skip)) {
                    elem = elem[dir2] || elem;
                  } else if ((oldCache = outerCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                    return newCache[2] = oldCache[2];
                  } else {
                    outerCache[key] = newCache;
                    if (newCache[2] = matcher(elem, context, xml)) {
                      return true;
                    }
                  }
                }
              }
            }
            return false;
          };
        }
        function elementMatcher(matchers) {
          return matchers.length > 1 ? function(elem, context, xml) {
            var i2 = matchers.length;
            while (i2--) {
              if (!matchers[i2](elem, context, xml)) {
                return false;
              }
            }
            return true;
          } : matchers[0];
        }
        function multipleContexts(selector, contexts, results) {
          var i2 = 0, len = contexts.length;
          for (; i2 < len; i2++) {
            find(selector, contexts[i2], results);
          }
          return results;
        }
        function condense(unmatched, map, filter, context, xml) {
          var elem, newUnmatched = [], i2 = 0, len = unmatched.length, mapped = map != null;
          for (; i2 < len; i2++) {
            if (elem = unmatched[i2]) {
              if (!filter || filter(elem, context, xml)) {
                newUnmatched.push(elem);
                if (mapped) {
                  map.push(i2);
                }
              }
            }
          }
          return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
          if (postFilter && !postFilter[expando]) {
            postFilter = setMatcher(postFilter);
          }
          if (postFinder && !postFinder[expando]) {
            postFinder = setMatcher(postFinder, postSelector);
          }
          return markFunction(function(seed, results, context, xml) {
            var temp, i2, elem, matcherOut, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(
              selector || "*",
              context.nodeType ? [context] : context,
              []
            ), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems;
            if (matcher) {
              matcherOut = postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results;
              matcher(matcherIn, matcherOut, context, xml);
            } else {
              matcherOut = matcherIn;
            }
            if (postFilter) {
              temp = condense(matcherOut, postMap);
              postFilter(temp, [], context, xml);
              i2 = temp.length;
              while (i2--) {
                if (elem = temp[i2]) {
                  matcherOut[postMap[i2]] = !(matcherIn[postMap[i2]] = elem);
                }
              }
            }
            if (seed) {
              if (postFinder || preFilter) {
                if (postFinder) {
                  temp = [];
                  i2 = matcherOut.length;
                  while (i2--) {
                    if (elem = matcherOut[i2]) {
                      temp.push(matcherIn[i2] = elem);
                    }
                  }
                  postFinder(null, matcherOut = [], temp, xml);
                }
                i2 = matcherOut.length;
                while (i2--) {
                  if ((elem = matcherOut[i2]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i2]) > -1) {
                    seed[temp] = !(results[temp] = elem);
                  }
                }
              }
            } else {
              matcherOut = condense(
                matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut
              );
              if (postFinder) {
                postFinder(null, results, matcherOut, xml);
              } else {
                push2.apply(results, matcherOut);
              }
            }
          });
        }
        function matcherFromTokens(tokens) {
          var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i2 = leadingRelative ? 1 : 0, matchContext = addCombinator(function(elem) {
            return elem === checkContext;
          }, implicitRelative, true), matchAnyContext = addCombinator(function(elem) {
            return indexOf.call(checkContext, elem) > -1;
          }, implicitRelative, true), matchers = [function(elem, context, xml) {
            var ret = !leadingRelative && (xml || context != outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
            checkContext = null;
            return ret;
          }];
          for (; i2 < len; i2++) {
            if (matcher = Expr.relative[tokens[i2].type]) {
              matchers = [addCombinator(elementMatcher(matchers), matcher)];
            } else {
              matcher = Expr.filter[tokens[i2].type].apply(null, tokens[i2].matches);
              if (matcher[expando]) {
                j = ++i2;
                for (; j < len; j++) {
                  if (Expr.relative[tokens[j].type]) {
                    break;
                  }
                }
                return setMatcher(
                  i2 > 1 && elementMatcher(matchers),
                  i2 > 1 && toSelector(
                    tokens.slice(0, i2 - 1).concat({ value: tokens[i2 - 2].type === " " ? "*" : "" })
                  ).replace(rtrimCSS, "$1"),
                  matcher,
                  i2 < j && matcherFromTokens(tokens.slice(i2, j)),
                  j < len && matcherFromTokens(tokens = tokens.slice(j)),
                  j < len && toSelector(tokens)
                );
              }
              matchers.push(matcher);
            }
          }
          return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
          var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function(seed, context, xml, results, outermost) {
            var elem, j, matcher, matchedCount = 0, i2 = "0", unmatched = seed && [], setMatched = [], contextBackup = outermostContext, elems = seed || byElement && Expr.find.TAG("*", outermost), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
            if (outermost) {
              outermostContext = context == document3 || context || outermost;
            }
            for (; i2 !== len && (elem = elems[i2]) != null; i2++) {
              if (byElement && elem) {
                j = 0;
                if (!context && elem.ownerDocument != document3) {
                  setDocument(elem);
                  xml = !documentIsHTML;
                }
                while (matcher = elementMatchers[j++]) {
                  if (matcher(elem, context || document3, xml)) {
                    push2.call(results, elem);
                    break;
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique;
                }
              }
              if (bySet) {
                if (elem = !matcher && elem) {
                  matchedCount--;
                }
                if (seed) {
                  unmatched.push(elem);
                }
              }
            }
            matchedCount += i2;
            if (bySet && i2 !== matchedCount) {
              j = 0;
              while (matcher = setMatchers[j++]) {
                matcher(unmatched, setMatched, context, xml);
              }
              if (seed) {
                if (matchedCount > 0) {
                  while (i2--) {
                    if (!(unmatched[i2] || setMatched[i2])) {
                      setMatched[i2] = pop.call(results);
                    }
                  }
                }
                setMatched = condense(setMatched);
              }
              push2.apply(results, setMatched);
              if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                jQuery.uniqueSort(results);
              }
            }
            if (outermost) {
              dirruns = dirrunsUnique;
              outermostContext = contextBackup;
            }
            return unmatched;
          };
          return bySet ? markFunction(superMatcher) : superMatcher;
        }
        function compile(selector, match) {
          var i2, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
          if (!cached) {
            if (!match) {
              match = tokenize(selector);
            }
            i2 = match.length;
            while (i2--) {
              cached = matcherFromTokens(match[i2]);
              if (cached[expando]) {
                setMatchers.push(cached);
              } else {
                elementMatchers.push(cached);
              }
            }
            cached = compilerCache(
              selector,
              matcherFromGroupMatchers(elementMatchers, setMatchers)
            );
            cached.selector = selector;
          }
          return cached;
        }
        function select(selector, context, results, seed) {
          var i2, tokens, token, type, find2, compiled = typeof selector === "function" && selector, match = !seed && tokenize(selector = compiled.selector || selector);
          results = results || [];
          if (match.length === 1) {
            tokens = match[0] = match[0].slice(0);
            if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
              context = (Expr.find.ID(
                token.matches[0].replace(runescape, funescape),
                context
              ) || [])[0];
              if (!context) {
                return results;
              } else if (compiled) {
                context = context.parentNode;
              }
              selector = selector.slice(tokens.shift().value.length);
            }
            i2 = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
            while (i2--) {
              token = tokens[i2];
              if (Expr.relative[type = token.type]) {
                break;
              }
              if (find2 = Expr.find[type]) {
                if (seed = find2(
                  token.matches[0].replace(runescape, funescape),
                  rsibling.test(tokens[0].type) && testContext(context.parentNode) || context
                )) {
                  tokens.splice(i2, 1);
                  selector = seed.length && toSelector(tokens);
                  if (!selector) {
                    push2.apply(results, seed);
                    return results;
                  }
                  break;
                }
              }
            }
          }
          (compiled || compile(selector, match))(
            seed,
            context,
            !documentIsHTML,
            results,
            !context || rsibling.test(selector) && testContext(context.parentNode) || context
          );
          return results;
        }
        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        setDocument();
        support.sortDetached = assert(function(el) {
          return el.compareDocumentPosition(document3.createElement("fieldset")) & 1;
        });
        jQuery.find = find;
        jQuery.expr[":"] = jQuery.expr.pseudos;
        jQuery.unique = jQuery.uniqueSort;
        find.compile = compile;
        find.select = select;
        find.setDocument = setDocument;
        find.escape = jQuery.escapeSelector;
        find.getText = jQuery.text;
        find.isXML = jQuery.isXMLDoc;
        find.selectors = jQuery.expr;
        find.support = jQuery.support;
        find.uniqueSort = jQuery.uniqueSort;
      })();
      var dir = function(elem, dir2, until) {
        var matched = [], truncate = until !== void 0;
        while ((elem = elem[dir2]) && elem.nodeType !== 9) {
          if (elem.nodeType === 1) {
            if (truncate && jQuery(elem).is(until)) {
              break;
            }
            matched.push(elem);
          }
        }
        return matched;
      };
      var siblings = function(n, elem) {
        var matched = [];
        for (; n; n = n.nextSibling) {
          if (n.nodeType === 1 && n !== elem) {
            matched.push(n);
          }
        }
        return matched;
      };
      var rneedsContext = jQuery.expr.match.needsContext;
      var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
      function winnow(elements, qualifier, not) {
        if (isFunction(qualifier)) {
          return jQuery.grep(elements, function(elem, i) {
            return !!qualifier.call(elem, i, elem) !== not;
          });
        }
        if (qualifier.nodeType) {
          return jQuery.grep(elements, function(elem) {
            return elem === qualifier !== not;
          });
        }
        if (typeof qualifier !== "string") {
          return jQuery.grep(elements, function(elem) {
            return indexOf.call(qualifier, elem) > -1 !== not;
          });
        }
        return jQuery.filter(qualifier, elements, not);
      }
      jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];
        if (not) {
          expr = ":not(" + expr + ")";
        }
        if (elems.length === 1 && elem.nodeType === 1) {
          return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
        }
        return jQuery.find.matches(expr, jQuery.grep(elems, function(elem2) {
          return elem2.nodeType === 1;
        }));
      };
      jQuery.fn.extend({
        find: function(selector) {
          var i, ret, len = this.length, self = this;
          if (typeof selector !== "string") {
            return this.pushStack(jQuery(selector).filter(function() {
              for (i = 0; i < len; i++) {
                if (jQuery.contains(self[i], this)) {
                  return true;
                }
              }
            }));
          }
          ret = this.pushStack([]);
          for (i = 0; i < len; i++) {
            jQuery.find(selector, self[i], ret);
          }
          return len > 1 ? jQuery.uniqueSort(ret) : ret;
        },
        filter: function(selector) {
          return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
          return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
          return !!winnow(
            this,
            typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [],
            false
          ).length;
        }
      });
      var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/, init = jQuery.fn.init = function(selector, context, root) {
        var match, elem;
        if (!selector) {
          return this;
        }
        root = root || rootjQuery;
        if (typeof selector === "string") {
          if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
            match = [null, selector, null];
          } else {
            match = rquickExpr.exec(selector);
          }
          if (match && (match[1] || !context)) {
            if (match[1]) {
              context = context instanceof jQuery ? context[0] : context;
              jQuery.merge(this, jQuery.parseHTML(
                match[1],
                context && context.nodeType ? context.ownerDocument || context : document2,
                true
              ));
              if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                for (match in context) {
                  if (isFunction(this[match])) {
                    this[match](context[match]);
                  } else {
                    this.attr(match, context[match]);
                  }
                }
              }
              return this;
            } else {
              elem = document2.getElementById(match[2]);
              if (elem) {
                this[0] = elem;
                this.length = 1;
              }
              return this;
            }
          } else if (!context || context.jquery) {
            return (context || root).find(selector);
          } else {
            return this.constructor(context).find(selector);
          }
        } else if (selector.nodeType) {
          this[0] = selector;
          this.length = 1;
          return this;
        } else if (isFunction(selector)) {
          return root.ready !== void 0 ? root.ready(selector) : selector(jQuery);
        }
        return jQuery.makeArray(selector, this);
      };
      init.prototype = jQuery.fn;
      rootjQuery = jQuery(document2);
      var rparentsprev = /^(?:parents|prev(?:Until|All))/, guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
      };
      jQuery.fn.extend({
        has: function(target) {
          var targets = jQuery(target, this), l = targets.length;
          return this.filter(function() {
            var i = 0;
            for (; i < l; i++) {
              if (jQuery.contains(this, targets[i])) {
                return true;
              }
            }
          });
        },
        closest: function(selectors, context) {
          var cur, i = 0, l = this.length, matched = [], targets = typeof selectors !== "string" && jQuery(selectors);
          if (!rneedsContext.test(selectors)) {
            for (; i < l; i++) {
              for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                  matched.push(cur);
                  break;
                }
              }
            }
          }
          return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },
        index: function(elem) {
          if (!elem) {
            return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
          }
          if (typeof elem === "string") {
            return indexOf.call(jQuery(elem), this[0]);
          }
          return indexOf.call(
            this,
            elem.jquery ? elem[0] : elem
          );
        },
        add: function(selector, context) {
          return this.pushStack(
            jQuery.uniqueSort(
              jQuery.merge(this.get(), jQuery(selector, context))
            )
          );
        },
        addBack: function(selector) {
          return this.add(
            selector == null ? this.prevObject : this.prevObject.filter(selector)
          );
        }
      });
      function sibling(cur, dir2) {
        while ((cur = cur[dir2]) && cur.nodeType !== 1) {
        }
        return cur;
      }
      jQuery.each({
        parent: function(elem) {
          var parent = elem.parentNode;
          return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
          return dir(elem, "parentNode");
        },
        parentsUntil: function(elem, _i, until) {
          return dir(elem, "parentNode", until);
        },
        next: function(elem) {
          return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
          return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
          return dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
          return dir(elem, "previousSibling");
        },
        nextUntil: function(elem, _i, until) {
          return dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, _i, until) {
          return dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
          return siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
          return siblings(elem.firstChild);
        },
        contents: function(elem) {
          if (elem.contentDocument != null && getProto(elem.contentDocument)) {
            return elem.contentDocument;
          }
          if (nodeName(elem, "template")) {
            elem = elem.content || elem;
          }
          return jQuery.merge([], elem.childNodes);
        }
      }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
          var matched = jQuery.map(this, fn, until);
          if (name.slice(-5) !== "Until") {
            selector = until;
          }
          if (selector && typeof selector === "string") {
            matched = jQuery.filter(selector, matched);
          }
          if (this.length > 1) {
            if (!guaranteedUnique[name]) {
              jQuery.uniqueSort(matched);
            }
            if (rparentsprev.test(name)) {
              matched.reverse();
            }
          }
          return this.pushStack(matched);
        };
      });
      var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;
      function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnothtmlwhite) || [], function(_, flag) {
          object[flag] = true;
        });
        return object;
      }
      jQuery.Callbacks = function(options) {
        options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);
        var firing, memory, fired, locked, list = [], queue = [], firingIndex = -1, fire = function() {
          locked = locked || options.once;
          fired = firing = true;
          for (; queue.length; firingIndex = -1) {
            memory = queue.shift();
            while (++firingIndex < list.length) {
              if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
                firingIndex = list.length;
                memory = false;
              }
            }
          }
          if (!options.memory) {
            memory = false;
          }
          firing = false;
          if (locked) {
            if (memory) {
              list = [];
            } else {
              list = "";
            }
          }
        }, self = {
          add: function() {
            if (list) {
              if (memory && !firing) {
                firingIndex = list.length - 1;
                queue.push(memory);
              }
              (function add(args) {
                jQuery.each(args, function(_, arg) {
                  if (isFunction(arg)) {
                    if (!options.unique || !self.has(arg)) {
                      list.push(arg);
                    }
                  } else if (arg && arg.length && toType2(arg) !== "string") {
                    add(arg);
                  }
                });
              })(arguments);
              if (memory && !firing) {
                fire();
              }
            }
            return this;
          },
          remove: function() {
            jQuery.each(arguments, function(_, arg) {
              var index;
              while ((index = jQuery.inArray(arg, list, index)) > -1) {
                list.splice(index, 1);
                if (index <= firingIndex) {
                  firingIndex--;
                }
              }
            });
            return this;
          },
          has: function(fn) {
            return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
          },
          empty: function() {
            if (list) {
              list = [];
            }
            return this;
          },
          disable: function() {
            locked = queue = [];
            list = memory = "";
            return this;
          },
          disabled: function() {
            return !list;
          },
          lock: function() {
            locked = queue = [];
            if (!memory && !firing) {
              list = memory = "";
            }
            return this;
          },
          locked: function() {
            return !!locked;
          },
          fireWith: function(context, args) {
            if (!locked) {
              args = args || [];
              args = [context, args.slice ? args.slice() : args];
              queue.push(args);
              if (!firing) {
                fire();
              }
            }
            return this;
          },
          fire: function() {
            self.fireWith(this, arguments);
            return this;
          },
          fired: function() {
            return !!fired;
          }
        };
        return self;
      };
      function Identity(v) {
        return v;
      }
      function Thrower(ex) {
        throw ex;
      }
      function adoptValue(value, resolve, reject, noValue) {
        var method;
        try {
          if (value && isFunction(method = value.promise)) {
            method.call(value).done(resolve).fail(reject);
          } else if (value && isFunction(method = value.then)) {
            method.call(value, resolve, reject);
          } else {
            resolve.apply(void 0, [value].slice(noValue));
          }
        } catch (value2) {
          reject.apply(void 0, [value2]);
        }
      }
      jQuery.extend({
        Deferred: function(func) {
          var tuples = [
            [
              "notify",
              "progress",
              jQuery.Callbacks("memory"),
              jQuery.Callbacks("memory"),
              2
            ],
            [
              "resolve",
              "done",
              jQuery.Callbacks("once memory"),
              jQuery.Callbacks("once memory"),
              0,
              "resolved"
            ],
            [
              "reject",
              "fail",
              jQuery.Callbacks("once memory"),
              jQuery.Callbacks("once memory"),
              1,
              "rejected"
            ]
          ], state = "pending", promise = {
            state: function() {
              return state;
            },
            always: function() {
              deferred.done(arguments).fail(arguments);
              return this;
            },
            "catch": function(fn) {
              return promise.then(null, fn);
            },
            pipe: function() {
              var fns = arguments;
              return jQuery.Deferred(function(newDefer) {
                jQuery.each(tuples, function(_i, tuple) {
                  var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];
                  deferred[tuple[1]](function() {
                    var returned = fn && fn.apply(this, arguments);
                    if (returned && isFunction(returned.promise)) {
                      returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                    } else {
                      newDefer[tuple[0] + "With"](
                        this,
                        fn ? [returned] : arguments
                      );
                    }
                  });
                });
                fns = null;
              }).promise();
            },
            then: function(onFulfilled, onRejected, onProgress) {
              var maxDepth = 0;
              function resolve(depth, deferred2, handler, special) {
                return function() {
                  var that = this, args = arguments, mightThrow = function() {
                    var returned, then;
                    if (depth < maxDepth) {
                      return;
                    }
                    returned = handler.apply(that, args);
                    if (returned === deferred2.promise()) {
                      throw new TypeError("Thenable self-resolution");
                    }
                    then = returned && (typeof returned === "object" || typeof returned === "function") && returned.then;
                    if (isFunction(then)) {
                      if (special) {
                        then.call(
                          returned,
                          resolve(maxDepth, deferred2, Identity, special),
                          resolve(maxDepth, deferred2, Thrower, special)
                        );
                      } else {
                        maxDepth++;
                        then.call(
                          returned,
                          resolve(maxDepth, deferred2, Identity, special),
                          resolve(maxDepth, deferred2, Thrower, special),
                          resolve(
                            maxDepth,
                            deferred2,
                            Identity,
                            deferred2.notifyWith
                          )
                        );
                      }
                    } else {
                      if (handler !== Identity) {
                        that = void 0;
                        args = [returned];
                      }
                      (special || deferred2.resolveWith)(that, args);
                    }
                  }, process2 = special ? mightThrow : function() {
                    try {
                      mightThrow();
                    } catch (e) {
                      if (jQuery.Deferred.exceptionHook) {
                        jQuery.Deferred.exceptionHook(
                          e,
                          process2.error
                        );
                      }
                      if (depth + 1 >= maxDepth) {
                        if (handler !== Thrower) {
                          that = void 0;
                          args = [e];
                        }
                        deferred2.rejectWith(that, args);
                      }
                    }
                  };
                  if (depth) {
                    process2();
                  } else {
                    if (jQuery.Deferred.getErrorHook) {
                      process2.error = jQuery.Deferred.getErrorHook();
                    } else if (jQuery.Deferred.getStackHook) {
                      process2.error = jQuery.Deferred.getStackHook();
                    }
                    window2.setTimeout(process2);
                  }
                };
              }
              return jQuery.Deferred(function(newDefer) {
                tuples[0][3].add(
                  resolve(
                    0,
                    newDefer,
                    isFunction(onProgress) ? onProgress : Identity,
                    newDefer.notifyWith
                  )
                );
                tuples[1][3].add(
                  resolve(
                    0,
                    newDefer,
                    isFunction(onFulfilled) ? onFulfilled : Identity
                  )
                );
                tuples[2][3].add(
                  resolve(
                    0,
                    newDefer,
                    isFunction(onRejected) ? onRejected : Thrower
                  )
                );
              }).promise();
            },
            promise: function(obj) {
              return obj != null ? jQuery.extend(obj, promise) : promise;
            }
          }, deferred = {};
          jQuery.each(tuples, function(i, tuple) {
            var list = tuple[2], stateString = tuple[5];
            promise[tuple[1]] = list.add;
            if (stateString) {
              list.add(
                function() {
                  state = stateString;
                },
                tuples[3 - i][2].disable,
                tuples[3 - i][3].disable,
                tuples[0][2].lock,
                tuples[0][3].lock
              );
            }
            list.add(tuple[3].fire);
            deferred[tuple[0]] = function() {
              deferred[tuple[0] + "With"](this === deferred ? void 0 : this, arguments);
              return this;
            };
            deferred[tuple[0] + "With"] = list.fireWith;
          });
          promise.promise(deferred);
          if (func) {
            func.call(deferred, deferred);
          }
          return deferred;
        },
        when: function(singleValue) {
          var remaining = arguments.length, i = remaining, resolveContexts = Array(i), resolveValues = slice.call(arguments), primary = jQuery.Deferred(), updateFunc = function(i2) {
            return function(value) {
              resolveContexts[i2] = this;
              resolveValues[i2] = arguments.length > 1 ? slice.call(arguments) : value;
              if (!--remaining) {
                primary.resolveWith(resolveContexts, resolveValues);
              }
            };
          };
          if (remaining <= 1) {
            adoptValue(
              singleValue,
              primary.done(updateFunc(i)).resolve,
              primary.reject,
              !remaining
            );
            if (primary.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
              return primary.then();
            }
          }
          while (i--) {
            adoptValue(resolveValues[i], updateFunc(i), primary.reject);
          }
          return primary.promise();
        }
      });
      var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
      jQuery.Deferred.exceptionHook = function(error, asyncError) {
        if (window2.console && window2.console.warn && error && rerrorNames.test(error.name)) {
          window2.console.warn(
            "jQuery.Deferred exception: " + error.message,
            error.stack,
            asyncError
          );
        }
      };
      jQuery.readyException = function(error) {
        window2.setTimeout(function() {
          throw error;
        });
      };
      var readyList = jQuery.Deferred();
      jQuery.fn.ready = function(fn) {
        readyList.then(fn).catch(function(error) {
          jQuery.readyException(error);
        });
        return this;
      };
      jQuery.extend({
        isReady: false,
        readyWait: 1,
        ready: function(wait) {
          if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
            return;
          }
          jQuery.isReady = true;
          if (wait !== true && --jQuery.readyWait > 0) {
            return;
          }
          readyList.resolveWith(document2, [jQuery]);
        }
      });
      jQuery.ready.then = readyList.then;
      function completed() {
        document2.removeEventListener("DOMContentLoaded", completed);
        window2.removeEventListener("load", completed);
        jQuery.ready();
      }
      if (document2.readyState === "complete" || document2.readyState !== "loading" && !document2.documentElement.doScroll) {
        window2.setTimeout(jQuery.ready);
      } else {
        document2.addEventListener("DOMContentLoaded", completed);
        window2.addEventListener("load", completed);
      }
      var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0, len = elems.length, bulk = key == null;
        if (toType2(key) === "object") {
          chainable = true;
          for (i in key) {
            access(elems, fn, i, key[i], true, emptyGet, raw);
          }
        } else if (value !== void 0) {
          chainable = true;
          if (!isFunction(value)) {
            raw = true;
          }
          if (bulk) {
            if (raw) {
              fn.call(elems, value);
              fn = null;
            } else {
              bulk = fn;
              fn = function(elem, _key, value2) {
                return bulk.call(jQuery(elem), value2);
              };
            }
          }
          if (fn) {
            for (; i < len; i++) {
              fn(
                elems[i],
                key,
                raw ? value : value.call(elems[i], i, fn(elems[i], key))
              );
            }
          }
        }
        if (chainable) {
          return elems;
        }
        if (bulk) {
          return fn.call(elems);
        }
        return len ? fn(elems[0], key) : emptyGet;
      };
      var rmsPrefix = /^-ms-/, rdashAlpha = /-([a-z])/g;
      function fcamelCase(_all, letter) {
        return letter.toUpperCase();
      }
      function camelCase(string) {
        return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
      }
      var acceptData = function(owner) {
        return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
      };
      function Data() {
        this.expando = jQuery.expando + Data.uid++;
      }
      Data.uid = 1;
      Data.prototype = {
        cache: function(owner) {
          var value = owner[this.expando];
          if (!value) {
            value = {};
            if (acceptData(owner)) {
              if (owner.nodeType) {
                owner[this.expando] = value;
              } else {
                Object.defineProperty(owner, this.expando, {
                  value,
                  configurable: true
                });
              }
            }
          }
          return value;
        },
        set: function(owner, data, value) {
          var prop, cache = this.cache(owner);
          if (typeof data === "string") {
            cache[camelCase(data)] = value;
          } else {
            for (prop in data) {
              cache[camelCase(prop)] = data[prop];
            }
          }
          return cache;
        },
        get: function(owner, key) {
          return key === void 0 ? this.cache(owner) : owner[this.expando] && owner[this.expando][camelCase(key)];
        },
        access: function(owner, key, value) {
          if (key === void 0 || key && typeof key === "string" && value === void 0) {
            return this.get(owner, key);
          }
          this.set(owner, key, value);
          return value !== void 0 ? value : key;
        },
        remove: function(owner, key) {
          var i, cache = owner[this.expando];
          if (cache === void 0) {
            return;
          }
          if (key !== void 0) {
            if (Array.isArray(key)) {
              key = key.map(camelCase);
            } else {
              key = camelCase(key);
              key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
            }
            i = key.length;
            while (i--) {
              delete cache[key[i]];
            }
          }
          if (key === void 0 || jQuery.isEmptyObject(cache)) {
            if (owner.nodeType) {
              owner[this.expando] = void 0;
            } else {
              delete owner[this.expando];
            }
          }
        },
        hasData: function(owner) {
          var cache = owner[this.expando];
          return cache !== void 0 && !jQuery.isEmptyObject(cache);
        }
      };
      var dataPriv = new Data();
      var dataUser = new Data();
      var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /[A-Z]/g;
      function getData(data) {
        if (data === "true") {
          return true;
        }
        if (data === "false") {
          return false;
        }
        if (data === "null") {
          return null;
        }
        if (data === +data + "") {
          return +data;
        }
        if (rbrace.test(data)) {
          return JSON.parse(data);
        }
        return data;
      }
      function dataAttr(elem, key, data) {
        var name;
        if (data === void 0 && elem.nodeType === 1) {
          name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
          data = elem.getAttribute(name);
          if (typeof data === "string") {
            try {
              data = getData(data);
            } catch (e) {
            }
            dataUser.set(elem, key, data);
          } else {
            data = void 0;
          }
        }
        return data;
      }
      jQuery.extend({
        hasData: function(elem) {
          return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },
        data: function(elem, name, data) {
          return dataUser.access(elem, name, data);
        },
        removeData: function(elem, name) {
          dataUser.remove(elem, name);
        },
        _data: function(elem, name, data) {
          return dataPriv.access(elem, name, data);
        },
        _removeData: function(elem, name) {
          dataPriv.remove(elem, name);
        }
      });
      jQuery.fn.extend({
        data: function(key, value) {
          var i, name, data, elem = this[0], attrs = elem && elem.attributes;
          if (key === void 0) {
            if (this.length) {
              data = dataUser.get(elem);
              if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                i = attrs.length;
                while (i--) {
                  if (attrs[i]) {
                    name = attrs[i].name;
                    if (name.indexOf("data-") === 0) {
                      name = camelCase(name.slice(5));
                      dataAttr(elem, name, data[name]);
                    }
                  }
                }
                dataPriv.set(elem, "hasDataAttrs", true);
              }
            }
            return data;
          }
          if (typeof key === "object") {
            return this.each(function() {
              dataUser.set(this, key);
            });
          }
          return access(this, function(value2) {
            var data2;
            if (elem && value2 === void 0) {
              data2 = dataUser.get(elem, key);
              if (data2 !== void 0) {
                return data2;
              }
              data2 = dataAttr(elem, key);
              if (data2 !== void 0) {
                return data2;
              }
              return;
            }
            this.each(function() {
              dataUser.set(this, key, value2);
            });
          }, null, value, arguments.length > 1, null, true);
        },
        removeData: function(key) {
          return this.each(function() {
            dataUser.remove(this, key);
          });
        }
      });
      jQuery.extend({
        queue: function(elem, type, data) {
          var queue;
          if (elem) {
            type = (type || "fx") + "queue";
            queue = dataPriv.get(elem, type);
            if (data) {
              if (!queue || Array.isArray(data)) {
                queue = dataPriv.access(elem, type, jQuery.makeArray(data));
              } else {
                queue.push(data);
              }
            }
            return queue || [];
          }
        },
        dequeue: function(elem, type) {
          type = type || "fx";
          var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function() {
            jQuery.dequeue(elem, type);
          };
          if (fn === "inprogress") {
            fn = queue.shift();
            startLength--;
          }
          if (fn) {
            if (type === "fx") {
              queue.unshift("inprogress");
            }
            delete hooks.stop;
            fn.call(elem, next, hooks);
          }
          if (!startLength && hooks) {
            hooks.empty.fire();
          }
        },
        _queueHooks: function(elem, type) {
          var key = type + "queueHooks";
          return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
            empty: jQuery.Callbacks("once memory").add(function() {
              dataPriv.remove(elem, [type + "queue", key]);
            })
          });
        }
      });
      jQuery.fn.extend({
        queue: function(type, data) {
          var setter = 2;
          if (typeof type !== "string") {
            data = type;
            type = "fx";
            setter--;
          }
          if (arguments.length < setter) {
            return jQuery.queue(this[0], type);
          }
          return data === void 0 ? this : this.each(function() {
            var queue = jQuery.queue(this, type, data);
            jQuery._queueHooks(this, type);
            if (type === "fx" && queue[0] !== "inprogress") {
              jQuery.dequeue(this, type);
            }
          });
        },
        dequeue: function(type) {
          return this.each(function() {
            jQuery.dequeue(this, type);
          });
        },
        clearQueue: function(type) {
          return this.queue(type || "fx", []);
        },
        promise: function(type, obj) {
          var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function() {
            if (!--count) {
              defer.resolveWith(elements, [elements]);
            }
          };
          if (typeof type !== "string") {
            obj = type;
            type = void 0;
          }
          type = type || "fx";
          while (i--) {
            tmp = dataPriv.get(elements[i], type + "queueHooks");
            if (tmp && tmp.empty) {
              count++;
              tmp.empty.add(resolve);
            }
          }
          resolve();
          return defer.promise(obj);
        }
      });
      var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
      var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
      var cssExpand = ["Top", "Right", "Bottom", "Left"];
      var documentElement = document2.documentElement;
      var isAttached = function(elem) {
        return jQuery.contains(elem.ownerDocument, elem);
      }, composed = { composed: true };
      if (documentElement.getRootNode) {
        isAttached = function(elem) {
          return jQuery.contains(elem.ownerDocument, elem) || elem.getRootNode(composed) === elem.ownerDocument;
        };
      }
      var isHiddenWithinTree = function(elem, el) {
        elem = el || elem;
        return elem.style.display === "none" || elem.style.display === "" && isAttached(elem) && jQuery.css(elem, "display") === "none";
      };
      function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted, scale, maxIterations = 20, currentValue = tween ? function() {
          return tween.cur();
        } : function() {
          return jQuery.css(elem, prop, "");
        }, initial = currentValue(), unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"), initialInUnit = elem.nodeType && (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));
        if (initialInUnit && initialInUnit[3] !== unit) {
          initial = initial / 2;
          unit = unit || initialInUnit[3];
          initialInUnit = +initial || 1;
          while (maxIterations--) {
            jQuery.style(elem, prop, initialInUnit + unit);
            if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
              maxIterations = 0;
            }
            initialInUnit = initialInUnit / scale;
          }
          initialInUnit = initialInUnit * 2;
          jQuery.style(elem, prop, initialInUnit + unit);
          valueParts = valueParts || [];
        }
        if (valueParts) {
          initialInUnit = +initialInUnit || +initial || 0;
          adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
          if (tween) {
            tween.unit = unit;
            tween.start = initialInUnit;
            tween.end = adjusted;
          }
        }
        return adjusted;
      }
      var defaultDisplayMap = {};
      function getDefaultDisplay(elem) {
        var temp, doc = elem.ownerDocument, nodeName2 = elem.nodeName, display = defaultDisplayMap[nodeName2];
        if (display) {
          return display;
        }
        temp = doc.body.appendChild(doc.createElement(nodeName2));
        display = jQuery.css(temp, "display");
        temp.parentNode.removeChild(temp);
        if (display === "none") {
          display = "block";
        }
        defaultDisplayMap[nodeName2] = display;
        return display;
      }
      function showHide(elements, show) {
        var display, elem, values = [], index = 0, length = elements.length;
        for (; index < length; index++) {
          elem = elements[index];
          if (!elem.style) {
            continue;
          }
          display = elem.style.display;
          if (show) {
            if (display === "none") {
              values[index] = dataPriv.get(elem, "display") || null;
              if (!values[index]) {
                elem.style.display = "";
              }
            }
            if (elem.style.display === "" && isHiddenWithinTree(elem)) {
              values[index] = getDefaultDisplay(elem);
            }
          } else {
            if (display !== "none") {
              values[index] = "none";
              dataPriv.set(elem, "display", display);
            }
          }
        }
        for (index = 0; index < length; index++) {
          if (values[index] != null) {
            elements[index].style.display = values[index];
          }
        }
        return elements;
      }
      jQuery.fn.extend({
        show: function() {
          return showHide(this, true);
        },
        hide: function() {
          return showHide(this);
        },
        toggle: function(state) {
          if (typeof state === "boolean") {
            return state ? this.show() : this.hide();
          }
          return this.each(function() {
            if (isHiddenWithinTree(this)) {
              jQuery(this).show();
            } else {
              jQuery(this).hide();
            }
          });
        }
      });
      var rcheckableType = /^(?:checkbox|radio)$/i;
      var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;
      var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;
      (function() {
        var fragment = document2.createDocumentFragment(), div = fragment.appendChild(document2.createElement("div")), input = document2.createElement("input");
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");
        div.appendChild(input);
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
        div.innerHTML = "<option></option>";
        support.option = !!div.lastChild;
      })();
      var wrapMap = {
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: [0, "", ""]
      };
      wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
      wrapMap.th = wrapMap.td;
      if (!support.option) {
        wrapMap.optgroup = wrapMap.option = [1, "<select multiple='multiple'>", "</select>"];
      }
      function getAll(context, tag) {
        var ret;
        if (typeof context.getElementsByTagName !== "undefined") {
          ret = context.getElementsByTagName(tag || "*");
        } else if (typeof context.querySelectorAll !== "undefined") {
          ret = context.querySelectorAll(tag || "*");
        } else {
          ret = [];
        }
        if (tag === void 0 || tag && nodeName(context, tag)) {
          return jQuery.merge([context], ret);
        }
        return ret;
      }
      function setGlobalEval(elems, refElements) {
        var i = 0, l = elems.length;
        for (; i < l; i++) {
          dataPriv.set(
            elems[i],
            "globalEval",
            !refElements || dataPriv.get(refElements[i], "globalEval")
          );
        }
      }
      var rhtml = /<|&#?\w+;/;
      function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, attached, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
        for (; i < l; i++) {
          elem = elems[i];
          if (elem || elem === 0) {
            if (toType2(elem) === "object") {
              jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
            } else if (!rhtml.test(elem)) {
              nodes.push(context.createTextNode(elem));
            } else {
              tmp = tmp || fragment.appendChild(context.createElement("div"));
              tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
              wrap = wrapMap[tag] || wrapMap._default;
              tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];
              j = wrap[0];
              while (j--) {
                tmp = tmp.lastChild;
              }
              jQuery.merge(nodes, tmp.childNodes);
              tmp = fragment.firstChild;
              tmp.textContent = "";
            }
          }
        }
        fragment.textContent = "";
        i = 0;
        while (elem = nodes[i++]) {
          if (selection && jQuery.inArray(elem, selection) > -1) {
            if (ignored) {
              ignored.push(elem);
            }
            continue;
          }
          attached = isAttached(elem);
          tmp = getAll(fragment.appendChild(elem), "script");
          if (attached) {
            setGlobalEval(tmp);
          }
          if (scripts) {
            j = 0;
            while (elem = tmp[j++]) {
              if (rscriptType.test(elem.type || "")) {
                scripts.push(elem);
              }
            }
          }
        }
        return fragment;
      }
      var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
      function returnTrue() {
        return true;
      }
      function returnFalse() {
        return false;
      }
      function on(elem, types, selector, data, fn, one) {
        var origFn, type;
        if (typeof types === "object") {
          if (typeof selector !== "string") {
            data = data || selector;
            selector = void 0;
          }
          for (type in types) {
            on(elem, type, selector, data, types[type], one);
          }
          return elem;
        }
        if (data == null && fn == null) {
          fn = selector;
          data = selector = void 0;
        } else if (fn == null) {
          if (typeof selector === "string") {
            fn = data;
            data = void 0;
          } else {
            fn = data;
            data = selector;
            selector = void 0;
          }
        }
        if (fn === false) {
          fn = returnFalse;
        } else if (!fn) {
          return elem;
        }
        if (one === 1) {
          origFn = fn;
          fn = function(event) {
            jQuery().off(event);
            return origFn.apply(this, arguments);
          };
          fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }
        return elem.each(function() {
          jQuery.event.add(this, types, fn, data, selector);
        });
      }
      jQuery.event = {
        global: {},
        add: function(elem, types, handler, data, selector) {
          var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.get(elem);
          if (!acceptData(elem)) {
            return;
          }
          if (handler.handler) {
            handleObjIn = handler;
            handler = handleObjIn.handler;
            selector = handleObjIn.selector;
          }
          if (selector) {
            jQuery.find.matchesSelector(documentElement, selector);
          }
          if (!handler.guid) {
            handler.guid = jQuery.guid++;
          }
          if (!(events = elemData.events)) {
            events = elemData.events = /* @__PURE__ */ Object.create(null);
          }
          if (!(eventHandle = elemData.handle)) {
            eventHandle = elemData.handle = function(e) {
              return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : void 0;
            };
          }
          types = (types || "").match(rnothtmlwhite) || [""];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort();
            if (!type) {
              continue;
            }
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            special = jQuery.event.special[type] || {};
            handleObj = jQuery.extend({
              type,
              origType,
              data,
              handler,
              guid: handler.guid,
              selector,
              needsContext: selector && jQuery.expr.match.needsContext.test(selector),
              namespace: namespaces.join(".")
            }, handleObjIn);
            if (!(handlers = events[type])) {
              handlers = events[type] = [];
              handlers.delegateCount = 0;
              if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                if (elem.addEventListener) {
                  elem.addEventListener(type, eventHandle);
                }
              }
            }
            if (special.add) {
              special.add.call(elem, handleObj);
              if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid;
              }
            }
            if (selector) {
              handlers.splice(handlers.delegateCount++, 0, handleObj);
            } else {
              handlers.push(handleObj);
            }
            jQuery.event.global[type] = true;
          }
        },
        remove: function(elem, types, handler, selector, mappedTypes) {
          var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = dataPriv.hasData(elem) && dataPriv.get(elem);
          if (!elemData || !(events = elemData.events)) {
            return;
          }
          types = (types || "").match(rnothtmlwhite) || [""];
          t = types.length;
          while (t--) {
            tmp = rtypenamespace.exec(types[t]) || [];
            type = origType = tmp[1];
            namespaces = (tmp[2] || "").split(".").sort();
            if (!type) {
              for (type in events) {
                jQuery.event.remove(elem, type + types[t], handler, selector, true);
              }
              continue;
            }
            special = jQuery.event.special[type] || {};
            type = (selector ? special.delegateType : special.bindType) || type;
            handlers = events[type] || [];
            tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
            origCount = j = handlers.length;
            while (j--) {
              handleObj = handlers[j];
              if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                handlers.splice(j, 1);
                if (handleObj.selector) {
                  handlers.delegateCount--;
                }
                if (special.remove) {
                  special.remove.call(elem, handleObj);
                }
              }
            }
            if (origCount && !handlers.length) {
              if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                jQuery.removeEvent(elem, type, elemData.handle);
              }
              delete events[type];
            }
          }
          if (jQuery.isEmptyObject(events)) {
            dataPriv.remove(elem, "handle events");
          }
        },
        dispatch: function(nativeEvent) {
          var i, j, ret, matched, handleObj, handlerQueue, args = new Array(arguments.length), event = jQuery.event.fix(nativeEvent), handlers = (dataPriv.get(this, "events") || /* @__PURE__ */ Object.create(null))[event.type] || [], special = jQuery.event.special[event.type] || {};
          args[0] = event;
          for (i = 1; i < arguments.length; i++) {
            args[i] = arguments[i];
          }
          event.delegateTarget = this;
          if (special.preDispatch && special.preDispatch.call(this, event) === false) {
            return;
          }
          handlerQueue = jQuery.event.handlers.call(this, event, handlers);
          i = 0;
          while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
            event.currentTarget = matched.elem;
            j = 0;
            while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
              if (!event.rnamespace || handleObj.namespace === false || event.rnamespace.test(handleObj.namespace)) {
                event.handleObj = handleObj;
                event.data = handleObj.data;
                ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                if (ret !== void 0) {
                  if ((event.result = ret) === false) {
                    event.preventDefault();
                    event.stopPropagation();
                  }
                }
              }
            }
          }
          if (special.postDispatch) {
            special.postDispatch.call(this, event);
          }
          return event.result;
        },
        handlers: function(event, handlers) {
          var i, handleObj, sel, matchedHandlers, matchedSelectors, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
          if (delegateCount && cur.nodeType && !(event.type === "click" && event.button >= 1)) {
            for (; cur !== this; cur = cur.parentNode || this) {
              if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
                matchedHandlers = [];
                matchedSelectors = {};
                for (i = 0; i < delegateCount; i++) {
                  handleObj = handlers[i];
                  sel = handleObj.selector + " ";
                  if (matchedSelectors[sel] === void 0) {
                    matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
                  }
                  if (matchedSelectors[sel]) {
                    matchedHandlers.push(handleObj);
                  }
                }
                if (matchedHandlers.length) {
                  handlerQueue.push({ elem: cur, handlers: matchedHandlers });
                }
              }
            }
          }
          cur = this;
          if (delegateCount < handlers.length) {
            handlerQueue.push({ elem: cur, handlers: handlers.slice(delegateCount) });
          }
          return handlerQueue;
        },
        addProp: function(name, hook) {
          Object.defineProperty(jQuery.Event.prototype, name, {
            enumerable: true,
            configurable: true,
            get: isFunction(hook) ? function() {
              if (this.originalEvent) {
                return hook(this.originalEvent);
              }
            } : function() {
              if (this.originalEvent) {
                return this.originalEvent[name];
              }
            },
            set: function(value) {
              Object.defineProperty(this, name, {
                enumerable: true,
                configurable: true,
                writable: true,
                value
              });
            }
          });
        },
        fix: function(originalEvent) {
          return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
        },
        special: {
          load: {
            noBubble: true
          },
          click: {
            setup: function(data) {
              var el = this || data;
              if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                leverageNative(el, "click", true);
              }
              return false;
            },
            trigger: function(data) {
              var el = this || data;
              if (rcheckableType.test(el.type) && el.click && nodeName(el, "input")) {
                leverageNative(el, "click");
              }
              return true;
            },
            _default: function(event) {
              var target = event.target;
              return rcheckableType.test(target.type) && target.click && nodeName(target, "input") && dataPriv.get(target, "click") || nodeName(target, "a");
            }
          },
          beforeunload: {
            postDispatch: function(event) {
              if (event.result !== void 0 && event.originalEvent) {
                event.originalEvent.returnValue = event.result;
              }
            }
          }
        }
      };
      function leverageNative(el, type, isSetup) {
        if (!isSetup) {
          if (dataPriv.get(el, type) === void 0) {
            jQuery.event.add(el, type, returnTrue);
          }
          return;
        }
        dataPriv.set(el, type, false);
        jQuery.event.add(el, type, {
          namespace: false,
          handler: function(event) {
            var result, saved = dataPriv.get(this, type);
            if (event.isTrigger & 1 && this[type]) {
              if (!saved) {
                saved = slice.call(arguments);
                dataPriv.set(this, type, saved);
                this[type]();
                result = dataPriv.get(this, type);
                dataPriv.set(this, type, false);
                if (saved !== result) {
                  event.stopImmediatePropagation();
                  event.preventDefault();
                  return result;
                }
              } else if ((jQuery.event.special[type] || {}).delegateType) {
                event.stopPropagation();
              }
            } else if (saved) {
              dataPriv.set(this, type, jQuery.event.trigger(
                saved[0],
                saved.slice(1),
                this
              ));
              event.stopPropagation();
              event.isImmediatePropagationStopped = returnTrue;
            }
          }
        });
      }
      jQuery.removeEvent = function(elem, type, handle) {
        if (elem.removeEventListener) {
          elem.removeEventListener(type, handle);
        }
      };
      jQuery.Event = function(src, props) {
        if (!(this instanceof jQuery.Event)) {
          return new jQuery.Event(src, props);
        }
        if (src && src.type) {
          this.originalEvent = src;
          this.type = src.type;
          this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === void 0 && src.returnValue === false ? returnTrue : returnFalse;
          this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
          this.currentTarget = src.currentTarget;
          this.relatedTarget = src.relatedTarget;
        } else {
          this.type = src;
        }
        if (props) {
          jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || Date.now();
        this[jQuery.expando] = true;
      };
      jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        isSimulated: false,
        preventDefault: function() {
          var e = this.originalEvent;
          this.isDefaultPrevented = returnTrue;
          if (e && !this.isSimulated) {
            e.preventDefault();
          }
        },
        stopPropagation: function() {
          var e = this.originalEvent;
          this.isPropagationStopped = returnTrue;
          if (e && !this.isSimulated) {
            e.stopPropagation();
          }
        },
        stopImmediatePropagation: function() {
          var e = this.originalEvent;
          this.isImmediatePropagationStopped = returnTrue;
          if (e && !this.isSimulated) {
            e.stopImmediatePropagation();
          }
          this.stopPropagation();
        }
      };
      jQuery.each({
        altKey: true,
        bubbles: true,
        cancelable: true,
        changedTouches: true,
        ctrlKey: true,
        detail: true,
        eventPhase: true,
        metaKey: true,
        pageX: true,
        pageY: true,
        shiftKey: true,
        view: true,
        "char": true,
        code: true,
        charCode: true,
        key: true,
        keyCode: true,
        button: true,
        buttons: true,
        clientX: true,
        clientY: true,
        offsetX: true,
        offsetY: true,
        pointerId: true,
        pointerType: true,
        screenX: true,
        screenY: true,
        targetTouches: true,
        toElement: true,
        touches: true,
        which: true
      }, jQuery.event.addProp);
      jQuery.each({ focus: "focusin", blur: "focusout" }, function(type, delegateType) {
        function focusMappedHandler(nativeEvent) {
          if (document2.documentMode) {
            var handle = dataPriv.get(this, "handle"), event = jQuery.event.fix(nativeEvent);
            event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
            event.isSimulated = true;
            handle(nativeEvent);
            if (event.target === event.currentTarget) {
              handle(event);
            }
          } else {
            jQuery.event.simulate(
              delegateType,
              nativeEvent.target,
              jQuery.event.fix(nativeEvent)
            );
          }
        }
        jQuery.event.special[type] = {
          setup: function() {
            var attaches;
            leverageNative(this, type, true);
            if (document2.documentMode) {
              attaches = dataPriv.get(this, delegateType);
              if (!attaches) {
                this.addEventListener(delegateType, focusMappedHandler);
              }
              dataPriv.set(this, delegateType, (attaches || 0) + 1);
            } else {
              return false;
            }
          },
          trigger: function() {
            leverageNative(this, type);
            return true;
          },
          teardown: function() {
            var attaches;
            if (document2.documentMode) {
              attaches = dataPriv.get(this, delegateType) - 1;
              if (!attaches) {
                this.removeEventListener(delegateType, focusMappedHandler);
                dataPriv.remove(this, delegateType);
              } else {
                dataPriv.set(this, delegateType, attaches);
              }
            } else {
              return false;
            }
          },
          _default: function(event) {
            return dataPriv.get(event.target, type);
          },
          delegateType
        };
        jQuery.event.special[delegateType] = {
          setup: function() {
            var doc = this.ownerDocument || this.document || this, dataHolder = document2.documentMode ? this : doc, attaches = dataPriv.get(dataHolder, delegateType);
            if (!attaches) {
              if (document2.documentMode) {
                this.addEventListener(delegateType, focusMappedHandler);
              } else {
                doc.addEventListener(type, focusMappedHandler, true);
              }
            }
            dataPriv.set(dataHolder, delegateType, (attaches || 0) + 1);
          },
          teardown: function() {
            var doc = this.ownerDocument || this.document || this, dataHolder = document2.documentMode ? this : doc, attaches = dataPriv.get(dataHolder, delegateType) - 1;
            if (!attaches) {
              if (document2.documentMode) {
                this.removeEventListener(delegateType, focusMappedHandler);
              } else {
                doc.removeEventListener(type, focusMappedHandler, true);
              }
              dataPriv.remove(dataHolder, delegateType);
            } else {
              dataPriv.set(dataHolder, delegateType, attaches);
            }
          }
        };
      });
      jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
      }, function(orig, fix) {
        jQuery.event.special[orig] = {
          delegateType: fix,
          bindType: fix,
          handle: function(event) {
            var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
            if (!related || related !== target && !jQuery.contains(target, related)) {
              event.type = handleObj.origType;
              ret = handleObj.handler.apply(this, arguments);
              event.type = fix;
            }
            return ret;
          }
        };
      });
      jQuery.fn.extend({
        on: function(types, selector, data, fn) {
          return on(this, types, selector, data, fn);
        },
        one: function(types, selector, data, fn) {
          return on(this, types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
          var handleObj, type;
          if (types && types.preventDefault && types.handleObj) {
            handleObj = types.handleObj;
            jQuery(types.delegateTarget).off(
              handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
              handleObj.selector,
              handleObj.handler
            );
            return this;
          }
          if (typeof types === "object") {
            for (type in types) {
              this.off(type, selector, types[type]);
            }
            return this;
          }
          if (selector === false || typeof selector === "function") {
            fn = selector;
            selector = void 0;
          }
          if (fn === false) {
            fn = returnFalse;
          }
          return this.each(function() {
            jQuery.event.remove(this, types, fn, selector);
          });
        }
      });
      var rnoInnerhtml = /<script|<style|<link/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;
      function manipulationTarget(elem, content) {
        if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
          return jQuery(elem).children("tbody")[0] || elem;
        }
        return elem;
      }
      function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
      }
      function restoreScript(elem) {
        if ((elem.type || "").slice(0, 5) === "true/") {
          elem.type = elem.type.slice(5);
        } else {
          elem.removeAttribute("type");
        }
        return elem;
      }
      function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, udataOld, udataCur, events;
        if (dest.nodeType !== 1) {
          return;
        }
        if (dataPriv.hasData(src)) {
          pdataOld = dataPriv.get(src);
          events = pdataOld.events;
          if (events) {
            dataPriv.remove(dest, "handle events");
            for (type in events) {
              for (i = 0, l = events[type].length; i < l; i++) {
                jQuery.event.add(dest, type, events[type][i]);
              }
            }
          }
        }
        if (dataUser.hasData(src)) {
          udataOld = dataUser.access(src);
          udataCur = jQuery.extend({}, udataOld);
          dataUser.set(dest, udataCur);
        }
      }
      function fixInput(src, dest) {
        var nodeName2 = dest.nodeName.toLowerCase();
        if (nodeName2 === "input" && rcheckableType.test(src.type)) {
          dest.checked = src.checked;
        } else if (nodeName2 === "input" || nodeName2 === "textarea") {
          dest.defaultValue = src.defaultValue;
        }
      }
      function domManip(collection, args, callback, ignored) {
        args = flat(args);
        var fragment, first, scripts, hasScripts, node, doc, i = 0, l = collection.length, iNoClone = l - 1, value = args[0], valueIsFunction = isFunction(value);
        if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
          return collection.each(function(index) {
            var self = collection.eq(index);
            if (valueIsFunction) {
              args[0] = value.call(this, index, self.html());
            }
            domManip(self, args, callback, ignored);
          });
        }
        if (l) {
          fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
          first = fragment.firstChild;
          if (fragment.childNodes.length === 1) {
            fragment = first;
          }
          if (first || ignored) {
            scripts = jQuery.map(getAll(fragment, "script"), disableScript);
            hasScripts = scripts.length;
            for (; i < l; i++) {
              node = fragment;
              if (i !== iNoClone) {
                node = jQuery.clone(node, true, true);
                if (hasScripts) {
                  jQuery.merge(scripts, getAll(node, "script"));
                }
              }
              callback.call(collection[i], node, i);
            }
            if (hasScripts) {
              doc = scripts[scripts.length - 1].ownerDocument;
              jQuery.map(scripts, restoreScript);
              for (i = 0; i < hasScripts; i++) {
                node = scripts[i];
                if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                  if (node.src && (node.type || "").toLowerCase() !== "module") {
                    if (jQuery._evalUrl && !node.noModule) {
                      jQuery._evalUrl(node.src, {
                        nonce: node.nonce || node.getAttribute("nonce")
                      }, doc);
                    }
                  } else {
                    DOMEval(node.textContent.replace(rcleanScript, ""), node, doc);
                  }
                }
              }
            }
          }
        }
        return collection;
      }
      function remove(elem, selector, keepData) {
        var node, nodes = selector ? jQuery.filter(selector, elem) : elem, i = 0;
        for (; (node = nodes[i]) != null; i++) {
          if (!keepData && node.nodeType === 1) {
            jQuery.cleanData(getAll(node));
          }
          if (node.parentNode) {
            if (keepData && isAttached(node)) {
              setGlobalEval(getAll(node, "script"));
            }
            node.parentNode.removeChild(node);
          }
        }
        return elem;
      }
      jQuery.extend({
        htmlPrefilter: function(html) {
          return html;
        },
        clone: function(elem, dataAndEvents, deepDataAndEvents) {
          var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = isAttached(elem);
          if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
            destElements = getAll(clone);
            srcElements = getAll(elem);
            for (i = 0, l = srcElements.length; i < l; i++) {
              fixInput(srcElements[i], destElements[i]);
            }
          }
          if (dataAndEvents) {
            if (deepDataAndEvents) {
              srcElements = srcElements || getAll(elem);
              destElements = destElements || getAll(clone);
              for (i = 0, l = srcElements.length; i < l; i++) {
                cloneCopyEvent(srcElements[i], destElements[i]);
              }
            } else {
              cloneCopyEvent(elem, clone);
            }
          }
          destElements = getAll(clone, "script");
          if (destElements.length > 0) {
            setGlobalEval(destElements, !inPage && getAll(elem, "script"));
          }
          return clone;
        },
        cleanData: function(elems) {
          var data, elem, type, special = jQuery.event.special, i = 0;
          for (; (elem = elems[i]) !== void 0; i++) {
            if (acceptData(elem)) {
              if (data = elem[dataPriv.expando]) {
                if (data.events) {
                  for (type in data.events) {
                    if (special[type]) {
                      jQuery.event.remove(elem, type);
                    } else {
                      jQuery.removeEvent(elem, type, data.handle);
                    }
                  }
                }
                elem[dataPriv.expando] = void 0;
              }
              if (elem[dataUser.expando]) {
                elem[dataUser.expando] = void 0;
              }
            }
          }
        }
      });
      jQuery.fn.extend({
        detach: function(selector) {
          return remove(this, selector, true);
        },
        remove: function(selector) {
          return remove(this, selector);
        },
        text: function(value) {
          return access(this, function(value2) {
            return value2 === void 0 ? jQuery.text(this) : this.empty().each(function() {
              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                this.textContent = value2;
              }
            });
          }, null, value, arguments.length);
        },
        append: function() {
          return domManip(this, arguments, function(elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.appendChild(elem);
            }
          });
        },
        prepend: function() {
          return domManip(this, arguments, function(elem) {
            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
              var target = manipulationTarget(this, elem);
              target.insertBefore(elem, target.firstChild);
            }
          });
        },
        before: function() {
          return domManip(this, arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this);
            }
          });
        },
        after: function() {
          return domManip(this, arguments, function(elem) {
            if (this.parentNode) {
              this.parentNode.insertBefore(elem, this.nextSibling);
            }
          });
        },
        empty: function() {
          var elem, i = 0;
          for (; (elem = this[i]) != null; i++) {
            if (elem.nodeType === 1) {
              jQuery.cleanData(getAll(elem, false));
              elem.textContent = "";
            }
          }
          return this;
        },
        clone: function(dataAndEvents, deepDataAndEvents) {
          dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
          deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
          return this.map(function() {
            return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
          });
        },
        html: function(value) {
          return access(this, function(value2) {
            var elem = this[0] || {}, i = 0, l = this.length;
            if (value2 === void 0 && elem.nodeType === 1) {
              return elem.innerHTML;
            }
            if (typeof value2 === "string" && !rnoInnerhtml.test(value2) && !wrapMap[(rtagName.exec(value2) || ["", ""])[1].toLowerCase()]) {
              value2 = jQuery.htmlPrefilter(value2);
              try {
                for (; i < l; i++) {
                  elem = this[i] || {};
                  if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                    elem.innerHTML = value2;
                  }
                }
                elem = 0;
              } catch (e) {
              }
            }
            if (elem) {
              this.empty().append(value2);
            }
          }, null, value, arguments.length);
        },
        replaceWith: function() {
          var ignored = [];
          return domManip(this, arguments, function(elem) {
            var parent = this.parentNode;
            if (jQuery.inArray(this, ignored) < 0) {
              jQuery.cleanData(getAll(this));
              if (parent) {
                parent.replaceChild(elem, this);
              }
            }
          }, ignored);
        }
      });
      jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
      }, function(name, original) {
        jQuery.fn[name] = function(selector) {
          var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
          for (; i <= last; i++) {
            elems = i === last ? this : this.clone(true);
            jQuery(insert[i])[original](elems);
            push.apply(ret, elems.get());
          }
          return this.pushStack(ret);
        };
      });
      var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
      var rcustomProp = /^--/;
      var getStyles = function(elem) {
        var view = elem.ownerDocument.defaultView;
        if (!view || !view.opener) {
          view = window2;
        }
        return view.getComputedStyle(elem);
      };
      var swap = function(elem, options, callback) {
        var ret, name, old = {};
        for (name in options) {
          old[name] = elem.style[name];
          elem.style[name] = options[name];
        }
        ret = callback.call(elem);
        for (name in options) {
          elem.style[name] = old[name];
        }
        return ret;
      };
      var rboxStyle = new RegExp(cssExpand.join("|"), "i");
      (function() {
        function computeStyleTests() {
          if (!div) {
            return;
          }
          container.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0";
          div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%";
          documentElement.appendChild(container).appendChild(div);
          var divStyle = window2.getComputedStyle(div);
          pixelPositionVal = divStyle.top !== "1%";
          reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;
          div.style.right = "60%";
          pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;
          boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;
          div.style.position = "absolute";
          scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;
          documentElement.removeChild(container);
          div = null;
        }
        function roundPixelMeasures(measure) {
          return Math.round(parseFloat(measure));
        }
        var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal, reliableTrDimensionsVal, reliableMarginLeftVal, container = document2.createElement("div"), div = document2.createElement("div");
        if (!div.style) {
          return;
        }
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        jQuery.extend(support, {
          boxSizingReliable: function() {
            computeStyleTests();
            return boxSizingReliableVal;
          },
          pixelBoxStyles: function() {
            computeStyleTests();
            return pixelBoxStylesVal;
          },
          pixelPosition: function() {
            computeStyleTests();
            return pixelPositionVal;
          },
          reliableMarginLeft: function() {
            computeStyleTests();
            return reliableMarginLeftVal;
          },
          scrollboxSize: function() {
            computeStyleTests();
            return scrollboxSizeVal;
          },
          reliableTrDimensions: function() {
            var table, tr, trChild, trStyle;
            if (reliableTrDimensionsVal == null) {
              table = document2.createElement("table");
              tr = document2.createElement("tr");
              trChild = document2.createElement("div");
              table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
              tr.style.cssText = "border:1px solid";
              tr.style.height = "1px";
              trChild.style.height = "9px";
              trChild.style.display = "block";
              documentElement.appendChild(table).appendChild(tr).appendChild(trChild);
              trStyle = window2.getComputedStyle(tr);
              reliableTrDimensionsVal = parseInt(trStyle.height, 10) + parseInt(trStyle.borderTopWidth, 10) + parseInt(trStyle.borderBottomWidth, 10) === tr.offsetHeight;
              documentElement.removeChild(table);
            }
            return reliableTrDimensionsVal;
          }
        });
      })();
      function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret, isCustomProp = rcustomProp.test(name), style = elem.style;
        computed = computed || getStyles(elem);
        if (computed) {
          ret = computed.getPropertyValue(name) || computed[name];
          if (isCustomProp && ret) {
            ret = ret.replace(rtrimCSS, "$1") || void 0;
          }
          if (ret === "" && !isAttached(elem)) {
            ret = jQuery.style(elem, name);
          }
          if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
            width = style.width;
            minWidth = style.minWidth;
            maxWidth = style.maxWidth;
            style.minWidth = style.maxWidth = style.width = ret;
            ret = computed.width;
            style.width = width;
            style.minWidth = minWidth;
            style.maxWidth = maxWidth;
          }
        }
        return ret !== void 0 ? ret + "" : ret;
      }
      function addGetHookIf(conditionFn, hookFn) {
        return {
          get: function() {
            if (conditionFn()) {
              delete this.get;
              return;
            }
            return (this.get = hookFn).apply(this, arguments);
          }
        };
      }
      var cssPrefixes = ["Webkit", "Moz", "ms"], emptyStyle = document2.createElement("div").style, vendorProps = {};
      function vendorPropName(name) {
        var capName = name[0].toUpperCase() + name.slice(1), i = cssPrefixes.length;
        while (i--) {
          name = cssPrefixes[i] + capName;
          if (name in emptyStyle) {
            return name;
          }
        }
      }
      function finalPropName(name) {
        var final = jQuery.cssProps[name] || vendorProps[name];
        if (final) {
          return final;
        }
        if (name in emptyStyle) {
          return name;
        }
        return vendorProps[name] = vendorPropName(name) || name;
      }
      var rdisplayswap = /^(none|table(?!-c[ea]).+)/, cssShow = { position: "absolute", visibility: "hidden", display: "block" }, cssNormalTransform = {
        letterSpacing: "0",
        fontWeight: "400"
      };
      function setPositiveNumber(_elem, value, subtract) {
        var matches = rcssNum.exec(value);
        return matches ? Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
      }
      function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
        var i = dimension === "width" ? 1 : 0, extra = 0, delta = 0, marginDelta = 0;
        if (box === (isBorderBox ? "border" : "content")) {
          return 0;
        }
        for (; i < 4; i += 2) {
          if (box === "margin") {
            marginDelta += jQuery.css(elem, box + cssExpand[i], true, styles);
          }
          if (!isBorderBox) {
            delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
            if (box !== "padding") {
              delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            } else {
              extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
          } else {
            if (box === "content") {
              delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
            }
            if (box !== "margin") {
              delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
            }
          }
        }
        if (!isBorderBox && computedVal >= 0) {
          delta += Math.max(0, Math.ceil(
            elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5
          )) || 0;
        }
        return delta + marginDelta;
      }
      function getWidthOrHeight(elem, dimension, extra) {
        var styles = getStyles(elem), boxSizingNeeded = !support.boxSizingReliable() || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box", valueIsBorderBox = isBorderBox, val = curCSS(elem, dimension, styles), offsetProp = "offset" + dimension[0].toUpperCase() + dimension.slice(1);
        if (rnumnonpx.test(val)) {
          if (!extra) {
            return val;
          }
          val = "auto";
        }
        if ((!support.boxSizingReliable() && isBorderBox || !support.reliableTrDimensions() && nodeName(elem, "tr") || val === "auto" || !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") && elem.getClientRects().length) {
          isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";
          valueIsBorderBox = offsetProp in elem;
          if (valueIsBorderBox) {
            val = elem[offsetProp];
          }
        }
        val = parseFloat(val) || 0;
        return val + boxModelAdjustment(
          elem,
          dimension,
          extra || (isBorderBox ? "border" : "content"),
          valueIsBorderBox,
          styles,
          val
        ) + "px";
      }
      jQuery.extend({
        cssHooks: {
          opacity: {
            get: function(elem, computed) {
              if (computed) {
                var ret = curCSS(elem, "opacity");
                return ret === "" ? "1" : ret;
              }
            }
          }
        },
        cssNumber: {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageSlice: true,
          columnCount: true,
          flexGrow: true,
          flexShrink: true,
          fontWeight: true,
          gridArea: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnStart: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowStart: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          scale: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeMiterlimit: true,
          strokeOpacity: true
        },
        cssProps: {},
        style: function(elem, name, value, extra) {
          if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
            return;
          }
          var ret, type, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name), style = elem.style;
          if (!isCustomProp) {
            name = finalPropName(origName);
          }
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          if (value !== void 0) {
            type = typeof value;
            if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
              value = adjustCSS(elem, name, ret);
              type = "number";
            }
            if (value == null || value !== value) {
              return;
            }
            if (type === "number" && !isCustomProp) {
              value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
            }
            if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
              style[name] = "inherit";
            }
            if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== void 0) {
              if (isCustomProp) {
                style.setProperty(name, value);
              } else {
                style[name] = value;
              }
            }
          } else {
            if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== void 0) {
              return ret;
            }
            return style[name];
          }
        },
        css: function(elem, name, extra, styles) {
          var val, num, hooks, origName = camelCase(name), isCustomProp = rcustomProp.test(name);
          if (!isCustomProp) {
            name = finalPropName(origName);
          }
          hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
          if (hooks && "get" in hooks) {
            val = hooks.get(elem, true, extra);
          }
          if (val === void 0) {
            val = curCSS(elem, name, styles);
          }
          if (val === "normal" && name in cssNormalTransform) {
            val = cssNormalTransform[name];
          }
          if (extra === "" || extra) {
            num = parseFloat(val);
            return extra === true || isFinite(num) ? num || 0 : val;
          }
          return val;
        }
      });
      jQuery.each(["height", "width"], function(_i, dimension) {
        jQuery.cssHooks[dimension] = {
          get: function(elem, computed, extra) {
            if (computed) {
              return rdisplayswap.test(jQuery.css(elem, "display")) && (!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function() {
                return getWidthOrHeight(elem, dimension, extra);
              }) : getWidthOrHeight(elem, dimension, extra);
            }
          },
          set: function(elem, value, extra) {
            var matches, styles = getStyles(elem), scrollboxSizeBuggy = !support.scrollboxSize() && styles.position === "absolute", boxSizingNeeded = scrollboxSizeBuggy || extra, isBorderBox = boxSizingNeeded && jQuery.css(elem, "boxSizing", false, styles) === "border-box", subtract = extra ? boxModelAdjustment(
              elem,
              dimension,
              extra,
              isBorderBox,
              styles
            ) : 0;
            if (isBorderBox && scrollboxSizeBuggy) {
              subtract -= Math.ceil(
                elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5
              );
            }
            if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
              elem.style[dimension] = value;
              value = jQuery.css(elem, dimension);
            }
            return setPositiveNumber(elem, value, subtract);
          }
        };
      });
      jQuery.cssHooks.marginLeft = addGetHookIf(
        support.reliableMarginLeft,
        function(elem, computed) {
          if (computed) {
            return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function() {
              return elem.getBoundingClientRect().left;
            })) + "px";
          }
        }
      );
      jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
      }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
          expand: function(value) {
            var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [value];
            for (; i < 4; i++) {
              expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
            }
            return expanded;
          }
        };
        if (prefix !== "margin") {
          jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
      });
      jQuery.fn.extend({
        css: function(name, value) {
          return access(this, function(elem, name2, value2) {
            var styles, len, map = {}, i = 0;
            if (Array.isArray(name2)) {
              styles = getStyles(elem);
              len = name2.length;
              for (; i < len; i++) {
                map[name2[i]] = jQuery.css(elem, name2[i], false, styles);
              }
              return map;
            }
            return value2 !== void 0 ? jQuery.style(elem, name2, value2) : jQuery.css(elem, name2);
          }, name, value, arguments.length > 1);
        }
      });
      function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
      }
      jQuery.Tween = Tween;
      Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
          this.elem = elem;
          this.prop = prop;
          this.easing = easing || jQuery.easing._default;
          this.options = options;
          this.start = this.now = this.cur();
          this.end = end;
          this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
          var hooks = Tween.propHooks[this.prop];
          return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function(percent) {
          var eased, hooks = Tween.propHooks[this.prop];
          if (this.options.duration) {
            this.pos = eased = jQuery.easing[this.easing](
              percent,
              this.options.duration * percent,
              0,
              1,
              this.options.duration
            );
          } else {
            this.pos = eased = percent;
          }
          this.now = (this.end - this.start) * eased + this.start;
          if (this.options.step) {
            this.options.step.call(this.elem, this.now, this);
          }
          if (hooks && hooks.set) {
            hooks.set(this);
          } else {
            Tween.propHooks._default.set(this);
          }
          return this;
        }
      };
      Tween.prototype.init.prototype = Tween.prototype;
      Tween.propHooks = {
        _default: {
          get: function(tween) {
            var result;
            if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
              return tween.elem[tween.prop];
            }
            result = jQuery.css(tween.elem, tween.prop, "");
            return !result || result === "auto" ? 0 : result;
          },
          set: function(tween) {
            if (jQuery.fx.step[tween.prop]) {
              jQuery.fx.step[tween.prop](tween);
            } else if (tween.elem.nodeType === 1 && (jQuery.cssHooks[tween.prop] || tween.elem.style[finalPropName(tween.prop)] != null)) {
              jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
            } else {
              tween.elem[tween.prop] = tween.now;
            }
          }
        }
      };
      Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
          if (tween.elem.nodeType && tween.elem.parentNode) {
            tween.elem[tween.prop] = tween.now;
          }
        }
      };
      jQuery.easing = {
        linear: function(p) {
          return p;
        },
        swing: function(p) {
          return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: "swing"
      };
      jQuery.fx = Tween.prototype.init;
      jQuery.fx.step = {};
      var fxNow, inProgress, rfxtypes = /^(?:toggle|show|hide)$/, rrun = /queueHooks$/;
      function schedule() {
        if (inProgress) {
          if (document2.hidden === false && window2.requestAnimationFrame) {
            window2.requestAnimationFrame(schedule);
          } else {
            window2.setTimeout(schedule, jQuery.fx.interval);
          }
          jQuery.fx.tick();
        }
      }
      function createFxNow() {
        window2.setTimeout(function() {
          fxNow = void 0;
        });
        return fxNow = Date.now();
      }
      function genFx(type, includeWidth) {
        var which, i = 0, attrs = { height: type };
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
          which = cssExpand[i];
          attrs["margin" + which] = attrs["padding" + which] = type;
        }
        if (includeWidth) {
          attrs.opacity = attrs.width = type;
        }
        return attrs;
      }
      function createTween(value, prop, animation) {
        var tween, collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]), index = 0, length = collection.length;
        for (; index < length; index++) {
          if (tween = collection[index].call(animation, prop, value)) {
            return tween;
          }
        }
      }
      function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display, isBox = "width" in props || "height" in props, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHiddenWithinTree(elem), dataShow = dataPriv.get(elem, "fxshow");
        if (!opts.queue) {
          hooks = jQuery._queueHooks(elem, "fx");
          if (hooks.unqueued == null) {
            hooks.unqueued = 0;
            oldfire = hooks.empty.fire;
            hooks.empty.fire = function() {
              if (!hooks.unqueued) {
                oldfire();
              }
            };
          }
          hooks.unqueued++;
          anim.always(function() {
            anim.always(function() {
              hooks.unqueued--;
              if (!jQuery.queue(elem, "fx").length) {
                hooks.empty.fire();
              }
            });
          });
        }
        for (prop in props) {
          value = props[prop];
          if (rfxtypes.test(value)) {
            delete props[prop];
            toggle = toggle || value === "toggle";
            if (value === (hidden ? "hide" : "show")) {
              if (value === "show" && dataShow && dataShow[prop] !== void 0) {
                hidden = true;
              } else {
                continue;
              }
            }
            orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
          }
        }
        propTween = !jQuery.isEmptyObject(props);
        if (!propTween && jQuery.isEmptyObject(orig)) {
          return;
        }
        if (isBox && elem.nodeType === 1) {
          opts.overflow = [style.overflow, style.overflowX, style.overflowY];
          restoreDisplay = dataShow && dataShow.display;
          if (restoreDisplay == null) {
            restoreDisplay = dataPriv.get(elem, "display");
          }
          display = jQuery.css(elem, "display");
          if (display === "none") {
            if (restoreDisplay) {
              display = restoreDisplay;
            } else {
              showHide([elem], true);
              restoreDisplay = elem.style.display || restoreDisplay;
              display = jQuery.css(elem, "display");
              showHide([elem]);
            }
          }
          if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
            if (jQuery.css(elem, "float") === "none") {
              if (!propTween) {
                anim.done(function() {
                  style.display = restoreDisplay;
                });
                if (restoreDisplay == null) {
                  display = style.display;
                  restoreDisplay = display === "none" ? "" : display;
                }
              }
              style.display = "inline-block";
            }
          }
        }
        if (opts.overflow) {
          style.overflow = "hidden";
          anim.always(function() {
            style.overflow = opts.overflow[0];
            style.overflowX = opts.overflow[1];
            style.overflowY = opts.overflow[2];
          });
        }
        propTween = false;
        for (prop in orig) {
          if (!propTween) {
            if (dataShow) {
              if ("hidden" in dataShow) {
                hidden = dataShow.hidden;
              }
            } else {
              dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
            }
            if (toggle) {
              dataShow.hidden = !hidden;
            }
            if (hidden) {
              showHide([elem], true);
            }
            anim.done(function() {
              if (!hidden) {
                showHide([elem]);
              }
              dataPriv.remove(elem, "fxshow");
              for (prop in orig) {
                jQuery.style(elem, prop, orig[prop]);
              }
            });
          }
          propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
          if (!(prop in dataShow)) {
            dataShow[prop] = propTween.start;
            if (hidden) {
              propTween.end = propTween.start;
              propTween.start = 0;
            }
          }
        }
      }
      function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
          name = camelCase(index);
          easing = specialEasing[name];
          value = props[index];
          if (Array.isArray(value)) {
            easing = value[1];
            value = props[index] = value[0];
          }
          if (index !== name) {
            props[name] = value;
            delete props[index];
          }
          hooks = jQuery.cssHooks[name];
          if (hooks && "expand" in hooks) {
            value = hooks.expand(value);
            delete props[name];
            for (index in value) {
              if (!(index in props)) {
                props[index] = value[index];
                specialEasing[index] = easing;
              }
            }
          } else {
            specialEasing[name] = easing;
          }
        }
      }
      function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = Animation.prefilters.length, deferred = jQuery.Deferred().always(function() {
          delete tick.elem;
        }), tick = function() {
          if (stopped) {
            return false;
          }
          var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index2 = 0, length2 = animation.tweens.length;
          for (; index2 < length2; index2++) {
            animation.tweens[index2].run(percent);
          }
          deferred.notifyWith(elem, [animation, percent, remaining]);
          if (percent < 1 && length2) {
            return remaining;
          }
          if (!length2) {
            deferred.notifyWith(elem, [animation, 1, 0]);
          }
          deferred.resolveWith(elem, [animation]);
          return false;
        }, animation = deferred.promise({
          elem,
          props: jQuery.extend({}, properties),
          opts: jQuery.extend(true, {
            specialEasing: {},
            easing: jQuery.easing._default
          }, options),
          originalProperties: properties,
          originalOptions: options,
          startTime: fxNow || createFxNow(),
          duration: options.duration,
          tweens: [],
          createTween: function(prop, end) {
            var tween = jQuery.Tween(
              elem,
              animation.opts,
              prop,
              end,
              animation.opts.specialEasing[prop] || animation.opts.easing
            );
            animation.tweens.push(tween);
            return tween;
          },
          stop: function(gotoEnd) {
            var index2 = 0, length2 = gotoEnd ? animation.tweens.length : 0;
            if (stopped) {
              return this;
            }
            stopped = true;
            for (; index2 < length2; index2++) {
              animation.tweens[index2].run(1);
            }
            if (gotoEnd) {
              deferred.notifyWith(elem, [animation, 1, 0]);
              deferred.resolveWith(elem, [animation, gotoEnd]);
            } else {
              deferred.rejectWith(elem, [animation, gotoEnd]);
            }
            return this;
          }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
          result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
          if (result) {
            if (isFunction(result.stop)) {
              jQuery._queueHooks(animation.elem, animation.opts.queue).stop = result.stop.bind(result);
            }
            return result;
          }
        }
        jQuery.map(props, createTween, animation);
        if (isFunction(animation.opts.start)) {
          animation.opts.start.call(elem, animation);
        }
        animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
        jQuery.fx.timer(
          jQuery.extend(tick, {
            elem,
            anim: animation,
            queue: animation.opts.queue
          })
        );
        return animation;
      }
      jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
          "*": [function(prop, value) {
            var tween = this.createTween(prop, value);
            adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
            return tween;
          }]
        },
        tweener: function(props, callback) {
          if (isFunction(props)) {
            callback = props;
            props = ["*"];
          } else {
            props = props.match(rnothtmlwhite);
          }
          var prop, index = 0, length = props.length;
          for (; index < length; index++) {
            prop = props[index];
            Animation.tweeners[prop] = Animation.tweeners[prop] || [];
            Animation.tweeners[prop].unshift(callback);
          }
        },
        prefilters: [defaultPrefilter],
        prefilter: function(callback, prepend) {
          if (prepend) {
            Animation.prefilters.unshift(callback);
          } else {
            Animation.prefilters.push(callback);
          }
        }
      });
      jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
          complete: fn || !fn && easing || isFunction(speed) && speed,
          duration: speed,
          easing: fn && easing || easing && !isFunction(easing) && easing
        };
        if (jQuery.fx.off) {
          opt.duration = 0;
        } else {
          if (typeof opt.duration !== "number") {
            if (opt.duration in jQuery.fx.speeds) {
              opt.duration = jQuery.fx.speeds[opt.duration];
            } else {
              opt.duration = jQuery.fx.speeds._default;
            }
          }
        }
        if (opt.queue == null || opt.queue === true) {
          opt.queue = "fx";
        }
        opt.old = opt.complete;
        opt.complete = function() {
          if (isFunction(opt.old)) {
            opt.old.call(this);
          }
          if (opt.queue) {
            jQuery.dequeue(this, opt.queue);
          }
        };
        return opt;
      };
      jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {
          return this.filter(isHiddenWithinTree).css("opacity", 0).show().end().animate({ opacity: to }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
          var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function() {
            var anim = Animation(this, jQuery.extend({}, prop), optall);
            if (empty || dataPriv.get(this, "finish")) {
              anim.stop(true);
            }
          };
          doAnimation.finish = doAnimation;
          return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
          var stopQueue = function(hooks) {
            var stop = hooks.stop;
            delete hooks.stop;
            stop(gotoEnd);
          };
          if (typeof type !== "string") {
            gotoEnd = clearQueue;
            clearQueue = type;
            type = void 0;
          }
          if (clearQueue) {
            this.queue(type || "fx", []);
          }
          return this.each(function() {
            var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = dataPriv.get(this);
            if (index) {
              if (data[index] && data[index].stop) {
                stopQueue(data[index]);
              }
            } else {
              for (index in data) {
                if (data[index] && data[index].stop && rrun.test(index)) {
                  stopQueue(data[index]);
                }
              }
            }
            for (index = timers.length; index--; ) {
              if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                timers[index].anim.stop(gotoEnd);
                dequeue = false;
                timers.splice(index, 1);
              }
            }
            if (dequeue || !gotoEnd) {
              jQuery.dequeue(this, type);
            }
          });
        },
        finish: function(type) {
          if (type !== false) {
            type = type || "fx";
          }
          return this.each(function() {
            var index, data = dataPriv.get(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
            data.finish = true;
            jQuery.queue(this, type, []);
            if (hooks && hooks.stop) {
              hooks.stop.call(this, true);
            }
            for (index = timers.length; index--; ) {
              if (timers[index].elem === this && timers[index].queue === type) {
                timers[index].anim.stop(true);
                timers.splice(index, 1);
              }
            }
            for (index = 0; index < length; index++) {
              if (queue[index] && queue[index].finish) {
                queue[index].finish.call(this);
              }
            }
            delete data.finish;
          });
        }
      });
      jQuery.each(["toggle", "show", "hide"], function(_i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
          return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
      });
      jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: { opacity: "show" },
        fadeOut: { opacity: "hide" },
        fadeToggle: { opacity: "toggle" }
      }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
          return this.animate(props, speed, easing, callback);
        };
      });
      jQuery.timers = [];
      jQuery.fx.tick = function() {
        var timer, i = 0, timers = jQuery.timers;
        fxNow = Date.now();
        for (; i < timers.length; i++) {
          timer = timers[i];
          if (!timer() && timers[i] === timer) {
            timers.splice(i--, 1);
          }
        }
        if (!timers.length) {
          jQuery.fx.stop();
        }
        fxNow = void 0;
      };
      jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        jQuery.fx.start();
      };
      jQuery.fx.interval = 13;
      jQuery.fx.start = function() {
        if (inProgress) {
          return;
        }
        inProgress = true;
        schedule();
      };
      jQuery.fx.stop = function() {
        inProgress = null;
      };
      jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
      };
      jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";
        return this.queue(type, function(next, hooks) {
          var timeout = window2.setTimeout(next, time);
          hooks.stop = function() {
            window2.clearTimeout(timeout);
          };
        });
      };
      (function() {
        var input = document2.createElement("input"), select = document2.createElement("select"), opt = select.appendChild(document2.createElement("option"));
        input.type = "checkbox";
        support.checkOn = input.value !== "";
        support.optSelected = opt.selected;
        input = document2.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
      })();
      var boolHook, attrHandle = jQuery.expr.attrHandle;
      jQuery.fn.extend({
        attr: function(name, value) {
          return access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function(name) {
          return this.each(function() {
            jQuery.removeAttr(this, name);
          });
        }
      });
      jQuery.extend({
        attr: function(elem, name, value) {
          var ret, hooks, nType = elem.nodeType;
          if (nType === 3 || nType === 8 || nType === 2) {
            return;
          }
          if (typeof elem.getAttribute === "undefined") {
            return jQuery.prop(elem, name, value);
          }
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : void 0);
          }
          if (value !== void 0) {
            if (value === null) {
              jQuery.removeAttr(elem, name);
              return;
            }
            if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
              return ret;
            }
            elem.setAttribute(name, value + "");
            return value;
          }
          if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          }
          ret = jQuery.find.attr(elem, name);
          return ret == null ? void 0 : ret;
        },
        attrHooks: {
          type: {
            set: function(elem, value) {
              if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
                var val = elem.value;
                elem.setAttribute("type", value);
                if (val) {
                  elem.value = val;
                }
                return value;
              }
            }
          }
        },
        removeAttr: function(elem, value) {
          var name, i = 0, attrNames = value && value.match(rnothtmlwhite);
          if (attrNames && elem.nodeType === 1) {
            while (name = attrNames[i++]) {
              elem.removeAttribute(name);
            }
          }
        }
      });
      boolHook = {
        set: function(elem, value, name) {
          if (value === false) {
            jQuery.removeAttr(elem, name);
          } else {
            elem.setAttribute(name, name);
          }
          return name;
        }
      };
      jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(_i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;
        attrHandle[name] = function(elem, name2, isXML) {
          var ret, handle, lowercaseName = name2.toLowerCase();
          if (!isXML) {
            handle = attrHandle[lowercaseName];
            attrHandle[lowercaseName] = ret;
            ret = getter(elem, name2, isXML) != null ? lowercaseName : null;
            attrHandle[lowercaseName] = handle;
          }
          return ret;
        };
      });
      var rfocusable = /^(?:input|select|textarea|button)$/i, rclickable = /^(?:a|area)$/i;
      jQuery.fn.extend({
        prop: function(name, value) {
          return access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function(name) {
          return this.each(function() {
            delete this[jQuery.propFix[name] || name];
          });
        }
      });
      jQuery.extend({
        prop: function(elem, name, value) {
          var ret, hooks, nType = elem.nodeType;
          if (nType === 3 || nType === 8 || nType === 2) {
            return;
          }
          if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
            name = jQuery.propFix[name] || name;
            hooks = jQuery.propHooks[name];
          }
          if (value !== void 0) {
            if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== void 0) {
              return ret;
            }
            return elem[name] = value;
          }
          if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
            return ret;
          }
          return elem[name];
        },
        propHooks: {
          tabIndex: {
            get: function(elem) {
              var tabindex = jQuery.find.attr(elem, "tabindex");
              if (tabindex) {
                return parseInt(tabindex, 10);
              }
              if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
                return 0;
              }
              return -1;
            }
          }
        },
        propFix: {
          "for": "htmlFor",
          "class": "className"
        }
      });
      if (!support.optSelected) {
        jQuery.propHooks.selected = {
          get: function(elem) {
            var parent = elem.parentNode;
            if (parent && parent.parentNode) {
              parent.parentNode.selectedIndex;
            }
            return null;
          },
          set: function(elem) {
            var parent = elem.parentNode;
            if (parent) {
              parent.selectedIndex;
              if (parent.parentNode) {
                parent.parentNode.selectedIndex;
              }
            }
          }
        };
      }
      jQuery.each([
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
      ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
      });
      function stripAndCollapse(value) {
        var tokens = value.match(rnothtmlwhite) || [];
        return tokens.join(" ");
      }
      function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
      }
      function classesToArray(value) {
        if (Array.isArray(value)) {
          return value;
        }
        if (typeof value === "string") {
          return value.match(rnothtmlwhite) || [];
        }
        return [];
      }
      jQuery.fn.extend({
        addClass: function(value) {
          var classNames, cur, curValue, className, i, finalValue;
          if (isFunction(value)) {
            return this.each(function(j) {
              jQuery(this).addClass(value.call(this, j, getClass(this)));
            });
          }
          classNames = classesToArray(value);
          if (classNames.length) {
            return this.each(function() {
              curValue = getClass(this);
              cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
              if (cur) {
                for (i = 0; i < classNames.length; i++) {
                  className = classNames[i];
                  if (cur.indexOf(" " + className + " ") < 0) {
                    cur += className + " ";
                  }
                }
                finalValue = stripAndCollapse(cur);
                if (curValue !== finalValue) {
                  this.setAttribute("class", finalValue);
                }
              }
            });
          }
          return this;
        },
        removeClass: function(value) {
          var classNames, cur, curValue, className, i, finalValue;
          if (isFunction(value)) {
            return this.each(function(j) {
              jQuery(this).removeClass(value.call(this, j, getClass(this)));
            });
          }
          if (!arguments.length) {
            return this.attr("class", "");
          }
          classNames = classesToArray(value);
          if (classNames.length) {
            return this.each(function() {
              curValue = getClass(this);
              cur = this.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";
              if (cur) {
                for (i = 0; i < classNames.length; i++) {
                  className = classNames[i];
                  while (cur.indexOf(" " + className + " ") > -1) {
                    cur = cur.replace(" " + className + " ", " ");
                  }
                }
                finalValue = stripAndCollapse(cur);
                if (curValue !== finalValue) {
                  this.setAttribute("class", finalValue);
                }
              }
            });
          }
          return this;
        },
        toggleClass: function(value, stateVal) {
          var classNames, className, i, self, type = typeof value, isValidValue = type === "string" || Array.isArray(value);
          if (isFunction(value)) {
            return this.each(function(i2) {
              jQuery(this).toggleClass(
                value.call(this, i2, getClass(this), stateVal),
                stateVal
              );
            });
          }
          if (typeof stateVal === "boolean" && isValidValue) {
            return stateVal ? this.addClass(value) : this.removeClass(value);
          }
          classNames = classesToArray(value);
          return this.each(function() {
            if (isValidValue) {
              self = jQuery(this);
              for (i = 0; i < classNames.length; i++) {
                className = classNames[i];
                if (self.hasClass(className)) {
                  self.removeClass(className);
                } else {
                  self.addClass(className);
                }
              }
            } else if (value === void 0 || type === "boolean") {
              className = getClass(this);
              if (className) {
                dataPriv.set(this, "__className__", className);
              }
              if (this.setAttribute) {
                this.setAttribute(
                  "class",
                  className || value === false ? "" : dataPriv.get(this, "__className__") || ""
                );
              }
            }
          });
        },
        hasClass: function(selector) {
          var className, elem, i = 0;
          className = " " + selector + " ";
          while (elem = this[i++]) {
            if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
              return true;
            }
          }
          return false;
        }
      });
      var rreturn = /\r/g;
      jQuery.fn.extend({
        val: function(value) {
          var hooks, ret, valueIsFunction, elem = this[0];
          if (!arguments.length) {
            if (elem) {
              hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
              if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== void 0) {
                return ret;
              }
              ret = elem.value;
              if (typeof ret === "string") {
                return ret.replace(rreturn, "");
              }
              return ret == null ? "" : ret;
            }
            return;
          }
          valueIsFunction = isFunction(value);
          return this.each(function(i) {
            var val;
            if (this.nodeType !== 1) {
              return;
            }
            if (valueIsFunction) {
              val = value.call(this, i, jQuery(this).val());
            } else {
              val = value;
            }
            if (val == null) {
              val = "";
            } else if (typeof val === "number") {
              val += "";
            } else if (Array.isArray(val)) {
              val = jQuery.map(val, function(value2) {
                return value2 == null ? "" : value2 + "";
              });
            }
            hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
            if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === void 0) {
              this.value = val;
            }
          });
        }
      });
      jQuery.extend({
        valHooks: {
          option: {
            get: function(elem) {
              var val = jQuery.find.attr(elem, "value");
              return val != null ? val : stripAndCollapse(jQuery.text(elem));
            }
          },
          select: {
            get: function(elem) {
              var value, option, i, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one", values = one ? null : [], max = one ? index + 1 : options.length;
              if (index < 0) {
                i = max;
              } else {
                i = one ? index : 0;
              }
              for (; i < max; i++) {
                option = options[i];
                if ((option.selected || i === index) && !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
                  value = jQuery(option).val();
                  if (one) {
                    return value;
                  }
                  values.push(value);
                }
              }
              return values;
            },
            set: function(elem, value) {
              var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
              while (i--) {
                option = options[i];
                if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
                  optionSet = true;
                }
              }
              if (!optionSet) {
                elem.selectedIndex = -1;
              }
              return values;
            }
          }
        }
      });
      jQuery.each(["radio", "checkbox"], function() {
        jQuery.valHooks[this] = {
          set: function(elem, value) {
            if (Array.isArray(value)) {
              return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
            }
          }
        };
        if (!support.checkOn) {
          jQuery.valHooks[this].get = function(elem) {
            return elem.getAttribute("value") === null ? "on" : elem.value;
          };
        }
      });
      var location = window2.location;
      var nonce = { guid: Date.now() };
      var rquery = /\?/;
      jQuery.parseXML = function(data) {
        var xml, parserErrorElem;
        if (!data || typeof data !== "string") {
          return null;
        }
        try {
          xml = new window2.DOMParser().parseFromString(data, "text/xml");
        } catch (e) {
        }
        parserErrorElem = xml && xml.getElementsByTagName("parsererror")[0];
        if (!xml || parserErrorElem) {
          jQuery.error("Invalid XML: " + (parserErrorElem ? jQuery.map(parserErrorElem.childNodes, function(el) {
            return el.textContent;
          }).join("\n") : data));
        }
        return xml;
      };
      var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, stopPropagationCallback = function(e) {
        e.stopPropagation();
      };
      jQuery.extend(jQuery.event, {
        trigger: function(event, data, elem, onlyHandlers) {
          var i, cur, tmp, bubbleType, ontype, handle, special, lastElement, eventPath = [elem || document2], type = hasOwn.call(event, "type") ? event.type : event, namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
          cur = lastElement = tmp = elem = elem || document2;
          if (elem.nodeType === 3 || elem.nodeType === 8) {
            return;
          }
          if (rfocusMorph.test(type + jQuery.event.triggered)) {
            return;
          }
          if (type.indexOf(".") > -1) {
            namespaces = type.split(".");
            type = namespaces.shift();
            namespaces.sort();
          }
          ontype = type.indexOf(":") < 0 && "on" + type;
          event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
          event.isTrigger = onlyHandlers ? 2 : 3;
          event.namespace = namespaces.join(".");
          event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
          event.result = void 0;
          if (!event.target) {
            event.target = elem;
          }
          data = data == null ? [event] : jQuery.makeArray(data, [event]);
          special = jQuery.event.special[type] || {};
          if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
            return;
          }
          if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
            bubbleType = special.delegateType || type;
            if (!rfocusMorph.test(bubbleType + type)) {
              cur = cur.parentNode;
            }
            for (; cur; cur = cur.parentNode) {
              eventPath.push(cur);
              tmp = cur;
            }
            if (tmp === (elem.ownerDocument || document2)) {
              eventPath.push(tmp.defaultView || tmp.parentWindow || window2);
            }
          }
          i = 0;
          while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
            lastElement = cur;
            event.type = i > 1 ? bubbleType : special.bindType || type;
            handle = (dataPriv.get(cur, "events") || /* @__PURE__ */ Object.create(null))[event.type] && dataPriv.get(cur, "handle");
            if (handle) {
              handle.apply(cur, data);
            }
            handle = ontype && cur[ontype];
            if (handle && handle.apply && acceptData(cur)) {
              event.result = handle.apply(cur, data);
              if (event.result === false) {
                event.preventDefault();
              }
            }
          }
          event.type = type;
          if (!onlyHandlers && !event.isDefaultPrevented()) {
            if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
              if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
                tmp = elem[ontype];
                if (tmp) {
                  elem[ontype] = null;
                }
                jQuery.event.triggered = type;
                if (event.isPropagationStopped()) {
                  lastElement.addEventListener(type, stopPropagationCallback);
                }
                elem[type]();
                if (event.isPropagationStopped()) {
                  lastElement.removeEventListener(type, stopPropagationCallback);
                }
                jQuery.event.triggered = void 0;
                if (tmp) {
                  elem[ontype] = tmp;
                }
              }
            }
          }
          return event.result;
        },
        simulate: function(type, elem, event) {
          var e = jQuery.extend(
            new jQuery.Event(),
            event,
            {
              type,
              isSimulated: true
            }
          );
          jQuery.event.trigger(e, null, elem);
        }
      });
      jQuery.fn.extend({
        trigger: function(type, data) {
          return this.each(function() {
            jQuery.event.trigger(type, data, this);
          });
        },
        triggerHandler: function(type, data) {
          var elem = this[0];
          if (elem) {
            return jQuery.event.trigger(type, data, elem, true);
          }
        }
      });
      var rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
      function buildParams(prefix, obj, traditional, add) {
        var name;
        if (Array.isArray(obj)) {
          jQuery.each(obj, function(i, v) {
            if (traditional || rbracket.test(prefix)) {
              add(prefix, v);
            } else {
              buildParams(
                prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]",
                v,
                traditional,
                add
              );
            }
          });
        } else if (!traditional && toType2(obj) === "object") {
          for (name in obj) {
            buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
          }
        } else {
          add(prefix, obj);
        }
      }
      jQuery.param = function(a, traditional) {
        var prefix, s = [], add = function(key, valueOrFunction) {
          var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
          s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
        };
        if (a == null) {
          return "";
        }
        if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
          jQuery.each(a, function() {
            add(this.name, this.value);
          });
        } else {
          for (prefix in a) {
            buildParams(prefix, a[prefix], traditional, add);
          }
        }
        return s.join("&");
      };
      jQuery.fn.extend({
        serialize: function() {
          return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
          return this.map(function() {
            var elements = jQuery.prop(this, "elements");
            return elements ? jQuery.makeArray(elements) : this;
          }).filter(function() {
            var type = this.type;
            return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
          }).map(function(_i, elem) {
            var val = jQuery(this).val();
            if (val == null) {
              return null;
            }
            if (Array.isArray(val)) {
              return jQuery.map(val, function(val2) {
                return { name: elem.name, value: val2.replace(rCRLF, "\r\n") };
              });
            }
            return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
          }).get();
        }
      });
      var r20 = /%20/g, rhash = /#.*$/, rantiCache = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, prefilters = {}, transports = {}, allTypes = "*/".concat("*"), originAnchor = document2.createElement("a");
      originAnchor.href = location.href;
      function addToPrefiltersOrTransports(structure) {
        return function(dataTypeExpression, func) {
          if (typeof dataTypeExpression !== "string") {
            func = dataTypeExpression;
            dataTypeExpression = "*";
          }
          var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];
          if (isFunction(func)) {
            while (dataType = dataTypes[i++]) {
              if (dataType[0] === "+") {
                dataType = dataType.slice(1) || "*";
                (structure[dataType] = structure[dataType] || []).unshift(func);
              } else {
                (structure[dataType] = structure[dataType] || []).push(func);
              }
            }
          }
        };
      }
      function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
          var selected;
          inspected[dataType] = true;
          jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
            var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
            if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
              options.dataTypes.unshift(dataTypeOrTransport);
              inspect(dataTypeOrTransport);
              return false;
            } else if (seekingTransport) {
              return !(selected = dataTypeOrTransport);
            }
          });
          return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
      }
      function ajaxExtend(target, src) {
        var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
          if (src[key] !== void 0) {
            (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
          }
        }
        if (deep) {
          jQuery.extend(true, target, deep);
        }
        return target;
      }
      function ajaxHandleResponses(s, jqXHR, responses) {
        var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === "*") {
          dataTypes.shift();
          if (ct === void 0) {
            ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
          }
        }
        if (ct) {
          for (type in contents) {
            if (contents[type] && contents[type].test(ct)) {
              dataTypes.unshift(type);
              break;
            }
          }
        }
        if (dataTypes[0] in responses) {
          finalDataType = dataTypes[0];
        } else {
          for (type in responses) {
            if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
              finalDataType = type;
              break;
            }
            if (!firstDataType) {
              firstDataType = type;
            }
          }
          finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
          if (finalDataType !== dataTypes[0]) {
            dataTypes.unshift(finalDataType);
          }
          return responses[finalDataType];
        }
      }
      function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
          for (conv in s.converters) {
            converters[conv.toLowerCase()] = s.converters[conv];
          }
        }
        current = dataTypes.shift();
        while (current) {
          if (s.responseFields[current]) {
            jqXHR[s.responseFields[current]] = response;
          }
          if (!prev && isSuccess && s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
          }
          prev = current;
          current = dataTypes.shift();
          if (current) {
            if (current === "*") {
              current = prev;
            } else if (prev !== "*" && prev !== current) {
              conv = converters[prev + " " + current] || converters["* " + current];
              if (!conv) {
                for (conv2 in converters) {
                  tmp = conv2.split(" ");
                  if (tmp[1] === current) {
                    conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                    if (conv) {
                      if (conv === true) {
                        conv = converters[conv2];
                      } else if (converters[conv2] !== true) {
                        current = tmp[0];
                        dataTypes.unshift(tmp[1]);
                      }
                      break;
                    }
                  }
                }
              }
              if (conv !== true) {
                if (conv && s.throws) {
                  response = conv(response);
                } else {
                  try {
                    response = conv(response);
                  } catch (e) {
                    return {
                      state: "parsererror",
                      error: conv ? e : "No conversion from " + prev + " to " + current
                    };
                  }
                }
              }
            }
          }
        }
        return { state: "success", data: response };
      }
      jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
          url: location.href,
          type: "GET",
          isLocal: rlocalProtocol.test(location.protocol),
          global: true,
          processData: true,
          async: true,
          contentType: "application/x-www-form-urlencoded; charset=UTF-8",
          accepts: {
            "*": allTypes,
            text: "text/plain",
            html: "text/html",
            xml: "application/xml, text/xml",
            json: "application/json, text/javascript"
          },
          contents: {
            xml: /\bxml\b/,
            html: /\bhtml/,
            json: /\bjson\b/
          },
          responseFields: {
            xml: "responseXML",
            text: "responseText",
            json: "responseJSON"
          },
          converters: {
            "* text": String,
            "text html": true,
            "text json": JSON.parse,
            "text xml": jQuery.parseXML
          },
          flatOptions: {
            url: true,
            context: true
          }
        },
        ajaxSetup: function(target, settings) {
          return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function(url, options) {
          if (typeof url === "object") {
            options = url;
            url = void 0;
          }
          options = options || {};
          var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, urlAnchor, completed2, fireGlobals, i, uncached, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, strAbort = "canceled", jqXHR = {
            readyState: 0,
            getResponseHeader: function(key) {
              var match;
              if (completed2) {
                if (!responseHeaders) {
                  responseHeaders = {};
                  while (match = rheaders.exec(responseHeadersString)) {
                    responseHeaders[match[1].toLowerCase() + " "] = (responseHeaders[match[1].toLowerCase() + " "] || []).concat(match[2]);
                  }
                }
                match = responseHeaders[key.toLowerCase() + " "];
              }
              return match == null ? null : match.join(", ");
            },
            getAllResponseHeaders: function() {
              return completed2 ? responseHeadersString : null;
            },
            setRequestHeader: function(name, value) {
              if (completed2 == null) {
                name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
                requestHeaders[name] = value;
              }
              return this;
            },
            overrideMimeType: function(type) {
              if (completed2 == null) {
                s.mimeType = type;
              }
              return this;
            },
            statusCode: function(map) {
              var code;
              if (map) {
                if (completed2) {
                  jqXHR.always(map[jqXHR.status]);
                } else {
                  for (code in map) {
                    statusCode[code] = [statusCode[code], map[code]];
                  }
                }
              }
              return this;
            },
            abort: function(statusText) {
              var finalText = statusText || strAbort;
              if (transport) {
                transport.abort(finalText);
              }
              done(0, finalText);
              return this;
            }
          };
          deferred.promise(jqXHR);
          s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");
          s.type = options.method || options.type || s.method || s.type;
          s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];
          if (s.crossDomain == null) {
            urlAnchor = document2.createElement("a");
            try {
              urlAnchor.href = s.url;
              urlAnchor.href = urlAnchor.href;
              s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
            } catch (e) {
              s.crossDomain = true;
            }
          }
          if (s.data && s.processData && typeof s.data !== "string") {
            s.data = jQuery.param(s.data, s.traditional);
          }
          inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
          if (completed2) {
            return jqXHR;
          }
          fireGlobals = jQuery.event && s.global;
          if (fireGlobals && jQuery.active++ === 0) {
            jQuery.event.trigger("ajaxStart");
          }
          s.type = s.type.toUpperCase();
          s.hasContent = !rnoContent.test(s.type);
          cacheURL = s.url.replace(rhash, "");
          if (!s.hasContent) {
            uncached = s.url.slice(cacheURL.length);
            if (s.data && (s.processData || typeof s.data === "string")) {
              cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;
              delete s.data;
            }
            if (s.cache === false) {
              cacheURL = cacheURL.replace(rantiCache, "$1");
              uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce.guid++ + uncached;
            }
            s.url = cacheURL + uncached;
          } else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
            s.data = s.data.replace(r20, "+");
          }
          if (s.ifModified) {
            if (jQuery.lastModified[cacheURL]) {
              jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
            }
            if (jQuery.etag[cacheURL]) {
              jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
            }
          }
          if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
            jqXHR.setRequestHeader("Content-Type", s.contentType);
          }
          jqXHR.setRequestHeader(
            "Accept",
            s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]
          );
          for (i in s.headers) {
            jqXHR.setRequestHeader(i, s.headers[i]);
          }
          if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed2)) {
            return jqXHR.abort();
          }
          strAbort = "abort";
          completeDeferred.add(s.complete);
          jqXHR.done(s.success);
          jqXHR.fail(s.error);
          transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
          if (!transport) {
            done(-1, "No Transport");
          } else {
            jqXHR.readyState = 1;
            if (fireGlobals) {
              globalEventContext.trigger("ajaxSend", [jqXHR, s]);
            }
            if (completed2) {
              return jqXHR;
            }
            if (s.async && s.timeout > 0) {
              timeoutTimer = window2.setTimeout(function() {
                jqXHR.abort("timeout");
              }, s.timeout);
            }
            try {
              completed2 = false;
              transport.send(requestHeaders, done);
            } catch (e) {
              if (completed2) {
                throw e;
              }
              done(-1, e);
            }
          }
          function done(status, nativeStatusText, responses, headers) {
            var isSuccess, success, error, response, modified, statusText = nativeStatusText;
            if (completed2) {
              return;
            }
            completed2 = true;
            if (timeoutTimer) {
              window2.clearTimeout(timeoutTimer);
            }
            transport = void 0;
            responseHeadersString = headers || "";
            jqXHR.readyState = status > 0 ? 4 : 0;
            isSuccess = status >= 200 && status < 300 || status === 304;
            if (responses) {
              response = ajaxHandleResponses(s, jqXHR, responses);
            }
            if (!isSuccess && jQuery.inArray("script", s.dataTypes) > -1 && jQuery.inArray("json", s.dataTypes) < 0) {
              s.converters["text script"] = function() {
              };
            }
            response = ajaxConvert(s, response, jqXHR, isSuccess);
            if (isSuccess) {
              if (s.ifModified) {
                modified = jqXHR.getResponseHeader("Last-Modified");
                if (modified) {
                  jQuery.lastModified[cacheURL] = modified;
                }
                modified = jqXHR.getResponseHeader("etag");
                if (modified) {
                  jQuery.etag[cacheURL] = modified;
                }
              }
              if (status === 204 || s.type === "HEAD") {
                statusText = "nocontent";
              } else if (status === 304) {
                statusText = "notmodified";
              } else {
                statusText = response.state;
                success = response.data;
                error = response.error;
                isSuccess = !error;
              }
            } else {
              error = statusText;
              if (status || !statusText) {
                statusText = "error";
                if (status < 0) {
                  status = 0;
                }
              }
            }
            jqXHR.status = status;
            jqXHR.statusText = (nativeStatusText || statusText) + "";
            if (isSuccess) {
              deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
            } else {
              deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
            }
            jqXHR.statusCode(statusCode);
            statusCode = void 0;
            if (fireGlobals) {
              globalEventContext.trigger(
                isSuccess ? "ajaxSuccess" : "ajaxError",
                [jqXHR, s, isSuccess ? success : error]
              );
            }
            completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
            if (fireGlobals) {
              globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
              if (!--jQuery.active) {
                jQuery.event.trigger("ajaxStop");
              }
            }
          }
          return jqXHR;
        },
        getJSON: function(url, data, callback) {
          return jQuery.get(url, data, callback, "json");
        },
        getScript: function(url, callback) {
          return jQuery.get(url, void 0, callback, "script");
        }
      });
      jQuery.each(["get", "post"], function(_i, method) {
        jQuery[method] = function(url, data, callback, type) {
          if (isFunction(data)) {
            type = type || callback;
            callback = data;
            data = void 0;
          }
          return jQuery.ajax(jQuery.extend({
            url,
            type: method,
            dataType: type,
            data,
            success: callback
          }, jQuery.isPlainObject(url) && url));
        };
      });
      jQuery.ajaxPrefilter(function(s) {
        var i;
        for (i in s.headers) {
          if (i.toLowerCase() === "content-type") {
            s.contentType = s.headers[i] || "";
          }
        }
      });
      jQuery._evalUrl = function(url, options, doc) {
        return jQuery.ajax({
          url,
          type: "GET",
          dataType: "script",
          cache: true,
          async: false,
          global: false,
          converters: {
            "text script": function() {
            }
          },
          dataFilter: function(response) {
            jQuery.globalEval(response, options, doc);
          }
        });
      };
      jQuery.fn.extend({
        wrapAll: function(html) {
          var wrap;
          if (this[0]) {
            if (isFunction(html)) {
              html = html.call(this[0]);
            }
            wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
            if (this[0].parentNode) {
              wrap.insertBefore(this[0]);
            }
            wrap.map(function() {
              var elem = this;
              while (elem.firstElementChild) {
                elem = elem.firstElementChild;
              }
              return elem;
            }).append(this);
          }
          return this;
        },
        wrapInner: function(html) {
          if (isFunction(html)) {
            return this.each(function(i) {
              jQuery(this).wrapInner(html.call(this, i));
            });
          }
          return this.each(function() {
            var self = jQuery(this), contents = self.contents();
            if (contents.length) {
              contents.wrapAll(html);
            } else {
              self.append(html);
            }
          });
        },
        wrap: function(html) {
          var htmlIsFunction = isFunction(html);
          return this.each(function(i) {
            jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
          });
        },
        unwrap: function(selector) {
          this.parent(selector).not("body").each(function() {
            jQuery(this).replaceWith(this.childNodes);
          });
          return this;
        }
      });
      jQuery.expr.pseudos.hidden = function(elem) {
        return !jQuery.expr.pseudos.visible(elem);
      };
      jQuery.expr.pseudos.visible = function(elem) {
        return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
      };
      jQuery.ajaxSettings.xhr = function() {
        try {
          return new window2.XMLHttpRequest();
        } catch (e) {
        }
      };
      var xhrSuccessStatus = {
        0: 200,
        1223: 204
      }, xhrSupported = jQuery.ajaxSettings.xhr();
      support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
      support.ajax = xhrSupported = !!xhrSupported;
      jQuery.ajaxTransport(function(options) {
        var callback, errorCallback;
        if (support.cors || xhrSupported && !options.crossDomain) {
          return {
            send: function(headers, complete) {
              var i, xhr = options.xhr();
              xhr.open(
                options.type,
                options.url,
                options.async,
                options.username,
                options.password
              );
              if (options.xhrFields) {
                for (i in options.xhrFields) {
                  xhr[i] = options.xhrFields[i];
                }
              }
              if (options.mimeType && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.mimeType);
              }
              if (!options.crossDomain && !headers["X-Requested-With"]) {
                headers["X-Requested-With"] = "XMLHttpRequest";
              }
              for (i in headers) {
                xhr.setRequestHeader(i, headers[i]);
              }
              callback = function(type) {
                return function() {
                  if (callback) {
                    callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;
                    if (type === "abort") {
                      xhr.abort();
                    } else if (type === "error") {
                      if (typeof xhr.status !== "number") {
                        complete(0, "error");
                      } else {
                        complete(
                          xhr.status,
                          xhr.statusText
                        );
                      }
                    } else {
                      complete(
                        xhrSuccessStatus[xhr.status] || xhr.status,
                        xhr.statusText,
                        (xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText },
                        xhr.getAllResponseHeaders()
                      );
                    }
                  }
                };
              };
              xhr.onload = callback();
              errorCallback = xhr.onerror = xhr.ontimeout = callback("error");
              if (xhr.onabort !== void 0) {
                xhr.onabort = errorCallback;
              } else {
                xhr.onreadystatechange = function() {
                  if (xhr.readyState === 4) {
                    window2.setTimeout(function() {
                      if (callback) {
                        errorCallback();
                      }
                    });
                  }
                };
              }
              callback = callback("abort");
              try {
                xhr.send(options.hasContent && options.data || null);
              } catch (e) {
                if (callback) {
                  throw e;
                }
              }
            },
            abort: function() {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      jQuery.ajaxPrefilter(function(s) {
        if (s.crossDomain) {
          s.contents.script = false;
        }
      });
      jQuery.ajaxSetup({
        accepts: {
          script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
          script: /\b(?:java|ecma)script\b/
        },
        converters: {
          "text script": function(text) {
            jQuery.globalEval(text);
            return text;
          }
        }
      });
      jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === void 0) {
          s.cache = false;
        }
        if (s.crossDomain) {
          s.type = "GET";
        }
      });
      jQuery.ajaxTransport("script", function(s) {
        if (s.crossDomain || s.scriptAttrs) {
          var script2, callback;
          return {
            send: function(_, complete) {
              script2 = jQuery("<script>").attr(s.scriptAttrs || {}).prop({ charset: s.scriptCharset, src: s.url }).on("load error", callback = function(evt) {
                script2.remove();
                callback = null;
                if (evt) {
                  complete(evt.type === "error" ? 404 : 200, evt.type);
                }
              });
              document2.head.appendChild(script2[0]);
            },
            abort: function() {
              if (callback) {
                callback();
              }
            }
          };
        }
      });
      var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
      jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
          var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce.guid++;
          this[callback] = true;
          return callback;
        }
      });
      jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");
        if (jsonProp || s.dataTypes[0] === "jsonp") {
          callbackName = s.jsonpCallback = isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
          if (jsonProp) {
            s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
          } else if (s.jsonp !== false) {
            s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
          }
          s.converters["script json"] = function() {
            if (!responseContainer) {
              jQuery.error(callbackName + " was not called");
            }
            return responseContainer[0];
          };
          s.dataTypes[0] = "json";
          overwritten = window2[callbackName];
          window2[callbackName] = function() {
            responseContainer = arguments;
          };
          jqXHR.always(function() {
            if (overwritten === void 0) {
              jQuery(window2).removeProp(callbackName);
            } else {
              window2[callbackName] = overwritten;
            }
            if (s[callbackName]) {
              s.jsonpCallback = originalSettings.jsonpCallback;
              oldCallbacks.push(callbackName);
            }
            if (responseContainer && isFunction(overwritten)) {
              overwritten(responseContainer[0]);
            }
            responseContainer = overwritten = void 0;
          });
          return "script";
        }
      });
      support.createHTMLDocument = function() {
        var body = document2.implementation.createHTMLDocument("").body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
      }();
      jQuery.parseHTML = function(data, context, keepScripts) {
        if (typeof data !== "string") {
          return [];
        }
        if (typeof context === "boolean") {
          keepScripts = context;
          context = false;
        }
        var base, parsed, scripts;
        if (!context) {
          if (support.createHTMLDocument) {
            context = document2.implementation.createHTMLDocument("");
            base = context.createElement("base");
            base.href = document2.location.href;
            context.head.appendChild(base);
          } else {
            context = document2;
          }
        }
        parsed = rsingleTag.exec(data);
        scripts = !keepScripts && [];
        if (parsed) {
          return [context.createElement(parsed[1])];
        }
        parsed = buildFragment([data], context, scripts);
        if (scripts && scripts.length) {
          jQuery(scripts).remove();
        }
        return jQuery.merge([], parsed.childNodes);
      };
      jQuery.fn.load = function(url, params, callback) {
        var selector, type, response, self = this, off = url.indexOf(" ");
        if (off > -1) {
          selector = stripAndCollapse(url.slice(off));
          url = url.slice(0, off);
        }
        if (isFunction(params)) {
          callback = params;
          params = void 0;
        } else if (params && typeof params === "object") {
          type = "POST";
        }
        if (self.length > 0) {
          jQuery.ajax({
            url,
            type: type || "GET",
            dataType: "html",
            data: params
          }).done(function(responseText) {
            response = arguments;
            self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText);
          }).always(callback && function(jqXHR, status) {
            self.each(function() {
              callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
            });
          });
        }
        return this;
      };
      jQuery.expr.pseudos.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
          return elem === fn.elem;
        }).length;
      };
      jQuery.offset = {
        setOffset: function(elem, options, i) {
          var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"), curElem = jQuery(elem), props = {};
          if (position === "static") {
            elem.style.position = "relative";
          }
          curOffset = curElem.offset();
          curCSSTop = jQuery.css(elem, "top");
          curCSSLeft = jQuery.css(elem, "left");
          calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
          if (calculatePosition) {
            curPosition = curElem.position();
            curTop = curPosition.top;
            curLeft = curPosition.left;
          } else {
            curTop = parseFloat(curCSSTop) || 0;
            curLeft = parseFloat(curCSSLeft) || 0;
          }
          if (isFunction(options)) {
            options = options.call(elem, i, jQuery.extend({}, curOffset));
          }
          if (options.top != null) {
            props.top = options.top - curOffset.top + curTop;
          }
          if (options.left != null) {
            props.left = options.left - curOffset.left + curLeft;
          }
          if ("using" in options) {
            options.using.call(elem, props);
          } else {
            curElem.css(props);
          }
        }
      };
      jQuery.fn.extend({
        offset: function(options) {
          if (arguments.length) {
            return options === void 0 ? this : this.each(function(i) {
              jQuery.offset.setOffset(this, options, i);
            });
          }
          var rect, win, elem = this[0];
          if (!elem) {
            return;
          }
          if (!elem.getClientRects().length) {
            return { top: 0, left: 0 };
          }
          rect = elem.getBoundingClientRect();
          win = elem.ownerDocument.defaultView;
          return {
            top: rect.top + win.pageYOffset,
            left: rect.left + win.pageXOffset
          };
        },
        position: function() {
          if (!this[0]) {
            return;
          }
          var offsetParent, offset, doc, elem = this[0], parentOffset = { top: 0, left: 0 };
          if (jQuery.css(elem, "position") === "fixed") {
            offset = elem.getBoundingClientRect();
          } else {
            offset = this.offset();
            doc = elem.ownerDocument;
            offsetParent = elem.offsetParent || doc.documentElement;
            while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
              offsetParent = offsetParent.parentNode;
            }
            if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
              parentOffset = jQuery(offsetParent).offset();
              parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
              parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
            }
          }
          return {
            top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
            left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
          };
        },
        offsetParent: function() {
          return this.map(function() {
            var offsetParent = this.offsetParent;
            while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
              offsetParent = offsetParent.offsetParent;
            }
            return offsetParent || documentElement;
          });
        }
      });
      jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function(method, prop) {
        var top = "pageYOffset" === prop;
        jQuery.fn[method] = function(val) {
          return access(this, function(elem, method2, val2) {
            var win;
            if (isWindow(elem)) {
              win = elem;
            } else if (elem.nodeType === 9) {
              win = elem.defaultView;
            }
            if (val2 === void 0) {
              return win ? win[prop] : elem[method2];
            }
            if (win) {
              win.scrollTo(
                !top ? val2 : win.pageXOffset,
                top ? val2 : win.pageYOffset
              );
            } else {
              elem[method2] = val2;
            }
          }, method, val, arguments.length);
        };
      });
      jQuery.each(["top", "left"], function(_i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(
          support.pixelPosition,
          function(elem, computed) {
            if (computed) {
              computed = curCSS(elem, prop);
              return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
            }
          }
        );
      });
      jQuery.each({ Height: "height", Width: "width" }, function(name, type) {
        jQuery.each({
          padding: "inner" + name,
          content: type,
          "": "outer" + name
        }, function(defaultExtra, funcName) {
          jQuery.fn[funcName] = function(margin, value) {
            var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
            return access(this, function(elem, type2, value2) {
              var doc;
              if (isWindow(elem)) {
                return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
              }
              if (elem.nodeType === 9) {
                doc = elem.documentElement;
                return Math.max(
                  elem.body["scroll" + name],
                  doc["scroll" + name],
                  elem.body["offset" + name],
                  doc["offset" + name],
                  doc["client" + name]
                );
              }
              return value2 === void 0 ? jQuery.css(elem, type2, extra) : jQuery.style(elem, type2, value2, extra);
            }, type, chainable ? margin : void 0, chainable);
          };
        });
      });
      jQuery.each([
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend"
      ], function(_i, type) {
        jQuery.fn[type] = function(fn) {
          return this.on(type, fn);
        };
      });
      jQuery.fn.extend({
        bind: function(types, data, fn) {
          return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
          return this.off(types, null, fn);
        },
        delegate: function(selector, types, data, fn) {
          return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {
          return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
        },
        hover: function(fnOver, fnOut) {
          return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
      });
      jQuery.each(
        "blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),
        function(_i, name) {
          jQuery.fn[name] = function(data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
          };
        }
      );
      var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;
      jQuery.proxy = function(fn, context) {
        var tmp, args, proxy;
        if (typeof context === "string") {
          tmp = fn[context];
          context = fn;
          fn = tmp;
        }
        if (!isFunction(fn)) {
          return void 0;
        }
        args = slice.call(arguments, 2);
        proxy = function() {
          return fn.apply(context || this, args.concat(slice.call(arguments)));
        };
        proxy.guid = fn.guid = fn.guid || jQuery.guid++;
        return proxy;
      };
      jQuery.holdReady = function(hold) {
        if (hold) {
          jQuery.readyWait++;
        } else {
          jQuery.ready(true);
        }
      };
      jQuery.isArray = Array.isArray;
      jQuery.parseJSON = JSON.parse;
      jQuery.nodeName = nodeName;
      jQuery.isFunction = isFunction;
      jQuery.isWindow = isWindow;
      jQuery.camelCase = camelCase;
      jQuery.type = toType2;
      jQuery.now = Date.now;
      jQuery.isNumeric = function(obj) {
        var type = jQuery.type(obj);
        return (type === "number" || type === "string") && !isNaN(obj - parseFloat(obj));
      };
      jQuery.trim = function(text) {
        return text == null ? "" : (text + "").replace(rtrim, "$1");
      };
      if (typeof define === "function" && define.amd) {
        define("jquery", [], function() {
          return jQuery;
        });
      }
      var _jQuery = window2.jQuery, _$ = window2.$;
      jQuery.noConflict = function(deep) {
        if (window2.$ === jQuery) {
          window2.$ = _$;
        }
        if (deep && window2.jQuery === jQuery) {
          window2.jQuery = _jQuery;
        }
        return jQuery;
      };
      if (typeof noGlobal === "undefined") {
        window2.jQuery = window2.$ = jQuery;
      }
      return jQuery;
    });
  }
});

// browser-external:crypto
var require_crypto = __commonJS({
  "browser-external:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code.`);
        }
      }
    }));
  }
});

// node_modules/vue-turnjs/dist/vue-turnjs.esm.js
var import_jquery = __toESM(require_jquery());
var import_crypto = __toESM(require_crypto());
var isArray = (val) => Array.isArray(val);
var freeze = (obj) => Object.freeze(obj);
var getOwnPropertyNames = (obj) => Object.getOwnPropertyNames(obj);
var keys = (obj) => Object.keys(obj);
var hasOwnProperty = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
var isObject = (obj) => obj !== null && typeof obj === "object";
var isPlainObject = (obj) => Object.prototype.toString.call(obj) === "[object Object]";
var deepFreeze = (obj) => {
  const props = keys(obj);
  props.forEach((prop) => {
    const value = obj[prop];
    obj[prop] = value && (isPlainObject(value) || isArray(value)) ? deepFreeze(value) : value;
  });
  return freeze(obj);
};
var hasWindowSupport = typeof window !== "undefined";
var hasDocumentSupport = typeof document !== "undefined";
var hasNavigatorSupport = typeof navigator !== "undefined";
var isBrowser = hasWindowSupport && hasDocumentSupport && hasNavigatorSupport;
var userAgent = isBrowser ? window.navigator.userAgent.toLowerCase() : "";
var isJSDOM = userAgent.indexOf("jsdom") > 0;
var isIE = /msie|trident/.test(userAgent);
var hasPassiveEventSupport = (() => {
  let passiveEventSupported = false;
  if (isBrowser) {
    try {
      const options = {
        get passive() {
          passiveEventSupported = true;
        }
      };
      window.addEventListener("test", options, options);
      window.removeEventListener("test", options, options);
    } catch (err) {
      passiveEventSupported = false;
    }
  }
  return passiveEventSupported;
})();
var getEnv = (key, fallback = null) => {
  const env = typeof process !== "undefined" && process ? process.env || {} : {};
  if (!key) {
    return env;
  }
  return env[key] || fallback;
};
var getNoWarn = () => getEnv("BOOTSTRAP_VUE_NO_WARN");
var toType = (val) => typeof val;
var isUndefined = (val) => val === void 0;
var isNull = (val) => val === null;
var isUndefinedOrNull = (val) => isUndefined(val) || isNull(val);
var isString = (val) => toType(val) === "string";
var cloneDeep = (obj, defaultValue = obj) => {
  if (isArray(obj)) {
    return obj.reduce((result, val) => [...result, cloneDeep(val, val)], []);
  }
  if (isPlainObject(obj)) {
    return keys(obj).reduce((result, key) => ({
      ...result,
      [key]: cloneDeep(obj[key], obj[key])
    }), {});
  }
  return defaultValue;
};
var identity = (x) => x;
var RX_ARRAY_NOTATION = /\[(\d+)]/g;
var getRaw = (obj, path, defaultValue = void 0) => {
  path = isArray(path) ? path.join(".") : path;
  if (!path || !isObject(obj)) {
    return defaultValue;
  }
  if (path in obj) {
    return obj[path];
  }
  path = String(path).replace(RX_ARRAY_NOTATION, ".$1");
  const steps = path.split(".").filter(identity);
  if (steps.length === 0) {
    return defaultValue;
  }
  return steps.every((step) => isObject(obj) && step in obj && !isUndefinedOrNull(obj = obj[step])) ? obj : isNull(obj) ? null : defaultValue;
};
var warn = (message, source = null) => {
  if (!getNoWarn()) {
    console.warn(`[BootstrapVue warn]: ${source ? `${source} - ` : ""}${message}`);
  }
};
var DEFAULTS = deepFreeze({
  FwBookblock: {},
  FwBookblock2: {},
  FwTurn: {}
});
var NAME = "BvConfig";
var PROP_NAME = "$bvConfig";
var BvConfig = class {
  constructor() {
    this.$_config = {};
    this.$_cachedBreakpoints = null;
  }
  static get Defaults() {
    return DEFAULTS;
  }
  get defaults() {
    return DEFAULTS;
  }
  getDefaults() {
    return this.defaults;
  }
  setConfig(config = {}) {
    if (!isPlainObject(config)) {
      return;
    }
    const configKeys = getOwnPropertyNames(config);
    configKeys.forEach((cmpName) => {
      if (!hasOwnProperty(DEFAULTS, cmpName)) {
        warn(`Unknown config property "${cmpName}"`, NAME);
        return;
      }
      const cmpConfig = config[cmpName];
      if (cmpName === "breakpoints") {
        const breakpoints = config.breakpoints;
        if (!isArray(breakpoints) || breakpoints.length < 2 || breakpoints.some((b) => !isString(b) || b.length === 0)) {
          warn('"breakpoints" must be an array of at least 2 breakpoint names', NAME);
        } else {
          this.$_config.breakpoints = cloneDeep(breakpoints);
        }
      } else if (isPlainObject(cmpConfig)) {
        const props = getOwnPropertyNames(cmpConfig);
        props.forEach((prop) => {
          if (!hasOwnProperty(DEFAULTS[cmpName], prop)) {
            warn(`Unknown config property "${cmpName}.${prop}"`, NAME);
          } else {
            this.$_config[cmpName] = this.$_config[cmpName] || {};
            if (!isUndefined(cmpConfig[prop])) {
              this.$_config[cmpName][prop] = cloneDeep(cmpConfig[prop]);
            }
          }
        });
      }
    });
  }
  resetConfig() {
    this.$_config = {};
  }
  getConfig() {
    return cloneDeep(this.$_config);
  }
  getConfigValue(key) {
    return cloneDeep(getRaw(this.$_config, key, getRaw(DEFAULTS, key)));
  }
};
var setConfig = (config = {}, Vue = Vue) => {
  Vue.prototype[PROP_NAME] = Vue.prototype[PROP_NAME] = Vue.prototype[PROP_NAME] || Vue.prototype[PROP_NAME] || new BvConfig();
  Vue.prototype[PROP_NAME].setConfig(config);
};
var checkMultipleVue = (() => {
  let checkMultipleVueWarned = false;
  const MULTIPLE_VUE_WARNING = ["Multiple instances of Vue detected!", "You may need to set up an alias for Vue in your bundler config.", "See: https://bootstrap-vue.org/docs#using-module-bundlers"].join("\n");
  return (Vue) => {
    if (!checkMultipleVueWarned && Vue !== Vue && !isJSDOM) {
      warn(MULTIPLE_VUE_WARNING);
    }
    checkMultipleVueWarned = true;
  };
})();
var installFactory = ({
  components,
  directives,
  plugins
} = {}) => {
  const install2 = (Vue, config = {}) => {
    if (install2.installed) {
      return;
    }
    install2.installed = true;
    checkMultipleVue(Vue);
    setConfig(config, Vue);
    registerComponents(Vue, components);
    registerDirectives(Vue, directives);
    registerPlugins(Vue, plugins);
  };
  install2.installed = false;
  return install2;
};
var installFactoryNoConfig = ({
  components,
  directives,
  plugins
} = {}) => {
  const install2 = (Vue) => {
    if (install2.installed) {
      return;
    }
    install2.installed = true;
    checkMultipleVue(Vue);
    registerComponents(Vue, components);
    registerDirectives(Vue, directives);
    registerPlugins(Vue, plugins);
  };
  install2.installed = false;
  return install2;
};
var pluginFactory = (options = {}, extend = {}) => ({
  ...extend,
  install: installFactory(options)
});
var pluginFactoryNoConfig = (options = {}, extend = {}) => ({
  ...extend,
  install: installFactoryNoConfig(options)
});
var registerPlugins = (Vue, plugins = {}) => {
  for (const plugin2 in plugins) {
    if (plugin2 && plugins[plugin2]) {
      Vue.use(plugins[plugin2]);
    }
  }
};
var registerComponent = (Vue, name, def) => {
  if (Vue && name && def) {
    Vue.component(name, def);
  }
};
var registerComponents = (Vue, components = {}) => {
  for (const component in components) {
    registerComponent(Vue, component, components[component]);
  }
};
var registerDirective = (Vue, name, def) => {
  if (Vue && name && def) {
    Vue.directive(name.replace(/^VB/, "B"), def);
  }
};
var registerDirectives = (Vue, directives = {}) => {
  for (const directive in directives) {
    registerDirective(Vue, directive, directives[directive]);
  }
};
var vueUse = (VuePlugin) => {
  if (hasWindowSupport && window.Vue) {
    window.Vue.use(VuePlugin);
  }
  if (hasWindowSupport && VuePlugin.NAME) {
    window[VuePlugin.NAME] = VuePlugin;
  }
};
var plugin = Object.freeze({
  __proto__: null,
  checkMultipleVue,
  installFactory,
  installFactoryNoConfig,
  pluginFactory,
  pluginFactoryNoConfig,
  registerPlugins,
  registerComponent,
  registerComponents,
  registerDirective,
  registerDirectives,
  vueUse
});
(function(window2, document2, undefined$1) {
  var tests = [];
  var ModernizrProto = {
    _version: "3.6.0",
    _config: {
      classPrefix: "",
      enableClasses: true,
      enableJSClass: true,
      usePrefixes: true
    },
    _q: [],
    on: function(test, cb) {
      var self = this;
      setTimeout(function() {
        cb(self[test]);
      }, 0);
    },
    addTest: function(name, fn, options) {
      tests.push({
        name,
        fn,
        options
      });
    },
    addAsyncTest: function(fn) {
      tests.push({
        name: null,
        fn
      });
    }
  };
  var Modernizr = function() {
  };
  Modernizr.prototype = ModernizrProto;
  Modernizr = new Modernizr();
  var classes = [];
  function is(obj, type) {
    return typeof obj === type;
  }
  function testRunner() {
    var featureNames;
    var feature;
    var aliasIdx;
    var result;
    var nameIdx;
    var featureName;
    var featureNameSplit;
    for (var featureIdx in tests) {
      if (tests.hasOwnProperty(featureIdx)) {
        featureNames = [];
        feature = tests[featureIdx];
        if (feature.name) {
          featureNames.push(feature.name.toLowerCase());
          if (feature.options && feature.options.aliases && feature.options.aliases.length) {
            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {
              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());
            }
          }
        }
        result = is(feature.fn, "function") ? feature.fn() : feature.fn;
        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {
          featureName = featureNames[nameIdx];
          featureNameSplit = featureName.split(".");
          if (featureNameSplit.length === 1) {
            Modernizr[featureNameSplit[0]] = result;
          } else {
            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {
              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);
            }
            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;
          }
          classes.push((result ? "" : "no-") + featureNameSplit.join("-"));
        }
      }
    }
  }
  var hasOwnProp;
  (function() {
    var _hasOwnProperty = {}.hasOwnProperty;
    if (!is(_hasOwnProperty, "undefined") && !is(_hasOwnProperty.call, "undefined")) {
      hasOwnProp = function(object, property) {
        return _hasOwnProperty.call(object, property);
      };
    } else {
      hasOwnProp = function(object, property) {
        return property in object && is(object.constructor.prototype[property], "undefined");
      };
    }
  })();
  function cssToDOM(name) {
    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {
      return m1 + m2.toUpperCase();
    }).replace(/^-/, "");
  }
  var newSyntax = "CSS" in window2 && "supports" in window2.CSS;
  var oldSyntax = "supportsCSS" in window2;
  Modernizr.addTest("supports", newSyntax || oldSyntax);
  var docElement = document2.documentElement;
  var isSVG = docElement.nodeName.toLowerCase() === "svg";
  function setClasses(classes2) {
    var className = docElement.className;
    var classPrefix = Modernizr._config.classPrefix || "";
    if (isSVG) {
      className = className.baseVal;
    }
    if (Modernizr._config.enableJSClass) {
      var reJS = new RegExp("(^|\\s)" + classPrefix + "no-js(\\s|$)");
      className = className.replace(reJS, "$1" + classPrefix + "js$2");
    }
    if (Modernizr._config.enableClasses) {
      className += " " + classPrefix + classes2.join(" " + classPrefix);
      if (isSVG) {
        docElement.className.baseVal = className;
      } else {
        docElement.className = className;
      }
    }
  }
  ModernizrProto._l = {};
  ModernizrProto.on = function(feature, cb) {
    if (!this._l[feature]) {
      this._l[feature] = [];
    }
    this._l[feature].push(cb);
    if (Modernizr.hasOwnProperty(feature)) {
      setTimeout(function() {
        Modernizr._trigger(feature, Modernizr[feature]);
      }, 0);
    }
  };
  ModernizrProto._trigger = function(feature, res) {
    if (!this._l[feature]) {
      return;
    }
    var cbs = this._l[feature];
    setTimeout(function() {
      var i2, cb;
      for (i2 = 0; i2 < cbs.length; i2++) {
        cb = cbs[i2];
        cb(res);
      }
    }, 0);
    delete this._l[feature];
  };
  function addTest(feature, test) {
    if (typeof feature == "object") {
      for (var key in feature) {
        if (hasOwnProp(feature, key)) {
          addTest(key, feature[key]);
        }
      }
    } else {
      feature = feature.toLowerCase();
      var featureNameSplit = feature.split(".");
      var last = Modernizr[featureNameSplit[0]];
      if (featureNameSplit.length == 2) {
        last = last[featureNameSplit[1]];
      }
      if (typeof last != "undefined") {
        return Modernizr;
      }
      test = typeof test == "function" ? test() : test;
      if (featureNameSplit.length == 1) {
        Modernizr[featureNameSplit[0]] = test;
      } else {
        if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {
          Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);
        }
        Modernizr[featureNameSplit[0]][featureNameSplit[1]] = test;
      }
      setClasses([(!!test && test != false ? "" : "no-") + featureNameSplit.join("-")]);
      Modernizr._trigger(feature, test);
    }
    return Modernizr;
  }
  Modernizr._q.push(function() {
    ModernizrProto.addTest = addTest;
  });
  function createElement() {
    if (typeof document2.createElement !== "function") {
      return document2.createElement(arguments[0]);
    } else if (isSVG) {
      return document2.createElementNS.call(document2, "http://www.w3.org/2000/svg", arguments[0]);
    } else {
      return document2.createElement.apply(document2, arguments);
    }
  }
  Modernizr.addTest("preserve3d", function() {
    var outerAnchor, innerAnchor;
    var CSS = window2.CSS;
    var result = false;
    if (CSS && CSS.supports && CSS.supports("(transform-style: preserve-3d)")) {
      return true;
    }
    outerAnchor = createElement("a");
    innerAnchor = createElement("a");
    outerAnchor.style.cssText = "display: block; transform-style: preserve-3d; transform-origin: right; transform: rotateY(40deg);";
    innerAnchor.style.cssText = "display: block; width: 9px; height: 1px; background: #000; transform-origin: right; transform: rotateY(40deg);";
    outerAnchor.appendChild(innerAnchor);
    docElement.appendChild(outerAnchor);
    result = innerAnchor.getBoundingClientRect();
    docElement.removeChild(outerAnchor);
    result = result.width && result.width < 4;
    return result;
  });
  function getBody() {
    var body = document2.body;
    if (!body) {
      body = createElement(isSVG ? "svg" : "body");
      body.fake = true;
    }
    return body;
  }
  function injectElementWithStyles(rule, callback, nodes, testnames) {
    var mod = "modernizr";
    var style;
    var ret;
    var node;
    var docOverflow;
    var div = createElement("div");
    var body = getBody();
    if (parseInt(nodes, 10)) {
      while (nodes--) {
        node = createElement("div");
        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
        div.appendChild(node);
      }
    }
    style = createElement("style");
    style.type = "text/css";
    style.id = "s" + mod;
    (!body.fake ? div : body).appendChild(style);
    body.appendChild(div);
    if (style.styleSheet) {
      style.styleSheet.cssText = rule;
    } else {
      style.appendChild(document2.createTextNode(rule));
    }
    div.id = mod;
    if (body.fake) {
      body.style.background = "";
      body.style.overflow = "hidden";
      docOverflow = docElement.style.overflow;
      docElement.style.overflow = "hidden";
      docElement.appendChild(body);
    }
    ret = callback(div, rule);
    if (body.fake) {
      body.parentNode.removeChild(body);
      docElement.style.overflow = docOverflow;
      docElement.offsetHeight;
    } else {
      div.parentNode.removeChild(div);
    }
    return !!ret;
  }
  var testStyles = ModernizrProto.testStyles = injectElementWithStyles;
  var omPrefixes = "Moz O ms Webkit";
  var cssomPrefixes = ModernizrProto._config.usePrefixes ? omPrefixes.split(" ") : [];
  ModernizrProto._cssomPrefixes = cssomPrefixes;
  var atRule = function(prop) {
    var length = prefixes.length;
    var cssrule = window2.CSSRule;
    var rule;
    if (typeof cssrule === "undefined") {
      return undefined$1;
    }
    if (!prop) {
      return false;
    }
    prop = prop.replace(/^@/, "");
    rule = prop.replace(/-/g, "_").toUpperCase() + "_RULE";
    if (rule in cssrule) {
      return "@" + prop;
    }
    for (var i2 = 0; i2 < length; i2++) {
      var prefix = prefixes[i2];
      var thisRule = prefix.toUpperCase() + "_" + rule;
      if (thisRule in cssrule) {
        return "@-" + prefix.toLowerCase() + "-" + prop;
      }
    }
    return false;
  };
  ModernizrProto.atRule = atRule;
  var domPrefixes = ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(" ") : [];
  ModernizrProto._domPrefixes = domPrefixes;
  function contains(str, substr) {
    return !!~("" + str).indexOf(substr);
  }
  function fnBind(fn, that) {
    return function() {
      return fn.apply(that, arguments);
    };
  }
  function testDOMProps(props, obj, elem) {
    var item;
    for (var i2 in props) {
      if (props[i2] in obj) {
        if (elem === false) {
          return props[i2];
        }
        item = obj[props[i2]];
        if (is(item, "function")) {
          return fnBind(item, elem || obj);
        }
        return item;
      }
    }
    return false;
  }
  var modElem = {
    elem: createElement("modernizr")
  };
  Modernizr._q.push(function() {
    delete modElem.elem;
  });
  var mStyle = {
    style: modElem.elem.style
  };
  Modernizr._q.unshift(function() {
    delete mStyle.style;
  });
  function domToCSS(name) {
    return name.replace(/([A-Z])/g, function(str, m1) {
      return "-" + m1.toLowerCase();
    }).replace(/^ms-/, "-ms-");
  }
  function computedStyle(elem, pseudo, prop) {
    var result;
    if ("getComputedStyle" in window2) {
      result = getComputedStyle.call(window2, elem, pseudo);
      var console2 = window2.console;
      if (result !== null) {
        if (prop) {
          result = result.getPropertyValue(prop);
        }
      } else {
        if (console2) {
          var method = console2.error ? "error" : "log";
          console2[method].call(console2, "getComputedStyle returning null, its possible modernizr test results are inaccurate");
        }
      }
    } else {
      result = !pseudo && elem.currentStyle && elem.currentStyle[prop];
    }
    return result;
  }
  function nativeTestProps(props, value) {
    var i2 = props.length;
    if ("CSS" in window2 && "supports" in window2.CSS) {
      while (i2--) {
        if (window2.CSS.supports(domToCSS(props[i2]), value)) {
          return true;
        }
      }
      return false;
    } else if ("CSSSupportsRule" in window2) {
      var conditionText = [];
      while (i2--) {
        conditionText.push("(" + domToCSS(props[i2]) + ":" + value + ")");
      }
      conditionText = conditionText.join(" or ");
      return injectElementWithStyles("@supports (" + conditionText + ") { #modernizr { position: absolute; } }", function(node) {
        return computedStyle(node, null, "position") == "absolute";
      });
    }
    return undefined$1;
  }
  function testProps(props, prefixed2, value, skipValueTest) {
    skipValueTest = is(skipValueTest, "undefined") ? false : skipValueTest;
    if (!is(value, "undefined")) {
      var result = nativeTestProps(props, value);
      if (!is(result, "undefined")) {
        return result;
      }
    }
    var afterInit, i2, propsLength, prop, before;
    var elems = ["modernizr", "tspan", "samp"];
    while (!mStyle.style && elems.length) {
      afterInit = true;
      mStyle.modElem = createElement(elems.shift());
      mStyle.style = mStyle.modElem.style;
    }
    function cleanElems() {
      if (afterInit) {
        delete mStyle.style;
        delete mStyle.modElem;
      }
    }
    propsLength = props.length;
    for (i2 = 0; i2 < propsLength; i2++) {
      prop = props[i2];
      before = mStyle.style[prop];
      if (contains(prop, "-")) {
        prop = cssToDOM(prop);
      }
      if (mStyle.style[prop] !== undefined$1) {
        if (!skipValueTest && !is(value, "undefined")) {
          try {
            mStyle.style[prop] = value;
          } catch (e) {
          }
          if (mStyle.style[prop] != before) {
            cleanElems();
            return prefixed2 == "pfx" ? prop : true;
          }
        } else {
          cleanElems();
          return prefixed2 == "pfx" ? prop : true;
        }
      }
    }
    cleanElems();
    return false;
  }
  function testPropsAll(prop, prefixed2, elem, value, skipValueTest) {
    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1), props = (prop + " " + cssomPrefixes.join(ucProp + " ") + ucProp).split(" ");
    if (is(prefixed2, "string") || is(prefixed2, "undefined")) {
      return testProps(props, prefixed2, value, skipValueTest);
    } else {
      props = (prop + " " + domPrefixes.join(ucProp + " ") + ucProp).split(" ");
      return testDOMProps(props, prefixed2, elem);
    }
  }
  ModernizrProto.testAllProps = testPropsAll;
  var prefixed = ModernizrProto.prefixed = function(prop, obj, elem) {
    if (prop.indexOf("@") === 0) {
      return atRule(prop);
    }
    if (prop.indexOf("-") != -1) {
      prop = cssToDOM(prop);
    }
    if (!obj) {
      return testPropsAll(prop, "pfx");
    } else {
      return testPropsAll(prop, obj, elem);
    }
  };
  function testAllProps(prop, value, skipValueTest) {
    return testPropsAll(prop, undefined$1, undefined$1, value, skipValueTest);
  }
  ModernizrProto.testAllProps = testAllProps;
  Modernizr.addTest("csstransforms3d", function() {
    return !!testAllProps("perspective", "1px", true);
  });
  Modernizr.addTest("csstransitions", testAllProps("transition", "all", true));
  testRunner();
  delete ModernizrProto.addTest;
  delete ModernizrProto.addAsyncTest;
  for (var i = 0; i < Modernizr._q.length; i++) {
    Modernizr._q[i]();
  }
  window2.Modernizr = Modernizr;
})(window, document);
(function() {
  var event = import_jquery.default.event, findHelper = function(events, types, callback, selector) {
    var t, type, typeHandlers, all, h, handle, namespaces, namespace, match;
    for (t = 0; t < types.length; t++) {
      type = types[t];
      all = type.indexOf(".") < 0;
      if (!all) {
        namespaces = type.split(".");
        type = namespaces.shift();
        namespace = new RegExp("(^|\\.)" + namespaces.slice(0).sort().join("\\.(?:.*\\.)?") + "(\\.|$)");
      }
      typeHandlers = (events[type] || []).slice(0);
      for (h = 0; h < typeHandlers.length; h++) {
        handle = typeHandlers[h];
        match = all || namespace.test(handle.namespace);
        if (match) {
          if (selector) {
            if (handle.selector === selector) {
              callback(type, handle.origHandler || handle.handler);
            }
          } else if (selector === null) {
            callback(type, handle.origHandler || handle.handler, handle.selector);
          } else if (!handle.selector) {
            callback(type, handle.origHandler || handle.handler);
          }
        }
      }
    }
  };
  event.find = function(el, types, selector) {
    var events = (import_jquery.default._data(el) || {}).events, handlers = [];
    if (!events) {
      return handlers;
    }
    findHelper(events, types, function(type, handler) {
      handlers.push(handler);
    }, selector);
    return handlers;
  };
  event.findBySelector = function(el, types) {
    var events = import_jquery.default._data(el).events, selectors = {}, add = function(selector, event2, handler) {
      var select = selectors[selector] || (selectors[selector] = {}), events2 = select[event2] || (select[event2] = []);
      events2.push(handler);
    };
    if (!events) {
      return selectors;
    }
    findHelper(events, types, function(type, handler, selector) {
      add(selector || "", type, handler);
    }, null);
    return selectors;
  };
  event.supportTouch = "ontouchend" in document;
  import_jquery.default.fn.respondsTo = function(events) {
    if (!this.length) {
      return false;
    } else {
      return event.find(this[0], import_jquery.default.isArray(events) ? events : [events]).length > 0;
    }
  };
  import_jquery.default.fn.triggerHandled = function(event2, data) {
    event2 = typeof event2 == "string" ? import_jquery.default.Event(event2) : event2;
    this.trigger(event2, data);
    return event2.handled;
  };
  event.setupHelper = function(types, startingEvent, onFirst) {
    if (!onFirst) {
      onFirst = startingEvent;
      startingEvent = null;
    }
    var add = function(handleObj) {
      var bySelector, selector = handleObj.selector || "";
      if (selector) {
        bySelector = event.find(this, types, selector);
        if (!bySelector.length) {
          (0, import_jquery.default)(this).delegate(selector, startingEvent, onFirst);
        }
      } else {
        if (!event.find(this, types, selector).length) {
          event.add(this, startingEvent, onFirst, {
            selector,
            delegate: this
          });
        }
      }
    }, remove = function(handleObj) {
      var bySelector, selector = handleObj.selector || "";
      if (selector) {
        bySelector = event.find(this, types, selector);
        if (!bySelector.length) {
          (0, import_jquery.default)(this).undelegate(selector, startingEvent, onFirst);
        }
      } else {
        if (!event.find(this, types, selector).length) {
          event.remove(this, startingEvent, onFirst, {
            selector,
            delegate: this
          });
        }
      }
    };
    import_jquery.default.each(types, function() {
      event.special[this] = {
        add,
        remove,
        setup: function() {
        },
        teardown: function() {
        }
      };
    });
  };
})();
(function($2) {
  var isPhantom = /Phantom/.test(navigator.userAgent), supportTouch = !isPhantom && "ontouchend" in document, touchStartEvent = supportTouch ? "touchstart" : "mousedown", touchStopEvent = supportTouch ? "touchend" : "mouseup", touchMoveEvent = supportTouch ? "touchmove" : "mousemove", data = function(event) {
    var d = event.originalEvent.touches ? event.originalEvent.touches[0] : event;
    return {
      time: new Date().getTime(),
      coords: [d.pageX, d.pageY],
      origin: $2(event.target)
    };
  };
  var swipe = $2.event.swipe = {
    delay: 500,
    max: 75,
    min: 30
  };
  $2.event.setupHelper([
    "swipe",
    "swipeleft",
    "swiperight",
    "swipeup",
    "swipedown"
  ], touchStartEvent, function(ev) {
    var start = data(ev), stop, delegate = ev.delegateTarget || ev.currentTarget, selector = ev.handleObj.selector, entered = this;
    function moveHandler(event) {
      if (!start) {
        return;
      }
      stop = data(event);
      if (Math.abs(start.coords[0] - stop.coords[0]) > 10) {
        event.preventDefault();
      }
    }
    $2(document.documentElement).bind(touchMoveEvent, moveHandler).one(touchStopEvent, function(event) {
      $2(this).unbind(touchMoveEvent, moveHandler);
      if (start && stop) {
        var deltaX = Math.abs(start.coords[0] - stop.coords[0]), deltaY = Math.abs(start.coords[1] - stop.coords[1]), distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        if (stop.time - start.time < swipe.delay && distance >= swipe.min) {
          var events = ["swipe"];
          if (deltaX >= swipe.min && deltaY < swipe.min) {
            events.push(start.coords[0] > stop.coords[0] ? "swipeleft" : "swiperight");
          } else if (deltaY >= swipe.min && deltaX < swipe.min) {
            events.push(start.coords[1] < stop.coords[1] ? "swipedown" : "swipeup");
          }
          $2.each($2.event.find(delegate, events, selector), function() {
            this.call(entered, ev, {
              start,
              end: stop
            });
          });
        }
      }
      start = stop = void 0;
    });
  });
})(import_jquery.default);
(function($2, window2, undefined$1) {
  var $window = $2(window2), Modernizr = window2.Modernizr;
  Modernizr.addTest("csstransformspreserve3d", function() {
    var prop = Modernizr.prefixed("transformStyle");
    var val = "preserve-3d";
    var computedStyle;
    if (!prop)
      return false;
    prop = prop.replace(/([A-Z])/g, function(str, m1) {
      return "-" + m1.toLowerCase();
    }).replace(/^ms-/, "-ms-");
    Modernizr.testStyles("#modernizr{" + prop + ":" + val + ";}", function(el, rule) {
      computedStyle = window2.getComputedStyle ? getComputedStyle(el, null).getPropertyValue(prop) : "";
    });
    return computedStyle === val;
  });
  var $event = $2.event, $special, resizeTimeout;
  $special = $event.special.debouncedresize = {
    setup: function() {
      $2(this).on("resize", $special.handler);
    },
    teardown: function() {
      $2(this).off("resize", $special.handler);
    },
    handler: function(event, execAsap) {
      var context = this, args = arguments, dispatch = function() {
        event.type = "debouncedresize";
        $event.dispatch.apply(context, args);
      };
      if (resizeTimeout) {
        clearTimeout(resizeTimeout);
      }
      execAsap ? dispatch() : resizeTimeout = setTimeout(dispatch, $special.threshold);
    },
    threshold: 150
  };
  $2.BookBlock = function(options, element) {
    this.$el = $2(element);
    this._init(options);
  };
  $2.BookBlock.defaults = {
    orientation: "vertical",
    direction: "ltr",
    speed: 1e3,
    easing: "ease-in-out",
    shadows: true,
    shadowSides: 0.2,
    shadowFlip: 0.1,
    circular: false,
    nextEl: "",
    prevEl: "",
    autoplay: false,
    interval: 3e3,
    onEndFlip: function(old, page, isLimit) {
      return false;
    },
    onBeforeFlip: function(page) {
      return false;
    }
  };
  $2.BookBlock.prototype = {
    _init: function(options) {
      this.options = $2.extend(true, {}, $2.BookBlock.defaults, options);
      this.$el.addClass("bb-" + this.options.orientation);
      this.jopaUid = this.$el[0].dataset.uid;
      this.pluginName = `bookblock-${this.jopaUid}`;
      this.$items = this.$el.children(".bb-item").hide();
      this.itemsCount = this.$items.length;
      this.current = 0;
      this.previous = -1;
      this.$current = this.$items.eq(this.current).show();
      this.elWidth = this.$el.width();
      var transEndEventNames = {
        WebkitTransition: "webkitTransitionEnd",
        MozTransition: "transitionend",
        OTransition: "oTransitionEnd",
        msTransition: "MSTransitionEnd",
        transition: "transitionend"
      };
      this.transEndEventName = transEndEventNames[Modernizr.prefixed("transition")] + `.${this.pluginName}`;
      this.support = Modernizr.csstransitions && Modernizr.csstransforms3d && Modernizr.csstransformspreserve3d;
      this._initEvents();
      if (this.options.autoplay) {
        this.options.circular = true;
        this._startSlideshow();
      }
    },
    _initEvents: function() {
      var self = this;
      if (this.options.nextEl !== "") {
        $2(this.options.nextEl).on(`click.${this.pluginName} touchstart.${this.pluginName}`, function() {
          self._action("next");
          return false;
        });
      }
      if (this.options.prevEl !== "") {
        $2(this.options.prevEl).on(`click.${this.pluginName} touchstart.${this.pluginName}`, function() {
          self._action("prev");
          return false;
        });
      }
      $window.on("debouncedresize", function() {
        self.elWidth = self.$el.width();
      });
    },
    _action: function(dir, page) {
      this._stopSlideshow();
      this._navigate(dir, page);
    },
    _navigate: function(dir, page) {
      if (this.isAnimating) {
        return false;
      }
      this.options.onBeforeFlip(this.current);
      this.isAnimating = true;
      this.$current = this.$items.eq(this.current);
      if (page !== undefined$1) {
        this.current = page;
      } else if (dir === "next" && this.options.direction === "ltr" || dir === "prev" && this.options.direction === "rtl") {
        if (!this.options.circular && this.current === this.itemsCount - 1) {
          this.end = true;
        } else {
          this.previous = this.current;
          this.current = this.current < this.itemsCount - 1 ? this.current + 1 : 0;
        }
      } else if (dir === "prev" && this.options.direction === "ltr" || dir === "next" && this.options.direction === "rtl") {
        if (!this.options.circular && this.current === 0) {
          this.end = true;
        } else {
          this.previous = this.current;
          this.current = this.current > 0 ? this.current - 1 : this.itemsCount - 1;
        }
      }
      this.$nextItem = !this.options.circular && this.end ? this.$current : this.$items.eq(this.current);
      if (!this.support) {
        this._layoutNoSupport(dir);
      } else {
        this._layout(dir);
      }
    },
    _layoutNoSupport: function(dir) {
      this.$items.hide();
      this.$nextItem.show();
      this.end = false;
      this.isAnimating = false;
      var isLimit = dir === "next" && this.current === this.itemsCount - 1 || dir === "prev" && this.current === 0;
      this.options.onEndFlip(this.previous, this.current, isLimit);
    },
    _layout: function(dir) {
      var self = this, $s_left = this._addSide("left", dir), $s_middle = this._addSide("middle", dir), $s_right = this._addSide("right", dir), $o_left = $s_left.find("div.bb-overlay"), $o_middle_f = $s_middle.find("div.bb-flipoverlay:first"), $o_middle_b = $s_middle.find("div.bb-flipoverlay:last"), $o_right = $s_right.find("div.bb-overlay"), speed = this.end ? 400 : this.options.speed;
      this.$items.hide();
      this.$el.prepend($s_left, $s_middle, $s_right);
      $s_middle.css({
        transitionDuration: speed + "ms",
        transitionTimingFunction: this.options.easing
      }).on(this.transEndEventName, function(event) {
        if ($2(event.target).hasClass("bb-page")) {
          self.$el.children(".bb-page").remove();
          self.$nextItem.show();
          self.end = false;
          self.isAnimating = false;
          var isLimit = dir === "next" && self.current === self.itemsCount - 1 || dir === "prev" && self.current === 0;
          self.options.onEndFlip(self.previous, self.current, isLimit);
        }
      });
      if (dir === "prev") {
        $s_middle.addClass("bb-flip-initial");
      }
      if (this.options.shadows && !this.end) {
        var o_left_style = dir === "next" ? {
          transition: "opacity " + this.options.speed / 2 + "ms linear " + this.options.speed / 2 + "ms"
        } : {
          transition: "opacity " + this.options.speed / 2 + "ms linear",
          opacity: this.options.shadowSides
        }, o_middle_f_style = dir === "next" ? {
          transition: "opacity " + this.options.speed / 2 + "ms linear"
        } : {
          transition: "opacity " + this.options.speed / 2 + "ms linear " + this.options.speed / 2 + "ms",
          opacity: this.options.shadowFlip
        }, o_middle_b_style = dir === "next" ? {
          transition: "opacity " + this.options.speed / 2 + "ms linear " + this.options.speed / 2 + "ms",
          opacity: this.options.shadowFlip
        } : {
          transition: "opacity " + this.options.speed / 2 + "ms linear"
        }, o_right_style = dir === "next" ? {
          transition: "opacity " + this.options.speed / 2 + "ms linear",
          opacity: this.options.shadowSides
        } : {
          transition: "opacity " + this.options.speed / 2 + "ms linear " + this.options.speed / 2 + "ms"
        };
        $o_middle_f.css(o_middle_f_style);
        $o_middle_b.css(o_middle_b_style);
        $o_left.css(o_left_style);
        $o_right.css(o_right_style);
      }
      setTimeout(function() {
        $s_middle.addClass(self.end ? "bb-flip-" + dir + "-end" : "bb-flip-" + dir);
        if (self.options.shadows && !self.end) {
          $o_middle_f.css({
            opacity: dir === "next" ? self.options.shadowFlip : 0
          });
          $o_middle_b.css({
            opacity: dir === "next" ? 0 : self.options.shadowFlip
          });
          $o_left.css({
            opacity: dir === "next" ? self.options.shadowSides : 0
          });
          $o_right.css({
            opacity: dir === "next" ? 0 : self.options.shadowSides
          });
        }
      }, 25);
    },
    _addSide: function(side, dir) {
      var $side;
      switch (side) {
        case "left":
          $side = $2('<div class="bb-page"><div class="bb-back"><div class="bb-outer"><div class="bb-content"><div class="bb-inner">' + (dir === "next" ? this.$current.html() : this.$nextItem.html()) + '</div></div><div class="bb-overlay"></div></div></div></div>').css("z-index", 102);
          break;
        case "middle":
          $side = $2('<div class="bb-page"><div class="bb-front"><div class="bb-outer"><div class="bb-content"><div class="bb-inner">' + (dir === "next" ? this.$current.html() : this.$nextItem.html()) + '</div></div><div class="bb-flipoverlay"></div></div></div><div class="bb-back"><div class="bb-outer"><div class="bb-content" style="width:' + this.elWidth + 'px"><div class="bb-inner">' + (dir === "next" ? this.$nextItem.html() : this.$current.html()) + '</div></div><div class="bb-flipoverlay"></div></div></div></div>').css("z-index", 103);
          break;
        case "right":
          $side = $2('<div class="bb-page"><div class="bb-front"><div class="bb-outer"><div class="bb-content"><div class="bb-inner">' + (dir === "next" ? this.$nextItem.html() : this.$current.html()) + '</div></div><div class="bb-overlay"></div></div></div></div>').css("z-index", 101);
          break;
      }
      return $side;
    },
    _startSlideshow: function() {
      var self = this;
      this.slideshow = setTimeout(function() {
        self._navigate("next");
        if (self.options.autoplay) {
          self._startSlideshow();
        }
      }, this.options.interval);
    },
    _stopSlideshow: function() {
      if (this.options.autoplay) {
        clearTimeout(this.slideshow);
        this.options.autoplay = false;
      }
    },
    next: function() {
      this._action(this.options.direction === "ltr" ? "next" : "prev");
    },
    prev: function() {
      this._action(this.options.direction === "ltr" ? "prev" : "next");
    },
    jump: function(page) {
      page -= 1;
      if (page === this.current || page >= this.itemsCount || page < 0) {
        return false;
      }
      var dir;
      if (this.options.direction === "ltr") {
        dir = page > this.current ? "next" : "prev";
      } else {
        dir = page > this.current ? "prev" : "next";
      }
      this._action(dir, page);
    },
    last: function() {
      this.jump(this.itemsCount);
    },
    first: function() {
      this.jump(1);
    },
    isActive: function() {
      return this.isAnimating;
    },
    update: function() {
      var $currentItem = this.$items.eq(this.current);
      this.$items = this.$el.children(".bb-item");
      this.itemsCount = this.$items.length;
      this.current = $currentItem.index();
    },
    destroy: function() {
      if (this.options.autoplay) {
        this._stopSlideshow();
      }
      this.$el.removeClass("bb-" + this.options.orientation);
      this.$items.show();
      if (this.options.nextEl !== "") {
        $2(this.options.nextEl).off(`.${this.pluginName}`);
      }
      if (this.options.prevEl !== "") {
        $2(this.options.prevEl).off(`.${this.pluginName}`);
      }
      $window.off("debouncedresize");
    }
  };
  var logError = function(message) {
    if (window2.console) {
      window2.console.error(message);
    }
  };
  $2.fn.bookblock = function(options) {
    if (typeof options === "string") {
      var args = Array.prototype.slice.call(arguments, 1);
      this.each(function() {
        var instance = $2.data(this, `bookblock-${this.dataset.uid}`);
        if (!instance) {
          logError("cannot call methods on bookblock prior to initialization; attempted to call method '" + options + "'");
          return;
        }
        if (!$2.isFunction(instance[options]) || options.charAt(0) === "_") {
          logError("no such method '" + options + "' for bookblock instance");
          return;
        }
        instance[options].apply(instance, args);
      });
    } else {
      this.each(function() {
        var instance = $2.data(this, `bookblock-${this.dataset.uid}`);
        if (instance) {
          instance._init(instance.options);
        } else {
          instance = $2.data(this, `bookblock-${this.dataset.uid}`, new $2.BookBlock(options, this));
        }
      });
    }
    return this;
  };
})(import_jquery.default, window);
var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
var buffers = {};
var random = (bytes) => {
  let buffer = buffers[bytes];
  if (!buffer) {
    buffer = Buffer.allocUnsafe(bytes);
    if (bytes <= 255)
      buffers[bytes] = buffer;
  }
  return import_crypto.default.randomFillSync(buffer);
};
var nanoid = (size = 21) => {
  let bytes = random(size);
  let id = "";
  while (size--) {
    id += urlAlphabet[bytes[size] & 63];
  }
  return id;
};
var script = {
  name: "Bookblock",
  data() {
    return {
      nanoid: nanoid(),
      componentKey: 0
    };
  },
  props: {
    options: {
      type: Object,
      default: () => {
      }
    }
  },
  watch: {
    defaultOptions: {
      handler(val) {
        this.forceRerender(val);
      },
      deep: true,
      immediate: true
    }
  },
  computed: {
    uid() {
      return `jopa-${this.nanoid}`;
    },
    selector() {
      return `div[data-uid=${this.uid}]`;
    },
    defaultOptions() {
      return {
        orientation: "horizontal",
        direction: "ltr",
        speed: 1e3,
        easing: "ease-in-out",
        shadows: true,
        shadowSides: 0.2,
        shadowFlip: 0.1,
        circular: false,
        nextEl: "",
        prevEl: "",
        autoplay: false,
        interval: 3e3,
        onEndFlip: function(page, isLimit) {
          return false;
        },
        onBeforeFlip: function(page) {
          return false;
        },
        ...this.options
      };
    }
  },
  mounted() {
    this.forceRerender(this.defaultOptions);
  },
  methods: {
    next() {
      (0, import_jquery.default)(this.selector).bookblock("next");
    },
    prev() {
      (0, import_jquery.default)(this.selector).bookblock("prev");
    },
    jump(position) {
      (0, import_jquery.default)(this.selector).bookblock("jump", position);
    },
    first() {
      (0, import_jquery.default)(this.selector).bookblock("first");
    },
    last() {
      (0, import_jquery.default)(this.selector).bookblock("last");
    },
    update() {
      console.log("updated");
      (0, import_jquery.default)(this.selector).bookblock("update");
    },
    destroy() {
      (0, import_jquery.default)(this.selector).bookblock("destroy");
    },
    forceRerender(val) {
      this.nanoid = nanoid();
      this.componentKey += 1;
      this.$nextTick(() => (0, import_jquery.default)(this.selector).bookblock(val));
    }
  }
};
function normalizeComponent(template, style, script2, scopeId, isFunctionalTemplate, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
  if (typeof shadowMode !== "boolean") {
    createInjectorSSR = createInjector;
    createInjector = shadowMode;
    shadowMode = false;
  }
  const options = typeof script2 === "function" ? script2.options : script2;
  if (template && template.render) {
    options.render = template.render;
    options.staticRenderFns = template.staticRenderFns;
    options._compiled = true;
    if (isFunctionalTemplate) {
      options.functional = true;
    }
  }
  if (scopeId) {
    options._scopeId = scopeId;
  }
  let hook;
  if (moduleIdentifier) {
    hook = function(context) {
      context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
      if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
        context = __VUE_SSR_CONTEXT__;
      }
      if (style) {
        style.call(this, createInjectorSSR(context));
      }
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    };
    options._ssrRegister = hook;
  } else if (style) {
    hook = shadowMode ? function(context) {
      style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
    } : function(context) {
      style.call(this, createInjector(context));
    };
  }
  if (hook) {
    if (options.functional) {
      const originalRender = options.render;
      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context);
        return originalRender(h, context);
      };
    } else {
      const existing = options.beforeCreate;
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
    }
  }
  return script2;
}
var __vue_script__ = script;
var __vue_render__ = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", {
    key: _vm.componentKey,
    attrs: {
      "data-uid": _vm.uid
    }
  }, [_vm._t("default")], 2);
};
var __vue_staticRenderFns__ = [];
var __vue_inject_styles__ = void 0;
var __vue_scope_id__ = void 0;
var __vue_module_identifier__ = void 0;
var __vue_is_functional_template__ = false;
var __vue_component__ = normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, void 0, void 0, void 0);
var BookblockPlugin = pluginFactory({
  components: {
    FwBookblock: __vue_component__
  }
});
var script$1 = {
  name: "Bookblock2",
  data() {
    return {
      nanoid: nanoid(),
      componentKey: 0
    };
  },
  props: {
    options: {
      type: Object,
      default: () => {
      }
    },
    pages: {
      type: Array,
      default: () => []
    }
  },
  watch: {
    defaultOptions: {
      handler(val) {
        this.forceRerender(val);
      },
      deep: true,
      immediate: true
    },
    pages: {
      handler() {
        this.forceRerender(this.defaultOptions);
      },
      deep: true,
      immediate: true
    }
  },
  computed: {
    uid() {
      return `jopa-${this.nanoid}`;
    },
    selector() {
      return `div[data-uid=${this.uid}]`;
    },
    defaultOptions() {
      return {
        orientation: "horizontal",
        direction: "ltr",
        speed: 1e3,
        easing: "ease-in-out",
        shadows: true,
        shadowSides: 0.2,
        shadowFlip: 0.1,
        circular: false,
        nextEl: "",
        prevEl: "",
        autoplay: false,
        interval: 3e3,
        onEndFlip: function(page, isLimit) {
          return false;
        },
        onBeforeFlip: function(page) {
          return false;
        },
        ...this.options
      };
    }
  },
  mounted() {
    this.forceRerender(this.defaultOptions);
  },
  methods: {
    next() {
      (0, import_jquery.default)(this.selector).bookblock("next");
    },
    prev() {
      (0, import_jquery.default)(this.selector).bookblock("prev");
    },
    jump(position) {
      (0, import_jquery.default)(this.selector).bookblock("jump", position);
    },
    first() {
      (0, import_jquery.default)(this.selector).bookblock("first");
    },
    last() {
      (0, import_jquery.default)(this.selector).bookblock("last");
    },
    update() {
      console.log("updated");
      (0, import_jquery.default)(this.selector).bookblock("update");
    },
    destroy() {
      (0, import_jquery.default)(this.selector).bookblock("destroy");
    },
    forceRerender(val) {
      if (this.pages.length === 1) {
        val.autoplay = false;
      }
      this.componentKey += 1;
      this.$nextTick(() => {
        (0, import_jquery.default)(this.selector).bookblock(val);
      });
    }
  }
};
var __vue_script__$1 = script$1;
var __vue_render__$1 = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", {
    key: _vm.componentKey,
    attrs: {
      "data-uid": _vm.uid
    }
  }, _vm._l(_vm.pages, function(item, index) {
    return _c("div", {
      key: index + "-" + _vm.nanoid,
      staticClass: "bb-item"
    }, [_vm._t("page", null, null, {
      item,
      index
    })], 2);
  }), 0);
};
var __vue_staticRenderFns__$1 = [];
var __vue_inject_styles__$1 = void 0;
var __vue_scope_id__$1 = void 0;
var __vue_module_identifier__$1 = void 0;
var __vue_is_functional_template__$1 = false;
var __vue_component__$1 = normalizeComponent({
  render: __vue_render__$1,
  staticRenderFns: __vue_staticRenderFns__$1
}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, false, void 0, void 0, void 0);
var Bookblock2Plugin = pluginFactory({
  components: {
    FwBookblock2: __vue_component__$1
  }
});
(function($2) {
  var has3d, hasRot, vendor = "", version = "4.1.0", PI = Math.PI, A90 = PI / 2, isTouch = "ontouchstart" in window, mouseEvents = isTouch ? {
    down: "touchstart",
    move: "touchmove",
    up: "touchend",
    over: "touchstart",
    out: "touchend"
  } : {
    down: "mousedown",
    move: "mousemove",
    up: "mouseup",
    over: "mouseover",
    out: "mouseout"
  }, corners = {
    backward: ["bl", "tl"],
    forward: ["br", "tr"],
    all: ["tl", "bl", "tr", "br", "l", "r"]
  }, displays = ["single", "double"], directions = ["ltr", "rtl"], turnOptions = {
    acceleration: true,
    display: "double",
    duration: 600,
    page: 1,
    gradients: true,
    turnCorners: "bl,br",
    when: null
  }, flipOptions = {
    cornerSize: 100
  }, pagesInDOM = 6, turnMethods = {
    init: function(options) {
      has3d = "WebKitCSSMatrix" in window || "MozPerspective" in document.body.style;
      hasRot = rotationAvailable();
      vendor = getPrefix();
      var i, pageNum = 0, data = this.data(), ch = this.children();
      options = $2.extend({
        width: this.width(),
        height: this.height(),
        direction: this.attr("dir") || this.css("direction") || "ltr"
      }, turnOptions, options);
      data.opts = options;
      data.pageObjs = {};
      data.pages = {};
      data.pageWrap = {};
      data.pageZoom = {};
      data.pagePlace = {};
      data.pageMv = [];
      data.zoom = 1;
      data.totalPages = options.pages || 0;
      data.eventHandlers = {
        touchStart: $2.proxy(turnMethods._touchStart, this),
        touchMove: $2.proxy(turnMethods._touchMove, this),
        touchEnd: $2.proxy(turnMethods._touchEnd, this),
        start: $2.proxy(turnMethods._eventStart, this)
      };
      if (options.when) {
        for (i in options.when)
          if (has(i, options.when))
            this.bind(i, options.when[i]);
      }
      this.css({
        position: "relative",
        width: options.width,
        height: options.height
      });
      this.turn("display", options.display);
      if (options.direction !== "")
        this.turn("direction", options.direction);
      if (has3d && !isTouch && options.acceleration)
        this.transform(translate(0, 0, true));
      for (i = 0; i < ch.length; i++) {
        if ($2(ch[i]).attr("ignore") != "1") {
          this.turn("addPage", ch[i], ++pageNum);
        }
      }
      $2(this).bind(mouseEvents.down, data.eventHandlers.touchStart).bind("end", turnMethods._eventEnd).bind("pressed", turnMethods._eventPressed).bind("released", turnMethods._eventReleased).bind("flip", turnMethods._flip);
      $2(this).parent().bind("start", data.eventHandlers.start);
      $2(document).bind(mouseEvents.move, data.eventHandlers.touchMove).bind(mouseEvents.up, data.eventHandlers.touchEnd);
      this.turn("page", options.page);
      data.done = true;
      return this;
    },
    addPage: function(element, page) {
      var currentPage, className, incPages = false, data = this.data(), lastPage = data.totalPages + 1;
      if (data.destroying)
        return false;
      if (currentPage = /\bp([0-9]+)\b/.exec($2(element).attr("class")))
        page = parseInt(currentPage[1], 10);
      if (page) {
        if (page == lastPage)
          incPages = true;
        else if (page > lastPage)
          throw turnError('Page "' + page + '" cannot be inserted');
      } else {
        page = lastPage;
        incPages = true;
      }
      if (page >= 1 && page <= lastPage) {
        if (data.display == "double")
          className = page % 2 ? " odd" : " even";
        else
          className = "";
        if (data.done)
          this.turn("stop");
        if (page in data.pageObjs)
          turnMethods._movePages.call(this, page, 1);
        if (incPages)
          data.totalPages = lastPage;
        data.pageObjs[page] = $2(element).css({
          float: "left"
        }).addClass("page p" + page + className);
        if (!hasHardPage() && data.pageObjs[page].hasClass("hard")) {
          data.pageObjs[page].removeClass("hard");
        }
        turnMethods._addPage.call(this, page);
        turnMethods._removeFromDOM.call(this);
      }
      return this;
    },
    _addPage: function(page) {
      var data = this.data(), element = data.pageObjs[page];
      if (element)
        if (turnMethods._necessPage.call(this, page)) {
          if (!data.pageWrap[page]) {
            data.pageWrap[page] = $2("<div/>", {
              class: "page-wrapper",
              page,
              css: {
                position: "absolute",
                overflow: "hidden"
              }
            });
            this.append(data.pageWrap[page]);
            if (!data.pagePlace[page]) {
              data.pagePlace[page] = page;
              data.pageObjs[page].appendTo(data.pageWrap[page]);
            }
            var prop = turnMethods._pageSize.call(this, page, true);
            element.css({
              width: prop.width,
              height: prop.height
            });
            data.pageWrap[page].css(prop);
          }
          if (data.pagePlace[page] == page) {
            turnMethods._makeFlip.call(this, page);
          }
        } else {
          data.pagePlace[page] = 0;
          if (data.pageObjs[page])
            data.pageObjs[page].remove();
        }
    },
    hasPage: function(page) {
      return has(page, this.data().pageObjs);
    },
    center: function(page) {
      var data = this.data(), size = $2(this).turn("size"), left = 0;
      if (!data.noCenter) {
        if (data.display == "double") {
          var view = this.turn("view", page || data.tpage || data.page);
          if (data.direction == "ltr") {
            if (!view[0])
              left -= size.width / 4;
            else if (!view[1])
              left += size.width / 4;
          } else {
            if (!view[0])
              left += size.width / 4;
            else if (!view[1])
              left -= size.width / 4;
          }
        }
        $2(this).css({
          marginLeft: left
        });
      }
      return this;
    },
    destroy: function() {
      var flipbook = this, data = this.data(), events = ["end", "first", "flip", "last", "pressed", "released", "start", "turning", "turned", "zooming", "missing"];
      if (trigger("destroying", this) == "prevented")
        return;
      data.destroying = true;
      $2.each(events, function(index, eventName) {
        flipbook.unbind(eventName);
      });
      this.parent().unbind("start", data.eventHandlers.start);
      $2(document).unbind(mouseEvents.move, data.eventHandlers.touchMove).unbind(mouseEvents.up, data.eventHandlers.touchEnd);
      while (data.totalPages !== 0) {
        this.turn("removePage", data.totalPages);
      }
      if (data.fparent)
        data.fparent.remove();
      if (data.shadow)
        data.shadow.remove();
      this.removeData();
      data = null;
      return this;
    },
    is: function() {
      return typeof this.data().pages == "object";
    },
    zoom: function(newZoom) {
      var data = this.data();
      if (typeof newZoom == "number") {
        if (newZoom < 1e-3 || newZoom > 100)
          throw turnError(newZoom + " is not a value for zoom");
        if (trigger("zooming", this, [newZoom, data.zoom]) == "prevented")
          return this;
        var size = this.turn("size"), currentView = this.turn("view"), iz = 1 / data.zoom, newWidth = Math.round(size.width * iz * newZoom), newHeight = Math.round(size.height * iz * newZoom);
        data.zoom = newZoom;
        $2(this).turn("stop").turn("size", newWidth, newHeight);
        if (data.opts.autoCenter)
          this.turn("center");
        turnMethods._updateShadow.call(this);
        for (var i = 0; i < currentView.length; i++) {
          if (currentView[i] && data.pageZoom[currentView[i]] != data.zoom) {
            this.trigger("zoomed", [currentView[i], currentView, data.pageZoom[currentView[i]], data.zoom]);
            data.pageZoom[currentView[i]] = data.zoom;
          }
        }
        return this;
      } else
        return data.zoom;
    },
    _pageSize: function(page, position) {
      var data = this.data(), prop = {};
      if (data.display == "single") {
        prop.width = this.width();
        prop.height = this.height();
        if (position) {
          prop.top = 0;
          prop.left = 0;
          prop.right = "auto";
        }
      } else {
        var pageWidth = this.width() / 2, pageHeight = this.height();
        if (data.pageObjs[page].hasClass("own-size")) {
          prop.width = data.pageObjs[page].width();
          prop.height = data.pageObjs[page].height();
        } else {
          prop.width = pageWidth;
          prop.height = pageHeight;
        }
        if (position) {
          var odd = page % 2;
          prop.top = (pageHeight - prop.height) / 2;
          if (data.direction == "ltr") {
            prop[odd ? "right" : "left"] = pageWidth - prop.width;
            prop[odd ? "left" : "right"] = "auto";
          } else {
            prop[odd ? "left" : "right"] = pageWidth - prop.width;
            prop[odd ? "right" : "left"] = "auto";
          }
        }
      }
      return prop;
    },
    _makeFlip: function(page) {
      var data = this.data();
      if (!data.pages[page] && data.pagePlace[page] == page) {
        var single = data.display == "single", odd = page % 2;
        data.pages[page] = data.pageObjs[page].css(turnMethods._pageSize.call(this, page)).flip({
          page,
          next: odd || single ? page + 1 : page - 1,
          turn: this
        }).flip("disable", data.disabled);
        turnMethods._setPageLoc.call(this, page);
        data.pageZoom[page] = data.zoom;
      }
      return data.pages[page];
    },
    _makeRange: function() {
      var page, range, data = this.data();
      if (data.totalPages < 1)
        return;
      range = this.turn("range");
      for (page = range[0]; page <= range[1]; page++)
        turnMethods._addPage.call(this, page);
    },
    range: function(page) {
      var remainingPages, left, right, view, data = this.data();
      page = page || data.tpage || data.page || 1;
      view = turnMethods._view.call(this, page);
      if (page < 1 || page > data.totalPages)
        throw turnError('"' + page + '" is not a valid page');
      view[1] = view[1] || view[0];
      if (view[0] >= 1 && view[1] <= data.totalPages) {
        remainingPages = Math.floor((pagesInDOM - 2) / 2);
        if (data.totalPages - view[1] > view[0]) {
          left = Math.min(view[0] - 1, remainingPages);
          right = 2 * remainingPages - left;
        } else {
          right = Math.min(data.totalPages - view[1], remainingPages);
          left = 2 * remainingPages - right;
        }
      } else {
        left = pagesInDOM - 1;
        right = pagesInDOM - 1;
      }
      return [Math.max(1, view[0] - left), Math.min(data.totalPages, view[1] + right)];
    },
    _necessPage: function(page) {
      if (page === 0)
        return true;
      var range = this.turn("range");
      return this.data().pageObjs[page].hasClass("fixed") || page >= range[0] && page <= range[1];
    },
    _removeFromDOM: function() {
      var page, data = this.data();
      for (page in data.pageWrap)
        if (has(page, data.pageWrap) && !turnMethods._necessPage.call(this, page))
          turnMethods._removePageFromDOM.call(this, page);
    },
    _removePageFromDOM: function(page) {
      var data = this.data();
      if (data.pages[page]) {
        var dd = data.pages[page].data();
        flipMethods._moveFoldingPage.call(data.pages[page], false);
        if (dd.f && dd.f.fwrapper)
          dd.f.fwrapper.remove();
        data.pages[page].removeData();
        data.pages[page].remove();
        delete data.pages[page];
      }
      if (data.pageObjs[page])
        data.pageObjs[page].remove();
      if (data.pageWrap[page]) {
        data.pageWrap[page].remove();
        delete data.pageWrap[page];
      }
      turnMethods._removeMv.call(this, page);
      delete data.pagePlace[page];
      delete data.pageZoom[page];
    },
    removePage: function(page) {
      var data = this.data();
      if (page == "*") {
        while (data.totalPages !== 0) {
          this.turn("removePage", data.totalPages);
        }
      } else {
        if (page < 1 || page > data.totalPages)
          throw turnError("The page " + page + " doesn't exist");
        if (data.pageObjs[page]) {
          this.turn("stop");
          turnMethods._removePageFromDOM.call(this, page);
          delete data.pageObjs[page];
        }
        turnMethods._movePages.call(this, page, -1);
        data.totalPages = data.totalPages - 1;
        if (data.page > data.totalPages) {
          data.page = null;
          turnMethods._fitPage.call(this, data.totalPages);
        } else {
          turnMethods._makeRange.call(this);
          this.turn("update");
        }
      }
      return this;
    },
    _movePages: function(from, change) {
      var page, that = this, data = this.data(), single = data.display == "single", move = function(page2) {
        var next = page2 + change, odd = next % 2, className = odd ? " odd " : " even ";
        if (data.pageObjs[page2])
          data.pageObjs[next] = data.pageObjs[page2].removeClass("p" + page2 + " odd even").addClass("p" + next + className);
        if (data.pagePlace[page2] && data.pageWrap[page2]) {
          data.pagePlace[next] = next;
          if (data.pageObjs[next].hasClass("fixed"))
            data.pageWrap[next] = data.pageWrap[page2].attr("page", next);
          else
            data.pageWrap[next] = data.pageWrap[page2].css(turnMethods._pageSize.call(that, next, true)).attr("page", next);
          if (data.pages[page2])
            data.pages[next] = data.pages[page2].flip("options", {
              page: next,
              next: single || odd ? next + 1 : next - 1
            });
          if (change) {
            delete data.pages[page2];
            delete data.pagePlace[page2];
            delete data.pageZoom[page2];
            delete data.pageObjs[page2];
            delete data.pageWrap[page2];
          }
        }
      };
      if (change > 0)
        for (page = data.totalPages; page >= from; page--)
          move(page);
      else
        for (page = from; page <= data.totalPages; page++)
          move(page);
    },
    display: function(display) {
      var data = this.data(), currentDisplay = data.display;
      if (display === void 0) {
        return currentDisplay;
      } else {
        if ($2.inArray(display, displays) == -1)
          throw turnError('"' + display + '" is not a value for display');
        switch (display) {
          case "single":
            if (!data.pageObjs[0]) {
              this.turn("stop").css({
                overflow: "hidden"
              });
              data.pageObjs[0] = $2("<div />", {
                class: "page p-temporal"
              }).css({
                width: this.width(),
                height: this.height()
              }).appendTo(this);
            }
            this.addClass("shadow");
            break;
          case "double":
            if (data.pageObjs[0]) {
              this.turn("stop").css({
                overflow: ""
              });
              data.pageObjs[0].remove();
              delete data.pageObjs[0];
            }
            this.removeClass("shadow");
            break;
        }
        data.display = display;
        if (currentDisplay) {
          var size = this.turn("size");
          turnMethods._movePages.call(this, 1, 0);
          this.turn("size", size.width, size.height).turn("update");
        }
        return this;
      }
    },
    direction: function(dir) {
      var data = this.data();
      if (dir === void 0) {
        return data.direction;
      } else {
        dir = dir.toLowerCase();
        if ($2.inArray(dir, directions) == -1)
          throw turnError('"' + dir + '" is not a value for direction');
        if (dir == "rtl") {
          $2(this).attr("dir", "ltr").css({
            direction: "ltr"
          });
        }
        data.direction = dir;
        if (data.done)
          this.turn("size", $2(this).width(), $2(this).height());
        return this;
      }
    },
    animating: function() {
      return this.data().pageMv.length > 0;
    },
    corner: function() {
      var corner, page, data = this.data();
      for (page in data.pages) {
        if (has(page, data.pages)) {
          if (corner = data.pages[page].flip("corner")) {
            return corner;
          }
        }
      }
      return false;
    },
    data: function() {
      return this.data();
    },
    disable: function(disable) {
      var page, data = this.data(), view = this.turn("view");
      data.disabled = disable === void 0 || disable === true;
      for (page in data.pages) {
        if (has(page, data.pages))
          data.pages[page].flip("disable", data.disabled ? true : $2.inArray(parseInt(page, 10), view) == -1);
      }
      return this;
    },
    disabled: function(disable) {
      if (disable === void 0) {
        return this.data().disabled === true;
      } else {
        return this.turn("disable", disable);
      }
    },
    size: function(width, height) {
      if (width === void 0 || height === void 0) {
        return {
          width: this.width(),
          height: this.height()
        };
      } else {
        this.turn("stop");
        var page, prop, data = this.data(), pageWidth = data.display == "double" ? width / 2 : width;
        this.css({
          width,
          height
        });
        if (data.pageObjs[0])
          data.pageObjs[0].css({
            width: pageWidth,
            height
          });
        for (page in data.pageWrap) {
          if (!has(page, data.pageWrap))
            continue;
          prop = turnMethods._pageSize.call(this, page, true);
          data.pageObjs[page].css({
            width: prop.width,
            height: prop.height
          });
          data.pageWrap[page].css(prop);
          if (data.pages[page])
            data.pages[page].css({
              width: prop.width,
              height: prop.height
            });
        }
        this.turn("resize");
        return this;
      }
    },
    resize: function() {
      var page, data = this.data();
      if (data.pages[0]) {
        data.pageWrap[0].css({
          left: -this.width()
        });
        data.pages[0].flip("resize", true);
      }
      for (page = 1; page <= data.totalPages; page++)
        if (data.pages[page])
          data.pages[page].flip("resize", true);
      turnMethods._updateShadow.call(this);
      if (data.opts.autoCenter)
        this.turn("center");
    },
    _removeMv: function(page) {
      var i, data = this.data();
      for (i = 0; i < data.pageMv.length; i++)
        if (data.pageMv[i] == page) {
          data.pageMv.splice(i, 1);
          return true;
        }
      return false;
    },
    _addMv: function(page) {
      var data = this.data();
      turnMethods._removeMv.call(this, page);
      data.pageMv.push(page);
    },
    _view: function(page) {
      var data = this.data();
      page = page || data.page;
      if (data.display == "double")
        return page % 2 ? [page - 1, page] : [page, page + 1];
      else
        return [page];
    },
    view: function(page) {
      var data = this.data(), view = turnMethods._view.call(this, page);
      if (data.display == "double")
        return [view[0] > 0 ? view[0] : 0, view[1] <= data.totalPages ? view[1] : 0];
      else
        return [view[0] > 0 && view[0] <= data.totalPages ? view[0] : 0];
    },
    stop: function(ignore, animate) {
      if (this.turn("animating")) {
        var i, opts, page, data = this.data();
        if (data.tpage) {
          data.page = data.tpage;
          delete data["tpage"];
        }
        for (i = 0; i < data.pageMv.length; i++) {
          if (!data.pageMv[i] || data.pageMv[i] === ignore)
            continue;
          page = data.pages[data.pageMv[i]];
          opts = page.data().f.opts;
          page.flip("hideFoldedPage", animate);
          if (!animate)
            flipMethods._moveFoldingPage.call(page, false);
          if (opts.force) {
            opts.next = opts.page % 2 === 0 ? opts.page - 1 : opts.page + 1;
            delete opts["force"];
          }
        }
      }
      this.turn("update");
      return this;
    },
    pages: function(pages) {
      var data = this.data();
      if (pages) {
        if (pages < data.totalPages) {
          for (var page = data.totalPages; page > pages; page--)
            this.turn("removePage", page);
        }
        data.totalPages = pages;
        turnMethods._fitPage.call(this, data.page);
        return this;
      } else
        return data.totalPages;
    },
    _missing: function(page) {
      var data = this.data();
      if (data.totalPages < 1)
        return;
      var p, range = this.turn("range", page), missing = [];
      for (p = range[0]; p <= range[1]; p++) {
        if (!data.pageObjs[p])
          missing.push(p);
      }
      if (missing.length > 0)
        this.trigger("missing", [missing]);
    },
    _fitPage: function(page) {
      var data = this.data(), newView = this.turn("view", page);
      turnMethods._missing.call(this, page);
      if (!data.pageObjs[page])
        return;
      data.page = page;
      this.turn("stop");
      for (var i = 0; i < newView.length; i++) {
        if (newView[i] && data.pageZoom[newView[i]] != data.zoom) {
          this.trigger("zoomed", [newView[i], newView, data.pageZoom[newView[i]], data.zoom]);
          data.pageZoom[newView[i]] = data.zoom;
        }
      }
      turnMethods._removeFromDOM.call(this);
      turnMethods._makeRange.call(this);
      turnMethods._updateShadow.call(this);
      this.trigger("turned", [page, newView]);
      this.turn("update");
      if (data.opts.autoCenter)
        this.turn("center");
    },
    _turnPage: function(page) {
      var current, next, data = this.data(), place = data.pagePlace[page], view = this.turn("view"), newView = this.turn("view", page);
      if (data.page != page) {
        var currentPage = data.page;
        if (trigger("turning", this, [page, newView]) == "prevented") {
          if (currentPage == data.page && $2.inArray(place, data.pageMv) != -1)
            data.pages[place].flip("hideFoldedPage", true);
          return;
        }
        if ($2.inArray(1, newView) != -1)
          this.trigger("first");
        if ($2.inArray(data.totalPages, newView) != -1)
          this.trigger("last");
      }
      if (data.display == "single") {
        current = view[0];
        next = newView[0];
      } else if (view[1] && page > view[1]) {
        current = view[1];
        next = newView[0];
      } else if (view[0] && page < view[0]) {
        current = view[0];
        next = newView[1];
      }
      var optsCorners = data.opts.turnCorners.split(","), flipData = data.pages[current].data().f, opts = flipData.opts, actualPoint = flipData.point;
      turnMethods._missing.call(this, page);
      if (!data.pageObjs[page])
        return;
      this.turn("stop");
      data.page = page;
      turnMethods._makeRange.call(this);
      data.tpage = next;
      if (opts.next != next) {
        opts.next = next;
        opts.force = true;
      }
      this.turn("update");
      flipData.point = actualPoint;
      if (flipData.effect == "hard") {
        if (data.direction == "ltr")
          data.pages[current].flip("turnPage", page > current ? "r" : "l");
        else
          data.pages[current].flip("turnPage", page > current ? "l" : "r");
      } else {
        if (data.direction == "ltr")
          data.pages[current].flip("turnPage", optsCorners[page > current ? 1 : 0]);
        else
          data.pages[current].flip("turnPage", optsCorners[page > current ? 0 : 1]);
      }
    },
    page: function(page) {
      var data = this.data();
      if (page === void 0) {
        return data.page;
      } else {
        if (!data.disabled && !data.destroying) {
          page = parseInt(page, 10);
          if (page > 0 && page <= data.totalPages) {
            if (page != data.page) {
              if (!data.done || $2.inArray(page, this.turn("view")) != -1)
                turnMethods._fitPage.call(this, page);
              else
                turnMethods._turnPage.call(this, page);
            }
            return this;
          } else {
            throw turnError("The page " + page + " does not exist");
          }
        }
      }
    },
    next: function() {
      return this.turn("page", Math.min(this.data().totalPages, turnMethods._view.call(this, this.data().page).pop() + 1));
    },
    previous: function() {
      return this.turn("page", Math.max(1, turnMethods._view.call(this, this.data().page).shift() - 1));
    },
    peel: function(corner, animate) {
      var data = this.data(), view = this.turn("view");
      animate = animate === void 0 ? true : animate === true;
      if (corner === false) {
        this.turn("stop", null, animate);
      } else {
        if (data.display == "single") {
          data.pages[data.page].flip("peel", corner, animate);
        } else {
          var page;
          if (data.direction == "ltr") {
            page = corner.indexOf("l") != -1 ? view[0] : view[1];
          } else {
            page = corner.indexOf("l") != -1 ? view[1] : view[0];
          }
          if (data.pages[page])
            data.pages[page].flip("peel", corner, animate);
        }
      }
      return this;
    },
    _addMotionPage: function() {
      var opts = $2(this).data().f.opts, turn = opts.turn, dd = turn.data();
      turnMethods._addMv.call(turn, opts.page);
    },
    _eventStart: function(e, opts, corner) {
      var data = opts.turn.data(), actualZoom = data.pageZoom[opts.page];
      if (e.isDefaultPrevented()) {
        turnMethods._updateShadow.call(opts.turn);
        return;
      }
      if (actualZoom && actualZoom != data.zoom) {
        opts.turn.trigger("zoomed", [opts.page, opts.turn.turn("view", opts.page), actualZoom, data.zoom]);
        data.pageZoom[opts.page] = data.zoom;
      }
      if (data.display == "single" && corner) {
        if (corner.charAt(1) == "l" && data.direction == "ltr" || corner.charAt(1) == "r" && data.direction == "rtl") {
          opts.next = opts.next < opts.page ? opts.next : opts.page - 1;
          opts.force = true;
        } else {
          opts.next = opts.next > opts.page ? opts.next : opts.page + 1;
        }
      }
      turnMethods._addMotionPage.call(e.target);
      turnMethods._updateShadow.call(opts.turn);
    },
    _eventEnd: function(e, opts, turned) {
      var that = $2(e.target), data = that.data().f, turn = opts.turn, dd = turn.data();
      if (turned) {
        var tpage = dd.tpage || dd.page;
        if (tpage == opts.next || tpage == opts.page) {
          delete dd.tpage;
          turnMethods._fitPage.call(turn, tpage || opts.next, true);
        }
      } else {
        turnMethods._removeMv.call(turn, opts.page);
        turnMethods._updateShadow.call(turn);
        turn.turn("update");
      }
    },
    _eventPressed: function(e) {
      var data = $2(e.target).data().f, turn = data.opts.turn, turnData = turn.data(), pages = turnData.pages;
      turnData.mouseAction = true;
      turn.turn("update");
      return data.time = new Date().getTime();
    },
    _eventReleased: function(e, point) {
      var outArea, page = $2(e.target), data = page.data().f, turn = data.opts.turn, turnData = turn.data();
      if (turnData.display == "single") {
        outArea = point.corner == "br" || point.corner == "tr" ? point.x < page.width() / 2 : point.x > page.width() / 2;
      } else {
        outArea = point.x < 0 || point.x > page.width();
      }
      if (new Date().getTime() - data.time < 200 || outArea) {
        e.preventDefault();
        turnMethods._turnPage.call(turn, data.opts.next);
      }
      turnData.mouseAction = false;
    },
    _flip: function(e) {
      e.stopPropagation();
      var opts = $2(e.target).data().f.opts;
      opts.turn.trigger("turn", [opts.next]);
      if (opts.turn.data().opts.autoCenter) {
        opts.turn.turn("center", opts.next);
      }
    },
    _touchStart: function() {
      var data = this.data();
      for (var page in data.pages) {
        if (has(page, data.pages) && flipMethods._eventStart.apply(data.pages[page], arguments) === false) {
          return false;
        }
      }
    },
    _touchMove: function() {
      var data = this.data();
      for (var page in data.pages) {
        if (has(page, data.pages)) {
          flipMethods._eventMove.apply(data.pages[page], arguments);
        }
      }
    },
    _touchEnd: function() {
      var data = this.data();
      for (var page in data.pages) {
        if (has(page, data.pages)) {
          flipMethods._eventEnd.apply(data.pages[page], arguments);
        }
      }
    },
    calculateZ: function(mv) {
      var i, page, nextPage, placePage, dpage, that = this, data = this.data(), view = this.turn("view"), currentPage = view[0] || view[1], total = mv.length - 1, r = {
        pageZ: {},
        partZ: {},
        pageV: {}
      }, addView = function(page2) {
        var view2 = that.turn("view", page2);
        if (view2[0])
          r.pageV[view2[0]] = true;
        if (view2[1])
          r.pageV[view2[1]] = true;
      };
      for (i = 0; i <= total; i++) {
        page = mv[i];
        nextPage = data.pages[page].data().f.opts.next;
        placePage = data.pagePlace[page];
        addView(page);
        addView(nextPage);
        dpage = data.pagePlace[nextPage] == nextPage ? nextPage : page;
        r.pageZ[dpage] = data.totalPages - Math.abs(currentPage - dpage);
        r.partZ[placePage] = data.totalPages * 2 - total + i;
      }
      return r;
    },
    update: function() {
      var page, data = this.data();
      if (this.turn("animating") && data.pageMv[0] !== 0) {
        var p, fixed, pos = this.turn("calculateZ", data.pageMv), corner = this.turn("corner"), actualView = this.turn("view"), newView = this.turn("view", data.tpage);
        for (page in data.pageWrap) {
          if (!has(page, data.pageWrap))
            continue;
          fixed = data.pageObjs[page].hasClass("fixed");
          data.pageWrap[page].css({
            display: pos.pageV[page] || fixed ? "" : "none",
            zIndex: (data.pageObjs[page].hasClass("hard") ? pos.partZ[page] : pos.pageZ[page]) || (fixed ? -1 : 0)
          });
          if (p = data.pages[page]) {
            p.flip("z", pos.partZ[page] || null);
            if (pos.pageV[page])
              p.flip("resize");
            if (data.tpage) {
              p.flip("hover", false).flip("disable", $2.inArray(parseInt(page, 10), data.pageMv) == -1 && page != newView[0] && page != newView[1]);
            } else {
              p.flip("hover", corner === false).flip("disable", page != actualView[0] && page != actualView[1]);
            }
          }
        }
      } else {
        for (page in data.pageWrap) {
          if (!has(page, data.pageWrap))
            continue;
          var pageLocation = turnMethods._setPageLoc.call(this, page);
          if (data.pages[page]) {
            data.pages[page].flip("disable", data.disabled || pageLocation != 1).flip("hover", true).flip("z", null);
          }
        }
      }
      return this;
    },
    _updateShadow: function() {
      var view, view2, shadow, data = this.data(), width = this.width(), height = this.height(), pageWidth = data.display == "single" ? width : width / 2;
      view = this.turn("view");
      if (!data.shadow) {
        data.shadow = $2("<div />", {
          class: "shadow",
          css: divAtt(0, 0, 0).css
        }).appendTo(this);
      }
      for (var i = 0; i < data.pageMv.length; i++) {
        if (!view[0] || !view[1])
          break;
        view = this.turn("view", data.pages[data.pageMv[i]].data().f.opts.next);
        view2 = this.turn("view", data.pageMv[i]);
        view[0] = view[0] && view2[0];
        view[1] = view[1] && view2[1];
      }
      if (!view[0])
        shadow = data.direction == "ltr" ? 1 : 2;
      else if (!view[1])
        shadow = data.direction == "ltr" ? 2 : 1;
      else
        shadow = 3;
      switch (shadow) {
        case 1:
          data.shadow.css({
            width: pageWidth,
            height,
            top: 0,
            left: pageWidth
          });
          break;
        case 2:
          data.shadow.css({
            width: pageWidth,
            height,
            top: 0,
            left: 0
          });
          break;
        case 3:
          data.shadow.css({
            width,
            height,
            top: 0,
            left: 0
          });
          break;
      }
    },
    _setPageLoc: function(page) {
      var data = this.data(), view = this.turn("view"), loc = 0;
      if (page == view[0] || page == view[1])
        loc = 1;
      else if (data.display == "single" && page == view[0] + 1 || data.display == "double" && page == view[0] - 2 || page == view[1] + 2)
        loc = 2;
      if (!this.turn("animating"))
        switch (loc) {
          case 1:
            data.pageWrap[page].css({
              zIndex: data.totalPages,
              display: ""
            });
            break;
          case 2:
            data.pageWrap[page].css({
              zIndex: data.totalPages - 1,
              display: ""
            });
            break;
          case 0:
            data.pageWrap[page].css({
              zIndex: 0,
              display: data.pageObjs[page].hasClass("fixed") ? "" : "none"
            });
            break;
        }
      return loc;
    },
    options: function(options) {
      if (options === void 0) {
        return this.data().opts;
      } else {
        var data = this.data();
        $2.extend(data.opts, options);
        if (options.pages)
          this.turn("pages", options.pages);
        if (options.page)
          this.turn("page", options.page);
        if (options.display)
          this.turn("display", options.display);
        if (options.direction)
          this.turn("direction", options.direction);
        if (options.width && options.height)
          this.turn("size", options.width, options.height);
        if (options.when) {
          for (var eventName in options.when)
            if (has(eventName, options.when)) {
              this.unbind(eventName).bind(eventName, options.when[eventName]);
            }
        }
        return this;
      }
    },
    version: function() {
      return version;
    }
  }, flipMethods = {
    init: function(opts) {
      this.data({
        f: {
          disabled: false,
          hover: false,
          effect: this.hasClass("hard") ? "hard" : "sheet"
        }
      });
      this.flip("options", opts);
      flipMethods._addPageWrapper.call(this);
      return this;
    },
    setData: function(d) {
      var data = this.data();
      data.f = $2.extend(data.f, d);
      return this;
    },
    options: function(opts) {
      var data = this.data().f;
      if (opts) {
        flipMethods.setData.call(this, {
          opts: $2.extend({}, data.opts || flipOptions, opts)
        });
        return this;
      } else
        return data.opts;
    },
    z: function(z) {
      var data = this.data().f;
      data.opts["z-index"] = z;
      if (data.fwrapper)
        data.fwrapper.css({
          zIndex: z || parseInt(data.parent.css("z-index"), 10) || 0
        });
      return this;
    },
    _cAllowed: function() {
      var data = this.data().f, page = data.opts.page, turnData = data.opts.turn.data(), odd = page % 2;
      if (data.effect == "hard") {
        return turnData.direction == "ltr" ? [odd ? "r" : "l"] : [odd ? "l" : "r"];
      } else {
        if (turnData.display == "single") {
          if (page == 1)
            return turnData.direction == "ltr" ? corners["forward"] : corners["backward"];
          else if (page == turnData.totalPages)
            return turnData.direction == "ltr" ? corners["backward"] : corners["forward"];
          else
            return corners["all"];
        } else {
          return turnData.direction == "ltr" ? corners[odd ? "forward" : "backward"] : corners[odd ? "backward" : "forward"];
        }
      }
    },
    _cornerActivated: function(p) {
      var data = this.data().f, width = this.width(), height = this.height(), point = {
        x: p.x,
        y: p.y,
        corner: ""
      }, csz = data.opts.cornerSize;
      if (point.x <= 0 || point.y <= 0 || point.x >= width || point.y >= height)
        return false;
      var allowedCorners = flipMethods._cAllowed.call(this);
      switch (data.effect) {
        case "hard":
          if (point.x > width - csz)
            point.corner = "r";
          else if (point.x < csz)
            point.corner = "l";
          else
            return false;
          break;
        case "sheet":
          if (point.y < csz)
            point.corner += "t";
          else if (point.y >= height - csz)
            point.corner += "b";
          else
            return false;
          if (point.x <= csz)
            point.corner += "l";
          else if (point.x >= width - csz)
            point.corner += "r";
          else
            return false;
          break;
      }
      return !point.corner || $2.inArray(point.corner, allowedCorners) == -1 ? false : point;
    },
    _isIArea: function(e) {
      var pos = this.data().f.parent.offset();
      e = isTouch && e.originalEvent ? e.originalEvent.touches[0] : e;
      return flipMethods._cornerActivated.call(this, {
        x: e.pageX - pos.left,
        y: e.pageY - pos.top
      });
    },
    _c: function(corner, opts) {
      opts = opts || 0;
      switch (corner) {
        case "tl":
          return point2D(opts, opts);
        case "tr":
          return point2D(this.width() - opts, opts);
        case "bl":
          return point2D(opts, this.height() - opts);
        case "br":
          return point2D(this.width() - opts, this.height() - opts);
        case "l":
          return point2D(opts, 0);
        case "r":
          return point2D(this.width() - opts, 0);
      }
    },
    _c2: function(corner) {
      switch (corner) {
        case "tl":
          return point2D(this.width() * 2, 0);
        case "tr":
          return point2D(-this.width(), 0);
        case "bl":
          return point2D(this.width() * 2, this.height());
        case "br":
          return point2D(-this.width(), this.height());
        case "l":
          return point2D(this.width() * 2, 0);
        case "r":
          return point2D(-this.width(), 0);
      }
    },
    _foldingPage: function() {
      var data = this.data().f;
      if (!data)
        return;
      var opts = data.opts;
      if (opts.turn) {
        data = opts.turn.data();
        if (data.display == "single")
          return opts.next > 1 || opts.page > 1 ? data.pageObjs[0] : null;
        else
          return data.pageObjs[opts.next];
      }
    },
    _backGradient: function() {
      var data = this.data().f, turnData = data.opts.turn.data(), gradient2 = turnData.opts.gradients && (turnData.display == "single" || data.opts.page != 2 && data.opts.page != turnData.totalPages - 1);
      if (gradient2 && !data.bshadow)
        data.bshadow = $2("<div/>", divAtt(0, 0, 1)).css({
          position: "",
          width: this.width(),
          height: this.height()
        }).appendTo(data.parent);
      return gradient2;
    },
    type: function() {
      return this.data().f.effect;
    },
    resize: function(full) {
      var data = this.data().f, turnData = data.opts.turn.data(), width = this.width(), height = this.height();
      switch (data.effect) {
        case "hard":
          if (full) {
            data.wrapper.css({
              width,
              height
            });
            data.fpage.css({
              width,
              height
            });
            if (turnData.opts.gradients) {
              data.ashadow.css({
                width,
                height
              });
              data.bshadow.css({
                width,
                height
              });
            }
          }
          break;
        case "sheet":
          if (full) {
            var size = Math.round(Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2)));
            data.wrapper.css({
              width: size,
              height: size
            });
            data.fwrapper.css({
              width: size,
              height: size
            }).children(":first-child").css({
              width,
              height
            });
            data.fpage.css({
              width,
              height
            });
            if (turnData.opts.gradients)
              data.ashadow.css({
                width,
                height
              });
            if (flipMethods._backGradient.call(this))
              data.bshadow.css({
                width,
                height
              });
          }
          if (data.parent.is(":visible")) {
            var offset = findPos(data.parent[0]);
            data.fwrapper.css({
              top: offset.top,
              left: offset.left
            });
            offset = findPos(data.opts.turn[0]);
            data.fparent.css({
              top: -offset.top,
              left: -offset.left
            });
          }
          this.flip("z", data.opts["z-index"]);
          break;
      }
    },
    _addPageWrapper: function() {
      var data = this.data().f, turnData = data.opts.turn.data(), parent = this.parent();
      data.parent = parent;
      if (!data.wrapper)
        switch (data.effect) {
          case "hard":
            var cssProperties = {};
            cssProperties[vendor + "transform-style"] = "preserve-3d";
            cssProperties[vendor + "backface-visibility"] = "hidden";
            data.wrapper = $2("<div/>", divAtt(0, 0, 2)).css(cssProperties).appendTo(parent).prepend(this);
            data.fpage = $2("<div/>", divAtt(0, 0, 1)).css(cssProperties).appendTo(parent);
            if (turnData.opts.gradients) {
              data.ashadow = $2("<div/>", divAtt(0, 0, 0)).hide().appendTo(parent);
              data.bshadow = $2("<div/>", divAtt(0, 0, 0));
            }
            break;
          case "sheet":
            var width = this.width(), height = this.height();
            data.fparent = data.opts.turn.data().fparent;
            if (!data.fparent) {
              var fparent = $2("<div/>", {
                css: {
                  "pointer-events": "none"
                }
              }).hide();
              fparent.data().flips = 0;
              fparent.css(divAtt(0, 0, "auto", "visible").css).appendTo(data.opts.turn);
              data.opts.turn.data().fparent = fparent;
              data.fparent = fparent;
            }
            this.css({
              position: "absolute",
              top: 0,
              left: 0,
              bottom: "auto",
              right: "auto"
            });
            data.wrapper = $2("<div/>", divAtt(0, 0, this.css("z-index"))).appendTo(parent).prepend(this);
            data.fwrapper = $2("<div/>", divAtt(parent.offset().top, parent.offset().left)).hide().appendTo(data.fparent);
            data.fpage = $2("<div/>", divAtt(0, 0, 0, "visible")).css({
              cursor: "default"
            }).appendTo(data.fwrapper);
            if (turnData.opts.gradients)
              data.ashadow = $2("<div/>", divAtt(0, 0, 1)).appendTo(data.fpage);
            flipMethods.setData.call(this, data);
            break;
        }
      flipMethods.resize.call(this, true);
    },
    _fold: function(point) {
      var data = this.data().f, turnData = data.opts.turn.data(), o = flipMethods._c.call(this, point.corner), width = this.width(), height = this.height();
      switch (data.effect) {
        case "hard":
          if (point.corner == "l")
            point.x = Math.min(Math.max(point.x, 0), width * 2);
          else
            point.x = Math.max(Math.min(point.x, width), -width);
          var leftPos, shadow, gradientX, fpageOrigin, parentOrigin, totalPages = turnData.totalPages, zIndex = data.opts["z-index"] || totalPages, parentCss = {
            overflow: "visible"
          }, relX = o.x ? (o.x - point.x) / width : point.x / width, angle = relX * 90, half = angle < 90;
          switch (point.corner) {
            case "l":
              fpageOrigin = "0% 50%";
              parentOrigin = "100% 50%";
              if (half) {
                leftPos = 0;
                shadow = data.opts.next - 1 > 0;
                gradientX = 1;
              } else {
                leftPos = "100%";
                shadow = data.opts.page + 1 < totalPages;
                gradientX = 0;
              }
              break;
            case "r":
              fpageOrigin = "100% 50%";
              parentOrigin = "0% 50%";
              angle = -angle;
              width = -width;
              if (half) {
                leftPos = 0;
                shadow = data.opts.next + 1 < totalPages;
                gradientX = 0;
              } else {
                leftPos = "-100%";
                shadow = data.opts.page != 1;
                gradientX = 1;
              }
              break;
          }
          parentCss[vendor + "perspective-origin"] = parentOrigin;
          data.wrapper.transform("rotateY(" + angle + "deg)translate3d(0px, 0px, " + (this.attr("depth") || 0) + "px)", parentOrigin);
          data.fpage.transform("translateX(" + width + "px) rotateY(" + (180 + angle) + "deg)", fpageOrigin);
          data.parent.css(parentCss);
          if (half) {
            relX = -relX + 1;
            data.wrapper.css({
              zIndex: zIndex + 1
            });
            data.fpage.css({
              zIndex
            });
          } else {
            relX = relX - 1;
            data.wrapper.css({
              zIndex
            });
            data.fpage.css({
              zIndex: zIndex + 1
            });
          }
          if (turnData.opts.gradients) {
            if (shadow)
              data.ashadow.css({
                display: "",
                left: leftPos,
                backgroundColor: "rgba(0,0,0," + 0.5 * relX + ")"
              }).transform("rotateY(0deg)");
            else
              data.ashadow.hide();
            data.bshadow.css({
              opacity: -relX + 1
            });
            if (half) {
              if (data.bshadow.parent()[0] != data.wrapper[0]) {
                data.bshadow.appendTo(data.wrapper);
              }
            } else {
              if (data.bshadow.parent()[0] != data.fpage[0]) {
                data.bshadow.appendTo(data.fpage);
              }
            }
            gradient(data.bshadow, point2D(gradientX * 100, 0), point2D((-gradientX + 1) * 100, 0), [[0, "rgba(0,0,0,0.3)"], [1, "rgba(0,0,0,0)"]], 2);
          }
          break;
        case "sheet":
          var that = this, a = 0, px, gradientEndPointA, gradientEndPointB, gradientStartVal, gradientSize, gradientOpacity, shadowVal, mv = point2D(0, 0), df = point2D(0, 0), tr = point2D(0, 0), folding = flipMethods._foldingPage.call(this), ac = turnData.opts.acceleration, h = data.wrapper.height(), top = point.corner.substr(0, 1) == "t", left = point.corner.substr(1, 1) == "l", compute = function() {
            var rel = point2D(0, 0);
            var middle = point2D(0, 0);
            rel.x = o.x ? o.x - point.x : point.x;
            if (!hasRot) {
              rel.y = 0;
            } else {
              rel.y = o.y ? o.y - point.y : point.y;
            }
            middle.x = left ? width - rel.x / 2 : point.x + rel.x / 2;
            middle.y = rel.y / 2;
            var alpha = A90 - Math.atan2(rel.y, rel.x), gamma = alpha - Math.atan2(middle.y, middle.x), distance = Math.max(0, Math.sin(gamma) * Math.sqrt(Math.pow(middle.x, 2) + Math.pow(middle.y, 2)));
            a = deg(alpha);
            tr = point2D(distance * Math.sin(alpha), distance * Math.cos(alpha));
            if (alpha > A90) {
              tr.x = tr.x + Math.abs(tr.y * rel.y / rel.x);
              tr.y = 0;
              if (Math.round(tr.x * Math.tan(PI - alpha)) < height) {
                point.y = Math.sqrt(Math.pow(height, 2) + 2 * middle.x * rel.x);
                if (top)
                  point.y = height - point.y;
                return compute();
              }
            }
            if (alpha > A90) {
              var beta = PI - alpha, dd = h - height / Math.sin(beta);
              mv = point2D(Math.round(dd * Math.cos(beta)), Math.round(dd * Math.sin(beta)));
              if (left)
                mv.x = -mv.x;
              if (top)
                mv.y = -mv.y;
            }
            px = Math.round(tr.y / Math.tan(alpha) + tr.x);
            var side = width - px, sideX = side * Math.cos(alpha * 2), sideY = side * Math.sin(alpha * 2);
            df = point2D(Math.round(left ? side - sideX : px + sideX), Math.round(top ? sideY : height - sideY));
            if (turnData.opts.gradients) {
              gradientSize = side * Math.sin(alpha);
              var endingPoint = flipMethods._c2.call(that, point.corner), far = Math.sqrt(Math.pow(endingPoint.x - point.x, 2) + Math.pow(endingPoint.y - point.y, 2)) / width;
              shadowVal = Math.sin(A90 * (far > 1 ? 2 - far : far));
              gradientOpacity = Math.min(far, 1);
              gradientStartVal = gradientSize > 100 ? (gradientSize - 100) / gradientSize : 0;
              gradientEndPointA = point2D(gradientSize * Math.sin(alpha) / width * 100, gradientSize * Math.cos(alpha) / height * 100);
              if (flipMethods._backGradient.call(that)) {
                gradientEndPointB = point2D(gradientSize * 1.2 * Math.sin(alpha) / width * 100, gradientSize * 1.2 * Math.cos(alpha) / height * 100);
                if (!left)
                  gradientEndPointB.x = 100 - gradientEndPointB.x;
                if (!top)
                  gradientEndPointB.y = 100 - gradientEndPointB.y;
              }
            }
            tr.x = Math.round(tr.x);
            tr.y = Math.round(tr.y);
            return true;
          }, transform = function(tr2, c, x, a2) {
            var f = ["0", "auto"], mvW = (width - h) * x[0] / 100, mvH = (height - h) * x[1] / 100, cssA = {
              left: f[c[0]],
              top: f[c[1]],
              right: f[c[2]],
              bottom: f[c[3]]
            }, cssB = {}, aliasingFk = a2 != 90 && a2 != -90 ? left ? -1 : 1 : 0, origin = x[0] + "% " + x[1] + "%";
            that.css(cssA).transform(rotate(a2) + translate(tr2.x + aliasingFk, tr2.y, ac), origin);
            data.fpage.css(cssA).transform(rotate(a2) + translate(tr2.x + df.x - mv.x - width * x[0] / 100, tr2.y + df.y - mv.y - height * x[1] / 100, ac) + rotate((180 / a2 - 2) * a2), origin);
            data.wrapper.transform(translate(-tr2.x + mvW - aliasingFk, -tr2.y + mvH, ac) + rotate(-a2), origin);
            data.fwrapper.transform(translate(-tr2.x + mv.x + mvW, -tr2.y + mv.y + mvH, ac) + rotate(-a2), origin);
            if (turnData.opts.gradients) {
              if (x[0])
                gradientEndPointA.x = 100 - gradientEndPointA.x;
              if (x[1])
                gradientEndPointA.y = 100 - gradientEndPointA.y;
              cssB["box-shadow"] = "0 0 20px rgba(0,0,0," + 0.5 * shadowVal + ")";
              folding.css(cssB);
              gradient(data.ashadow, point2D(left ? 100 : 0, top ? 0 : 100), point2D(gradientEndPointA.x, gradientEndPointA.y), [[gradientStartVal, "rgba(0,0,0,0)"], [(1 - gradientStartVal) * 0.8 + gradientStartVal, "rgba(0,0,0," + 0.2 * gradientOpacity + ")"], [1, "rgba(255,255,255," + 0.2 * gradientOpacity + ")"]], 3);
              if (flipMethods._backGradient.call(that))
                gradient(data.bshadow, point2D(left ? 0 : 100, top ? 0 : 100), point2D(gradientEndPointB.x, gradientEndPointB.y), [[0.6, "rgba(0,0,0,0)"], [0.8, "rgba(0,0,0," + 0.3 * gradientOpacity + ")"], [1, "rgba(0,0,0,0)"]], 3);
            }
          };
          switch (point.corner) {
            case "l":
              break;
            case "r":
              break;
            case "tl":
              point.x = Math.max(point.x, 1);
              compute();
              transform(tr, [1, 0, 0, 1], [100, 0], a);
              break;
            case "tr":
              point.x = Math.min(point.x, width - 1);
              compute();
              transform(point2D(-tr.x, tr.y), [0, 0, 0, 1], [0, 0], -a);
              break;
            case "bl":
              point.x = Math.max(point.x, 1);
              compute();
              transform(point2D(tr.x, -tr.y), [1, 1, 0, 0], [100, 100], -a);
              break;
            case "br":
              point.x = Math.min(point.x, width - 1);
              compute();
              transform(point2D(-tr.x, -tr.y), [0, 1, 1, 0], [0, 100], a);
              break;
          }
          break;
      }
      data.point = point;
    },
    _moveFoldingPage: function(move) {
      var data = this.data().f;
      if (!data)
        return;
      var turn = data.opts.turn, turnData = turn.data(), place = turnData.pagePlace;
      if (move) {
        var nextPage = data.opts.next;
        if (place[nextPage] != data.opts.page) {
          if (data.folding)
            flipMethods._moveFoldingPage.call(this, false);
          var folding = flipMethods._foldingPage.call(this);
          folding.appendTo(data.fpage);
          place[nextPage] = data.opts.page;
          data.folding = nextPage;
        }
        turn.turn("update");
      } else {
        if (data.folding) {
          if (turnData.pages[data.folding]) {
            var flipData = turnData.pages[data.folding].data().f;
            turnData.pageObjs[data.folding].appendTo(flipData.wrapper);
          } else if (turnData.pageWrap[data.folding]) {
            turnData.pageObjs[data.folding].appendTo(turnData.pageWrap[data.folding]);
          }
          if (data.folding in place) {
            place[data.folding] = data.folding;
          }
          delete data.folding;
        }
      }
    },
    _showFoldedPage: function(c, animate) {
      var folding = flipMethods._foldingPage.call(this), dd = this.data(), data = dd.f, visible = data.visible;
      if (folding) {
        if (!visible || !data.point || data.point.corner != c.corner) {
          var corner = data.status == "hover" || data.status == "peel" || data.opts.turn.data().mouseAction ? c.corner : null;
          visible = false;
          if (trigger("start", this, [data.opts, corner]) == "prevented")
            return false;
        }
        if (animate) {
          var that = this, point = data.point && data.point.corner == c.corner ? data.point : flipMethods._c.call(this, c.corner, 1);
          this.animatef({
            from: [point.x, point.y],
            to: [c.x, c.y],
            duration: 500,
            frame: function(v) {
              c.x = Math.round(v[0]);
              c.y = Math.round(v[1]);
              flipMethods._fold.call(that, c);
            }
          });
        } else {
          flipMethods._fold.call(this, c);
          if (dd.effect && !dd.effect.turning)
            this.animatef(false);
        }
        if (!visible) {
          switch (data.effect) {
            case "hard":
              data.visible = true;
              flipMethods._moveFoldingPage.call(this, true);
              data.fpage.show();
              if (data.opts.shadows)
                data.bshadow.show();
              break;
            case "sheet":
              data.visible = true;
              data.fparent.show().data().flips++;
              flipMethods._moveFoldingPage.call(this, true);
              data.fwrapper.show();
              if (data.bshadow)
                data.bshadow.show();
              break;
          }
        }
        return true;
      }
      return false;
    },
    hide: function() {
      var data = this.data().f, turnData = data.opts.turn.data(), folding = flipMethods._foldingPage.call(this);
      switch (data.effect) {
        case "hard":
          if (turnData.opts.gradients) {
            data.bshadowLoc = 0;
            data.bshadow.remove();
            data.ashadow.hide();
          }
          data.wrapper.transform("");
          data.fpage.hide();
          break;
        case "sheet":
          if (--data.fparent.data().flips === 0)
            data.fparent.hide();
          this.css({
            left: 0,
            top: 0,
            right: "auto",
            bottom: "auto"
          }).transform("");
          data.wrapper.transform("");
          data.fwrapper.hide();
          if (data.bshadow)
            data.bshadow.hide();
          folding.transform("");
          break;
      }
      data.visible = false;
      return this;
    },
    hideFoldedPage: function(animate) {
      var data = this.data().f;
      if (!data.point)
        return;
      var that = this, p1 = data.point, hide = function() {
        data.point = null;
        data.status = "";
        that.flip("hide");
        that.trigger("end", [data.opts, false]);
      };
      if (animate) {
        var p4 = flipMethods._c.call(this, p1.corner), top = p1.corner.substr(0, 1) == "t", delta = top ? Math.min(0, p1.y - p4.y) / 2 : Math.max(0, p1.y - p4.y) / 2, p2 = point2D(p1.x, p1.y + delta), p3 = point2D(p4.x, p4.y - delta);
        this.animatef({
          from: 0,
          to: 1,
          frame: function(v) {
            var np = bezier(p1, p2, p3, p4, v);
            p1.x = np.x;
            p1.y = np.y;
            flipMethods._fold.call(that, p1);
          },
          complete: hide,
          duration: 800,
          hiding: true
        });
      } else {
        this.animatef(false);
        hide();
      }
    },
    turnPage: function(corner) {
      var that = this, data = this.data().f, turnData = data.opts.turn.data();
      corner = {
        corner: data.corner ? data.corner.corner : corner || flipMethods._cAllowed.call(this)[0]
      };
      var p1 = data.point || flipMethods._c.call(this, corner.corner, data.opts.turn ? turnData.opts.elevation : 0), p4 = flipMethods._c2.call(this, corner.corner);
      this.trigger("flip").animatef({
        from: 0,
        to: 1,
        frame: function(v) {
          var np = bezier(p1, p1, p4, p4, v);
          corner.x = np.x;
          corner.y = np.y;
          flipMethods._showFoldedPage.call(that, corner);
        },
        complete: function() {
          that.trigger("end", [data.opts, true]);
        },
        duration: turnData.opts.duration,
        turning: true
      });
      data.corner = null;
    },
    moving: function() {
      return "effect" in this.data();
    },
    isTurning: function() {
      return this.flip("moving") && this.data().effect.turning;
    },
    corner: function() {
      return this.data().f.corner;
    },
    _eventStart: function(e) {
      var data = this.data().f, turn = data.opts.turn;
      if (!data.corner && !data.disabled && !this.flip("isTurning") && data.opts.page == turn.data().pagePlace[data.opts.page]) {
        data.corner = flipMethods._isIArea.call(this, e);
        if (data.corner && flipMethods._foldingPage.call(this)) {
          this.trigger("pressed", [data.point]);
          flipMethods._showFoldedPage.call(this, data.corner);
          return false;
        } else
          data.corner = null;
      }
    },
    _eventMove: function(e) {
      var data = this.data().f;
      if (!data.disabled) {
        e = isTouch ? e.originalEvent.touches : [e];
        if (data.corner) {
          var pos = data.parent.offset();
          data.corner.x = e[0].pageX - pos.left;
          data.corner.y = e[0].pageY - pos.top;
          flipMethods._showFoldedPage.call(this, data.corner);
        } else if (data.hover && !this.data().effect && this.is(":visible")) {
          var point = flipMethods._isIArea.call(this, e[0]);
          if (point) {
            if (data.effect == "sheet" && point.corner.length == 2 || data.effect == "hard") {
              data.status = "hover";
              var origin = flipMethods._c.call(this, point.corner, data.opts.cornerSize / 2);
              point.x = origin.x;
              point.y = origin.y;
              flipMethods._showFoldedPage.call(this, point, true);
            }
          } else {
            if (data.status == "hover") {
              data.status = "";
              flipMethods.hideFoldedPage.call(this, true);
            }
          }
        }
      }
    },
    _eventEnd: function() {
      var data = this.data().f, corner = data.corner;
      if (!data.disabled && corner) {
        if (trigger("released", this, [data.point || corner]) != "prevented") {
          flipMethods.hideFoldedPage.call(this, true);
        }
      }
      data.corner = null;
    },
    disable: function(disable) {
      flipMethods.setData.call(this, {
        disabled: disable
      });
      return this;
    },
    hover: function(hover) {
      flipMethods.setData.call(this, {
        hover
      });
      return this;
    },
    peel: function(corner, animate) {
      var data = this.data().f;
      if (corner) {
        if ($2.inArray(corner, corners.all) == -1)
          throw turnError("Corner " + corner + " is not permitted");
        if ($2.inArray(corner, flipMethods._cAllowed.call(this)) != -1) {
          var point = flipMethods._c.call(this, corner, data.opts.cornerSize / 2);
          data.status = "peel";
          flipMethods._showFoldedPage.call(this, {
            corner,
            x: point.x,
            y: point.y
          }, animate);
        }
      } else {
        data.status = "";
        flipMethods.hideFoldedPage.call(this, animate);
      }
      return this;
    }
  };
  function dec(that, methods, args) {
    if (!args[0] || typeof args[0] == "object")
      return methods.init.apply(that, args);
    else if (methods[args[0]])
      return methods[args[0]].apply(that, Array.prototype.slice.call(args, 1));
    else
      throw turnError(args[0] + " is not a method or property");
  }
  function divAtt(top, left, zIndex, overf) {
    return {
      css: {
        position: "absolute",
        top,
        left,
        overflow: overf || "hidden",
        zIndex: zIndex || "auto"
      }
    };
  }
  function bezier(p1, p2, p3, p4, t) {
    var a = 1 - t, b = a * a * a, c = t * t * t;
    return point2D(Math.round(b * p1.x + 3 * t * a * a * p2.x + 3 * t * t * a * p3.x + c * p4.x), Math.round(b * p1.y + 3 * t * a * a * p2.y + 3 * t * t * a * p3.y + c * p4.y));
  }
  function deg(radians) {
    return radians / PI * 180;
  }
  function point2D(x, y) {
    return {
      x,
      y
    };
  }
  function rotationAvailable() {
    var parts;
    if (parts = /AppleWebkit\/([0-9\.]+)/i.exec(navigator.userAgent)) {
      var webkitVersion = parseFloat(parts[1]);
      return webkitVersion > 534.3;
    } else {
      return true;
    }
  }
  function translate(x, y, use3d) {
    return has3d && use3d ? " translate3d(" + x + "px," + y + "px, 0px) " : " translate(" + x + "px, " + y + "px) ";
  }
  function rotate(degrees) {
    return " rotate(" + degrees + "deg) ";
  }
  function has(property, object) {
    return Object.prototype.hasOwnProperty.call(object, property);
  }
  function getPrefix() {
    var vendorPrefixes = ["Moz", "Webkit", "Khtml", "O", "ms"], len = vendorPrefixes.length, vendor2 = "";
    while (len--)
      if (vendorPrefixes[len] + "Transform" in document.body.style)
        vendor2 = "-" + vendorPrefixes[len].toLowerCase() + "-";
    return vendor2;
  }
  function getTransitionEnd() {
    var t, el = document.createElement("fakeelement"), transitions = {
      transition: "transitionend",
      OTransition: "oTransitionEnd",
      MSTransition: "transitionend",
      MozTransition: "transitionend",
      WebkitTransition: "webkitTransitionEnd"
    };
    for (t in transitions) {
      if (el.style[t] !== void 0) {
        return transitions[t];
      }
    }
  }
  function gradient(obj, p0, p1, colors, numColors) {
    var j, cols = [];
    if (vendor == "-webkit-") {
      for (j = 0; j < numColors; j++)
        cols.push("color-stop(" + colors[j][0] + ", " + colors[j][1] + ")");
      obj.css({
        "background-image": "-webkit-gradient(linear, " + p0.x + "% " + p0.y + "%," + p1.x + "% " + p1.y + "%, " + cols.join(",") + " )"
      });
    } else {
      p0 = {
        x: p0.x / 100 * obj.width(),
        y: p0.y / 100 * obj.height()
      };
      p1 = {
        x: p1.x / 100 * obj.width(),
        y: p1.y / 100 * obj.height()
      };
      var dx = p1.x - p0.x, dy = p1.y - p0.y, angle = Math.atan2(dy, dx), angle2 = angle - Math.PI / 2, diagonal = Math.abs(obj.width() * Math.sin(angle2)) + Math.abs(obj.height() * Math.cos(angle2)), gradientDiagonal = Math.sqrt(dy * dy + dx * dx), corner = point2D(p1.x < p0.x ? obj.width() : 0, p1.y < p0.y ? obj.height() : 0), slope = Math.tan(angle), inverse = -1 / slope, x = (inverse * corner.x - corner.y - slope * p0.x + p0.y) / (inverse - slope), c = {
        x,
        y: inverse * x - inverse * corner.x + corner.y
      }, segA = Math.sqrt(Math.pow(c.x - p0.x, 2) + Math.pow(c.y - p0.y, 2));
      for (j = 0; j < numColors; j++)
        cols.push(" " + colors[j][1] + " " + (segA + gradientDiagonal * colors[j][0]) * 100 / diagonal + "%");
      obj.css({
        "background-image": vendor + "linear-gradient(" + -angle + "rad," + cols.join(",") + ")"
      });
    }
  }
  function trigger(eventName, context, args) {
    var event = $2.Event(eventName);
    context.trigger(event, args);
    if (event.isDefaultPrevented())
      return "prevented";
    else if (event.isPropagationStopped())
      return "stopped";
    else
      return "";
  }
  function turnError(message) {
    function TurnJsError(message2) {
      this.name = "TurnJsError";
      this.message = message2;
    }
    TurnJsError.prototype = new Error();
    TurnJsError.prototype.constructor = TurnJsError;
    return new TurnJsError(message);
  }
  function findPos(obj) {
    var offset = {
      top: 0,
      left: 0
    };
    do {
      offset.left += obj.offsetLeft;
      offset.top += obj.offsetTop;
    } while (obj = obj.offsetParent);
    return offset;
  }
  function hasHardPage() {
    return navigator.userAgent.indexOf("MSIE 9.0") == -1;
  }
  window.requestAnim = function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
      window.setTimeout(callback, 1e3 / 60);
    };
  }();
  $2.extend($2.fn, {
    flip: function() {
      return dec($2(this[0]), flipMethods, arguments);
    },
    turn: function() {
      return dec($2(this[0]), turnMethods, arguments);
    },
    transform: function(transform, origin) {
      var properties = {};
      if (origin)
        properties[vendor + "transform-origin"] = origin;
      properties[vendor + "transform"] = transform;
      return this.css(properties);
    },
    animatef: function(point) {
      var data = this.data();
      if (data.effect)
        data.effect.stop();
      if (point) {
        if (!point.to.length)
          point.to = [point.to];
        if (!point.from.length)
          point.from = [point.from];
        var diff = [], len = point.to.length, animating = true, that = this, time = new Date().getTime(), frame = function() {
          if (!data.effect || !animating)
            return;
          var v = [], timeDiff = Math.min(point.duration, new Date().getTime() - time);
          for (var i2 = 0; i2 < len; i2++)
            v.push(data.effect.easing(1, timeDiff, point.from[i2], diff[i2], point.duration));
          point.frame(len == 1 ? v[0] : v);
          if (timeDiff == point.duration) {
            delete data["effect"];
            that.data(data);
            if (point.complete)
              point.complete();
          } else {
            window.requestAnim(frame);
          }
        };
        for (var i = 0; i < len; i++)
          diff.push(point.to[i] - point.from[i]);
        data.effect = $2.extend({
          stop: function() {
            animating = false;
          },
          easing: function(x, t, b, c, data2) {
            return c * Math.sqrt(1 - (t = t / data2 - 1) * t) + b;
          }
        }, point);
        this.data(data);
        frame();
      } else {
        delete data["effect"];
      }
    }
  });
  $2.isTouch = isTouch;
  $2.mouseEvents = mouseEvents;
  $2.cssPrefix = getPrefix;
  $2.cssTransitionEnd = getTransitionEnd;
  $2.findPos = findPos;
})(import_jquery.default);
var script$2 = {
  name: "Turn",
  data() {
    return {
      nanoid: nanoid(),
      componentKey: 0
    };
  },
  props: {
    options: {
      type: Object,
      default: () => {
      }
    }
  },
  watch: {
    defaultOptions: {
      handler(val) {
        this.forceRerender(val);
      },
      deep: true
    }
  },
  computed: {
    uid() {
      return `jopa-${this.nanoid}`;
    },
    selector() {
      return `div[data-uid=${this.uid}]`;
    },
    defaultOptions() {
      return {
        when: {
          turning: (event, page, pageObj) => {
            this.currentPage = page;
          },
          first: () => {
            this.first();
          },
          last: () => {
            this.last();
          }
        },
        ...this.options
      };
    }
  },
  mounted() {
    (0, import_jquery.default)(this.selector).turn(this.defaultOptions);
  },
  methods: {
    goTo(page) {
      (0, import_jquery.default)(this.selector).turn("page", page);
    },
    first() {
    },
    last() {
    },
    forceRerender(val) {
      this.nanoid = nanoid();
      this.componentKey += 1;
      this.$nextTick(() => (0, import_jquery.default)(this.selector).turn(val));
    }
  }
};
var __vue_script__$2 = script$2;
var __vue_render__$2 = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", {
    key: _vm.componentKey,
    attrs: {
      "data-uid": this.uid
    }
  }, [_vm._t("default")], 2);
};
var __vue_staticRenderFns__$2 = [];
var __vue_inject_styles__$2 = void 0;
var __vue_scope_id__$2 = void 0;
var __vue_module_identifier__$2 = void 0;
var __vue_is_functional_template__$2 = false;
var __vue_component__$2 = normalizeComponent({
  render: __vue_render__$2,
  staticRenderFns: __vue_staticRenderFns__$2
}, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2, __vue_module_identifier__$2, false, void 0, void 0, void 0);
var TurnPlugin = pluginFactory({
  components: {
    FwTurn: __vue_component__$2
  }
});
var script$3 = {
  name: "loading-svg"
};
var __vue_script__$3 = script$3;
var __vue_render__$3 = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("svg", {
    attrs: {
      "viewBox": "0 0 1024 1024",
      "width": "30",
      "height": "30"
    }
  }, [_c("path", {
    attrs: {
      "d": "M858.88 753.408C858.88 756.5824 861.7984 759.4496 864.9216 759.4496 868.096 759.4496 870.9632 756.5824 870.9632 753.408 870.9632 750.2336 868.096 747.3664 864.9216 747.3664 861.7984 747.3664 858.88 750.2336 858.88 753.408L858.88 753.408ZM725.4528 891.0848C725.4528 894.208 726.784 897.3312 728.9856 899.584 731.2384 901.7856 734.3616 903.0656 737.4848 903.0656 740.6592 903.0656 743.7824 901.7856 745.984 899.584 748.2368 897.3312 749.5168 894.208 749.5168 891.0848 749.5168 887.9104 748.2368 884.7872 745.984 882.5856 743.7824 880.3328 740.6592 879.0528 737.4848 879.0528 734.3616 879.0528 731.2384 880.3328 728.9856 882.5856 726.784 884.7872 725.4528 887.9104 725.4528 891.0848L725.4528 891.0848ZM545.6384 961.9456C545.6384 966.656 547.584 971.3664 550.912 974.6944 554.2912 978.0224 558.9504 979.968 563.712 979.968 568.4224 979.968 573.1328 978.0224 576.4608 974.6944 579.84 971.3664 581.7856 966.656 581.7856 961.9456 581.7856 957.184 579.84 952.4736 576.4608 949.1456 573.1328 945.8176 568.4224 943.872 563.712 943.872 558.9504 943.872 554.2912 945.8176 550.912 949.1456 547.584 952.4736 545.6384 957.184 545.6384 961.9456L545.6384 961.9456ZM352.0512 952.4224C352.0512 958.72 354.6624 964.9664 359.0656 969.4208 363.52 973.8752 369.8176 976.4864 376.064 976.4864 382.3616 976.4864 388.6592 973.8752 393.0624 969.4208 397.5168 964.9664 400.128 958.72 400.128 952.4224 400.128 946.1248 397.5168 939.8784 393.0624 935.424 388.6592 930.9696 382.3616 928.4096 376.064 928.4096 369.8176 928.4096 363.52 930.9696 359.0656 935.424 354.6624 939.8784 352.0512 946.1248 352.0512 952.4224L352.0512 952.4224ZM180.3264 864.3072C180.3264 872.192 183.552 880.0256 189.1328 885.5552 194.7136 891.136 202.496 894.3616 210.3808 894.3616 218.2656 894.3616 226.0992 891.136 231.68 885.5552 237.2096 880.0256 240.4864 872.192 240.4864 864.3072 240.4864 856.4224 237.2096 848.5888 231.68 843.008 226.0992 837.4784 218.2656 834.2016 210.3808 834.2016 202.496 834.2016 194.7136 837.4784 189.1328 843.008 183.552 848.5888 180.3264 856.4224 180.3264 864.3072L180.3264 864.3072ZM61.3888 714.496C61.3888 723.9168 65.28 733.3376 71.936 740.0448 78.6432 746.7008 88.064 750.592 97.4848 750.592 106.9568 750.592 116.3776 746.7008 123.0336 740.0448 129.7408 733.3376 133.632 723.9168 133.632 714.496 133.632 705.024 129.7408 695.6032 123.0336 688.9472 116.3776 682.24 106.9568 678.3488 97.4848 678.3488 88.064 678.3488 78.6432 682.24 71.936 688.9472 65.28 695.6032 61.3888 705.024 61.3888 714.496L61.3888 714.496ZM16.7424 530.5344C16.7424 541.5424 21.2992 552.4992 29.0816 560.2816 36.864 568.064 47.8208 572.6208 58.8288 572.6208 69.888 572.6208 80.8448 568.064 88.6272 560.2816 96.4096 552.4992 100.9664 541.5424 100.9664 530.5344 100.9664 519.4752 96.4096 508.5184 88.6272 500.736 80.8448 492.9536 69.888 488.3968 58.8288 488.3968 47.8208 488.3968 36.864 492.9536 29.0816 500.736 21.2992 508.5184 16.7424 519.4752 16.7424 530.5344L16.7424 530.5344ZM53.4528 347.7504C53.4528 360.3456 58.6752 372.8896 67.584 381.7984 76.4928 390.7072 88.9856 395.8784 101.632 395.8784 114.2272 395.8784 126.72 390.7072 135.68 381.7984 144.5888 372.8896 149.76 360.3456 149.76 347.7504 149.76 335.1552 144.5888 322.6112 135.68 313.7024 126.72 304.7936 114.2272 299.6224 101.632 299.6224 88.9856 299.6224 76.4928 304.7936 67.584 313.7024 58.6752 322.6112 53.4528 335.1552 53.4528 347.7504L53.4528 347.7504ZM163.6352 200.3968C163.6352 214.5792 169.472 228.6592 179.5072 238.6944 189.5424 248.7296 203.6224 254.5664 217.856 254.5664 232.0384 254.5664 246.1184 248.7296 256.1536 238.6944 266.1888 228.6592 272.0256 214.5792 272.0256 200.3968 272.0256 186.2144 266.1888 172.0832 256.1536 162.048 246.1184 152.064 232.0384 146.176 217.856 146.176 203.6224 146.176 189.5424 152.064 179.5072 162.048 169.472 172.0832 163.6352 186.2144 163.6352 200.3968L163.6352 200.3968ZM325.4272 115.968C325.4272 131.7376 331.8784 147.4048 343.04 158.5152 354.2016 169.6768 369.8176 176.128 385.5872 176.128 401.3568 176.128 416.9728 169.6768 428.1344 158.5152 439.296 147.4048 445.7472 131.7376 445.7472 115.968 445.7472 100.2496 439.296 84.5824 428.1344 73.4208 416.9728 62.3104 401.3568 55.808 385.5872 55.808 369.8176 55.808 354.2016 62.3104 343.04 73.4208 331.8784 84.5824 325.4272 100.2496 325.4272 115.968L325.4272 115.968ZM507.136 110.7456C507.136 128.0512 514.2528 145.3056 526.4896 157.5424 538.7776 169.8304 555.9808 176.9472 573.3376 176.9472 590.6432 176.9472 607.8976 169.8304 620.1344 157.5424 632.4224 145.3056 639.5392 128.0512 639.5392 110.7456 639.5392 93.3888 632.4224 76.1856 620.1344 63.8976 607.8976 51.6608 590.6432 44.544 573.3376 44.544 555.9808 44.544 538.7776 51.6608 526.4896 63.8976 514.2528 76.1856 507.136 93.3888 507.136 110.7456L507.136 110.7456ZM673.4848 185.6C673.4848 204.4928 681.2672 223.2832 694.6304 236.6464 707.9936 250.0096 726.784 257.792 745.6768 257.792 764.5696 257.792 783.36 250.0096 796.7232 236.6464 810.0864 223.2832 817.8688 204.4928 817.8688 185.6 817.8688 166.7072 810.0864 147.9168 796.7232 134.5536 783.36 121.1904 764.5696 113.408 745.6768 113.408 726.784 113.408 707.9936 121.1904 694.6304 134.5536 681.2672 147.9168 673.4848 166.7072 673.4848 185.6L673.4848 185.6ZM791.7056 326.1952C791.7056 346.6752 800.1024 367.0016 814.592 381.4912 829.0816 395.9808 849.4592 404.4288 869.9392 404.4288 890.4192 404.4288 910.7456 395.9808 925.2352 381.4912 939.7248 367.0016 948.1728 346.6752 948.1728 326.1952 948.1728 305.664 939.7248 285.3376 925.2352 270.848 910.7456 256.3584 890.4192 247.9616 869.9392 247.9616 849.4592 247.9616 829.0816 256.3584 814.592 270.848 800.1024 285.3376 791.7056 305.664 791.7056 326.1952L791.7056 326.1952ZM838.7072 508.2624C838.7072 530.3296 847.7696 552.2432 863.3856 567.8592 879.0016 583.4752 900.9152 592.5376 922.9824 592.5376 945.0496 592.5376 966.9632 583.4752 982.5792 567.8592 998.1952 552.2432 1007.2576 530.3296 1007.2576 508.2624 1007.2576 486.1952 998.1952 464.2816 982.5792 448.6656 966.9632 433.1008 945.0496 423.9872 922.9824 423.9872 900.9152 423.9872 879.0016 433.1008 863.3856 448.6656 847.7696 464.2816 838.7072 486.1952 838.7072 508.2624L838.7072 508.2624Z",
      "fill": "#1296db"
    }
  })]);
};
var __vue_staticRenderFns__$3 = [];
var __vue_inject_styles__$3 = void 0;
var __vue_scope_id__$3 = void 0;
var __vue_module_identifier__$3 = void 0;
var __vue_is_functional_template__$3 = false;
var __vue_component__$3 = normalizeComponent({
  render: __vue_render__$3,
  staticRenderFns: __vue_staticRenderFns__$3
}, __vue_inject_styles__$3, __vue_script__$3, __vue_scope_id__$3, __vue_is_functional_template__$3, __vue_module_identifier__$3, false, void 0, void 0, void 0);
var TURNTOLEFT = "left";
var TURNTORIGHT = "right";
var HIDDEN = "hidden";
var VISIBLE = "visible";
var script$4 = {
  name: "fw-book",
  components: {
    loadingSvg: __vue_component__$3
  },
  props: {
    styleForPageMain: {
      type: Object,
      default() {
        return {};
      }
    },
    styleForPageIndex: {
      type: Object,
      default() {
        return {};
      }
    },
    data: {
      type: Array,
      required: true
    },
    turnPageByHand: {
      type: Boolean,
      default: true
    },
    initPage: {
      type: Number,
      default: 1
    },
    autoNextPage: {
      type: Boolean,
      default: false
    },
    autoNextPageDelayTime: {
      type: Number,
      default: 3e3
    },
    loop: {
      type: Boolean,
      default: false
    },
    duration: {
      type: Number,
      default: 1e3
    },
    showPageIndex: {
      type: Boolean,
      default: true
    },
    startPageIndex: {
      type: Number,
      default: 0
    },
    endPageIndex: {
      type: Number,
      default: 9999
    }
  },
  data() {
    return {
      pages: [],
      curPage: this.initPage,
      direction: TURNTOLEFT,
      curHalfPage: 0,
      animating: false,
      staying: false
    };
  },
  computed: {
    pageCount() {
      return Math.ceil(this.pages.length / 2);
    }
  },
  methods: {
    assign(obj, target) {
      for (let k in target) {
        if (Object.prototype.hasOwnProperty.call(target, k)) {
          obj[k] = target[k];
        }
      }
      return obj;
    },
    $$emit(type) {
      let leftPage = this.curPage * 2 - 1 - 1;
      let rightPage = this.data[leftPage + 1] ? leftPage + 1 : void 0;
      this.$emit(type, this.curPage, [leftPage, rightPage], [this.data[leftPage], this.data[rightPage]]);
    },
    getPages() {
      const pages = [];
      this.data.forEach((item, index) => {
        let page = this.assign({
          animateClass: "",
          rotate180: false,
          animationDuration: "0s",
          left: false,
          _left: false
        }, item);
        if (index <= this.curPage * 2 - 1 - 1) {
          page.left = true;
          page._left = true;
        }
        pages.push(page);
      });
      this.pages = pages;
      if (this.autoNextPage) {
        this.stay(this.curHalfPage);
      }
    },
    getPageNumByIndex(index) {
      return Math.ceil((index + 1) / 2);
    },
    rotate180() {
      this.pages.forEach((page, index) => {
        if (this.direction === TURNTOLEFT) {
          page.rotate180 = index > 1 && index % 2 === 0;
        } else if (this.direction === TURNTORIGHT) {
          page.rotate180 = index < this.pages.length - 1 && index % 2 === 1;
        }
      });
    },
    animateClass() {
      let emitTurnEnd = true;
      this.pages.forEach((page, index) => {
        page.animationDuration = this.duration / 1e3;
        if (this.direction === TURNTOLEFT) {
          if (this.curPage === 1)
            return;
          let time = setTimeout(() => {
            page._left = true;
            this.animating = false;
            if (emitTurnEnd) {
              emitTurnEnd = false;
              this.$$emit("turnEnd");
            }
          }, this.duration + 50);
          if (this.curPage * 2 - 3 === index) {
            page.animateClass = `${TURNTOLEFT}-${HIDDEN}`;
          } else if (this.curPage * 2 - 2 === index) {
            page.animateClass = `${TURNTOLEFT}-${VISIBLE}`;
          } else {
            clearTimeout(time);
            page.animateClass = "";
          }
        } else if (this.direction === TURNTORIGHT) {
          if (this.curPage === this.pageCount)
            return;
          let time = setTimeout(() => {
            page._left = false;
            this.animating = false;
            if (emitTurnEnd) {
              emitTurnEnd = false;
              this.$$emit("turnEnd");
            }
          }, this.duration + 50);
          if (this.curPage * 2 - 1 === index) {
            page.animateClass = `${TURNTORIGHT}-${VISIBLE}`;
          } else if (this.curPage * 2 === index) {
            page.animateClass = `${TURNTORIGHT}-${HIDDEN}`;
          } else {
            clearTimeout(time);
            page.animateClass = "";
          }
        }
      });
    },
    resetAnimateClass() {
      this.pages.forEach((page) => {
        page.animateClass = "";
        page.left = page._left;
      });
    },
    set_zIndex(index) {
      var pageNum = this.getPageNumByIndex(index);
      if (this.curPage === pageNum) {
        return this.pageCount;
      } else {
        return Math.abs(this.pageCount - Math.abs(this.curPage - pageNum));
      }
    },
    turn(index) {
      if (!this.turnPageByHand)
        return;
      if (this.animating)
        return;
      this.resetAnimateClass();
      if (index % 2 === 0) {
        this.prev();
      } else {
        this.next();
      }
    },
    prev(num) {
      num = this.roundNum(num);
      if (isNaN(num) || num < 1)
        return;
      if (this.animating)
        return;
      if (this.curPage - num < 1)
        return;
      this.direction = TURNTORIGHT;
      this.$$emit("turnStart");
      this.curPage -= num;
      this.$$emit("prev");
    },
    next(num) {
      num = this.roundNum(num);
      if (isNaN(num) || num < 1)
        return;
      if (this.animating)
        return;
      if (this.curPage + num > this.pageCount) {
        if (this.loop) {
          this.resetToFirst();
        } else {
          return;
        }
      }
      this.direction = TURNTOLEFT;
      this.$$emit("turnStart");
      this.curPage += num;
      this.$$emit("next");
    },
    resetToFirst() {
      this.curPage = this.initPage;
      this.curHalfPage = 0;
      this.getPages();
    },
    roundNum(any) {
      return Math.round(any || 1);
    },
    stay(index) {
      this.curHalfPage = index;
      this.staying = true;
      const temp = this.curHalfPage;
      setTimeout(() => {
        if (temp === this.curHalfPage) {
          this.ended();
        }
      }, this.autoNextPageDelayTime);
    },
    ended() {
      this.staying = false;
      if (this.curHalfPage % 2 === 1) {
        if (this.autoNextPage) {
          this.resetAnimateClass();
          this.next();
        }
      } else {
        if (this.autoNextPage) {
          this.curHalfPage += 1;
          console.log(this.curHalfPage);
          this.stay(this.curHalfPage);
        }
      }
    },
    computedData(pageNum) {
      this.curHalfPage = pageNum * 2 - 1 - 1;
      this.animating = true;
      this.rotate180();
      this.animateClass();
      this.stay(this.curHalfPage);
    },
    changeAutoNextPage() {
      this.autoNextPage = !this.autoNextPage;
      if (this.autoNextPage && !this.staying && !this.animating) {
        this.next();
      }
    }
  },
  mounted() {
    this.getPages();
  },
  watch: {
    loop() {
      this.getPages();
    },
    autoNextPage(val) {
      if (val) {
        this.stay(this.curHalfPage);
      }
    },
    data() {
      this.getPages();
    },
    curPage(pageNum) {
      if (pageNum === 1) {
        this.$$emit("atFirstPage");
      } else if (pageNum === this.pageCount) {
        this.$$emit("atEndPage");
      }
      this.computedData(pageNum);
    },
    curHalfPage(num) {
      this.$emit("indexPageChange", num);
    }
  }
};
var __vue_script__$4 = script$4;
var __vue_render__$4 = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", {
    staticClass: "fw-book",
    style: _vm.styleForPageMain
  }, [_vm._l(_vm.pages, function(page, index) {
    return _c("div", {
      key: index,
      ref: "bookItem",
      refInFor: true,
      staticClass: "fw-bookitem",
      class: [{
        rotate180: page.rotate180
      }, page.left ? "left" : "right", page.animateClass],
      style: {
        zIndex: _vm.set_zIndex(index),
        animationDuration: page.animationDuration + "s"
      },
      on: {
        "click": function($event) {
          return _vm.turn(index);
        }
      }
    }, [_vm._t("page", null, null, {
      page,
      index
    }), _vm._v(" "), _vm.showPageIndex && _vm.startPageIndex <= index && _vm.endPageIndex >= index ? _c("i", {
      staticClass: "index",
      class: index % 2 === 0 ? "index-left" : "index-right",
      style: _vm.styleForPageIndex
    }, [_vm._v(_vm._s(index + 1 - _vm.startPageIndex))]) : _vm._e()], 2);
  }), _vm._v(" "), _vm.pages.length === 0 ? [_c("div", {
    staticClass: "fw-bookitem left"
  }, [_c("loading-svg", {
    staticClass: "loading"
  })], 1), _vm._v(" "), _c("div", {
    staticClass: "fw-bookitem right"
  }, [_c("loading-svg", {
    staticClass: "loading"
  })], 1)] : _vm._e()], 2);
};
var __vue_staticRenderFns__$4 = [];
var __vue_inject_styles__$4 = void 0;
var __vue_scope_id__$4 = void 0;
var __vue_module_identifier__$4 = void 0;
var __vue_is_functional_template__$4 = false;
var __vue_component__$4 = normalizeComponent({
  render: __vue_render__$4,
  staticRenderFns: __vue_staticRenderFns__$4
}, __vue_inject_styles__$4, __vue_script__$4, __vue_scope_id__$4, __vue_is_functional_template__$4, __vue_module_identifier__$4, false, void 0, void 0, void 0);
var BookPlugin = pluginFactory({
  components: {
    FwBook: __vue_component__$4
  }
});
var componentsPlugin = pluginFactory({
  plugins: {
    BookblockPlugin,
    Bookblock2Plugin,
    TurnPlugin,
    BookPlugin
  }
});
var {
  installFactory: installFactory$1
} = plugin;
var install = installFactory$1({
  plugins: {
    componentsPlugin
  }
});
var NAME$1 = "FlippingWidgets";
var FlippingWidgets = {
  install,
  NAME: NAME$1
};
var vue_turnjs_esm_default = FlippingWidgets;
export {
  BookPlugin,
  __vue_component__ as Bookblock,
  __vue_component__$1 as Bookblock2,
  Bookblock2Plugin,
  BookblockPlugin,
  FlippingWidgets,
  __vue_component__$4 as FwBook,
  __vue_component__ as FwBookblock,
  __vue_component__$1 as FwBookblock2,
  __vue_component__$2 as FwTurn,
  NAME$1 as NAME,
  __vue_component__$2 as Turn,
  TurnPlugin,
  vue_turnjs_esm_default as default,
  install
};
/*!
 * jQuery JavaScript Library v3.7.0
 * https://jquery.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2023-05-11T18:29Z
 */
/*!
 * modernizr v3.6.0
 * Build https://modernizr.com/download?-csstransforms3d-csstransitions-preserve3d-addtest-prefixed-teststyles-dontmin
 *
 * Copyright (c)
 *  Faruk Ates
 *  Paul Irish
 *  Alex Sexton
 *  Ryan Seddon
 *  Patrick Kettner
 *  Stu Cox
 *  Richard Herrera

 * MIT License
 */
/*!
{
"name": "CSS Supports",
"property": "supports",
"caniuse": "css-featurequeries",
"tags": ["css"],
"builderAliases": ["css_supports"],
"notes": [{
  "name": "W3 Spec",
  "href": "http://dev.w3.org/csswg/css3-conditional/#at-supports"
},{
  "name": "Related Github Issue",
  "href": "https://github.com/Modernizr/Modernizr/issues/648"
},{
  "name": "W3 Info",
  "href": "http://dev.w3.org/csswg/css3-conditional/#the-csssupportsrule-interface"
}]
}
!*/
/*!
{
"name": "CSS Transform Style preserve-3d",
"property": "preserve3d",
"authors": ["denyskoch", "aFarkas"],
"tags": ["css"],
"notes": [{
  "name": "MDN Docs",
  "href": "https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style"
},{
  "name": "Related Github Issue",
  "href": "https://github.com/Modernizr/Modernizr/issues/1748"
}]
}
!*/
/*!
{
"name": "CSS Transforms 3D",
"property": "csstransforms3d",
"caniuse": "transforms3d",
"tags": ["css"],
"warnings": [
  "Chrome may occassionally fail this test on some systems; more info: https://code.google.com/p/chromium/issues/detail?id=129004"
]
}
!*/
/*!
{
"name": "CSS Transitions",
"property": "csstransitions",
"caniuse": "css-transitions",
"tags": ["css"]
}
!*/
//# sourceMappingURL=vue-turnjs.js.map
